{"version":3,"file":"SongTabsAppModern-XxhIRIKp.js","sources":["../../../node_modules/@tanstack/query-core/build/modern/queryObserver.js","../../../node_modules/@tanstack/react-query/build/modern/IsRestoringProvider.js","../../../node_modules/@tanstack/react-query/build/modern/QueryErrorResetBoundary.js","../../../node_modules/@tanstack/react-query/build/modern/errorBoundaryUtils.js","../../../node_modules/@tanstack/react-query/build/modern/suspense.js","../../../node_modules/@tanstack/react-query/build/modern/useBaseQuery.js","../../../node_modules/@tanstack/react-query/build/modern/useQuery.js","../../../src/apps/songs/components/LyricLineEditor.tsx","../../../src/apps/songs/components/SongDetail.tsx","../../../src/apps/songs/services/SpotifyService.ts","../../../src/apps/songs/components/AlbumArt.tsx","../../../src/convert-lyrics.ts","../../../src/img/spotify-icon.svg","../../../src/apps/songs/components/SongEditor.tsx","../../../src/apps/songs/components/SongListTest_MuiTreeView.tsx","../../../src/apps/songs/components/SongListTest.tsx","../../../src/hooks/useLibraryQuery.ts","../../../src/apps/songs/SongTabsAppModern.tsx"],"sourcesContent":["// src/queryObserver.ts\nimport { focusManager } from \"./focusManager.js\";\nimport { notifyManager } from \"./notifyManager.js\";\nimport { fetchState } from \"./query.js\";\nimport { Subscribable } from \"./subscribable.js\";\nimport { pendingThenable } from \"./thenable.js\";\nimport {\n  isServer,\n  isValidTimeout,\n  noop,\n  replaceData,\n  resolveEnabled,\n  resolveStaleTime,\n  shallowEqualObjects,\n  timeUntilStale\n} from \"./utils.js\";\nimport { timeoutManager } from \"./timeoutManager.js\";\nvar QueryObserver = class extends Subscribable {\n  constructor(client, options) {\n    super();\n    this.options = options;\n    this.#client = client;\n    this.#selectError = null;\n    this.#currentThenable = pendingThenable();\n    this.bindMethods();\n    this.setOptions(options);\n  }\n  #client;\n  #currentQuery = void 0;\n  #currentQueryInitialState = void 0;\n  #currentResult = void 0;\n  #currentResultState;\n  #currentResultOptions;\n  #currentThenable;\n  #selectError;\n  #selectFn;\n  #selectResult;\n  // This property keeps track of the last query with defined data.\n  // It will be used to pass the previous data and query to the placeholder function between renders.\n  #lastQueryWithDefinedData;\n  #staleTimeoutId;\n  #refetchIntervalId;\n  #currentRefetchInterval;\n  #trackedProps = /* @__PURE__ */ new Set();\n  bindMethods() {\n    this.refetch = this.refetch.bind(this);\n  }\n  onSubscribe() {\n    if (this.listeners.size === 1) {\n      this.#currentQuery.addObserver(this);\n      if (shouldFetchOnMount(this.#currentQuery, this.options)) {\n        this.#executeFetch();\n      } else {\n        this.updateResult();\n      }\n      this.#updateTimers();\n    }\n  }\n  onUnsubscribe() {\n    if (!this.hasListeners()) {\n      this.destroy();\n    }\n  }\n  shouldFetchOnReconnect() {\n    return shouldFetchOn(\n      this.#currentQuery,\n      this.options,\n      this.options.refetchOnReconnect\n    );\n  }\n  shouldFetchOnWindowFocus() {\n    return shouldFetchOn(\n      this.#currentQuery,\n      this.options,\n      this.options.refetchOnWindowFocus\n    );\n  }\n  destroy() {\n    this.listeners = /* @__PURE__ */ new Set();\n    this.#clearStaleTimeout();\n    this.#clearRefetchInterval();\n    this.#currentQuery.removeObserver(this);\n  }\n  setOptions(options) {\n    const prevOptions = this.options;\n    const prevQuery = this.#currentQuery;\n    this.options = this.#client.defaultQueryOptions(options);\n    if (this.options.enabled !== void 0 && typeof this.options.enabled !== \"boolean\" && typeof this.options.enabled !== \"function\" && typeof resolveEnabled(this.options.enabled, this.#currentQuery) !== \"boolean\") {\n      throw new Error(\n        \"Expected enabled to be a boolean or a callback that returns a boolean\"\n      );\n    }\n    this.#updateQuery();\n    this.#currentQuery.setOptions(this.options);\n    if (prevOptions._defaulted && !shallowEqualObjects(this.options, prevOptions)) {\n      this.#client.getQueryCache().notify({\n        type: \"observerOptionsUpdated\",\n        query: this.#currentQuery,\n        observer: this\n      });\n    }\n    const mounted = this.hasListeners();\n    if (mounted && shouldFetchOptionally(\n      this.#currentQuery,\n      prevQuery,\n      this.options,\n      prevOptions\n    )) {\n      this.#executeFetch();\n    }\n    this.updateResult();\n    if (mounted && (this.#currentQuery !== prevQuery || resolveEnabled(this.options.enabled, this.#currentQuery) !== resolveEnabled(prevOptions.enabled, this.#currentQuery) || resolveStaleTime(this.options.staleTime, this.#currentQuery) !== resolveStaleTime(prevOptions.staleTime, this.#currentQuery))) {\n      this.#updateStaleTimeout();\n    }\n    const nextRefetchInterval = this.#computeRefetchInterval();\n    if (mounted && (this.#currentQuery !== prevQuery || resolveEnabled(this.options.enabled, this.#currentQuery) !== resolveEnabled(prevOptions.enabled, this.#currentQuery) || nextRefetchInterval !== this.#currentRefetchInterval)) {\n      this.#updateRefetchInterval(nextRefetchInterval);\n    }\n  }\n  getOptimisticResult(options) {\n    const query = this.#client.getQueryCache().build(this.#client, options);\n    const result = this.createResult(query, options);\n    if (shouldAssignObserverCurrentProperties(this, result)) {\n      this.#currentResult = result;\n      this.#currentResultOptions = this.options;\n      this.#currentResultState = this.#currentQuery.state;\n    }\n    return result;\n  }\n  getCurrentResult() {\n    return this.#currentResult;\n  }\n  trackResult(result, onPropTracked) {\n    return new Proxy(result, {\n      get: (target, key) => {\n        this.trackProp(key);\n        onPropTracked?.(key);\n        if (key === \"promise\" && !this.options.experimental_prefetchInRender && this.#currentThenable.status === \"pending\") {\n          this.#currentThenable.reject(\n            new Error(\n              \"experimental_prefetchInRender feature flag is not enabled\"\n            )\n          );\n        }\n        return Reflect.get(target, key);\n      }\n    });\n  }\n  trackProp(key) {\n    this.#trackedProps.add(key);\n  }\n  getCurrentQuery() {\n    return this.#currentQuery;\n  }\n  refetch({ ...options } = {}) {\n    return this.fetch({\n      ...options\n    });\n  }\n  fetchOptimistic(options) {\n    const defaultedOptions = this.#client.defaultQueryOptions(options);\n    const query = this.#client.getQueryCache().build(this.#client, defaultedOptions);\n    return query.fetch().then(() => this.createResult(query, defaultedOptions));\n  }\n  fetch(fetchOptions) {\n    return this.#executeFetch({\n      ...fetchOptions,\n      cancelRefetch: fetchOptions.cancelRefetch ?? true\n    }).then(() => {\n      this.updateResult();\n      return this.#currentResult;\n    });\n  }\n  #executeFetch(fetchOptions) {\n    this.#updateQuery();\n    let promise = this.#currentQuery.fetch(\n      this.options,\n      fetchOptions\n    );\n    if (!fetchOptions?.throwOnError) {\n      promise = promise.catch(noop);\n    }\n    return promise;\n  }\n  #updateStaleTimeout() {\n    this.#clearStaleTimeout();\n    const staleTime = resolveStaleTime(\n      this.options.staleTime,\n      this.#currentQuery\n    );\n    if (isServer || this.#currentResult.isStale || !isValidTimeout(staleTime)) {\n      return;\n    }\n    const time = timeUntilStale(this.#currentResult.dataUpdatedAt, staleTime);\n    const timeout = time + 1;\n    this.#staleTimeoutId = timeoutManager.setTimeout(() => {\n      if (!this.#currentResult.isStale) {\n        this.updateResult();\n      }\n    }, timeout);\n  }\n  #computeRefetchInterval() {\n    return (typeof this.options.refetchInterval === \"function\" ? this.options.refetchInterval(this.#currentQuery) : this.options.refetchInterval) ?? false;\n  }\n  #updateRefetchInterval(nextInterval) {\n    this.#clearRefetchInterval();\n    this.#currentRefetchInterval = nextInterval;\n    if (isServer || resolveEnabled(this.options.enabled, this.#currentQuery) === false || !isValidTimeout(this.#currentRefetchInterval) || this.#currentRefetchInterval === 0) {\n      return;\n    }\n    this.#refetchIntervalId = timeoutManager.setInterval(() => {\n      if (this.options.refetchIntervalInBackground || focusManager.isFocused()) {\n        this.#executeFetch();\n      }\n    }, this.#currentRefetchInterval);\n  }\n  #updateTimers() {\n    this.#updateStaleTimeout();\n    this.#updateRefetchInterval(this.#computeRefetchInterval());\n  }\n  #clearStaleTimeout() {\n    if (this.#staleTimeoutId) {\n      timeoutManager.clearTimeout(this.#staleTimeoutId);\n      this.#staleTimeoutId = void 0;\n    }\n  }\n  #clearRefetchInterval() {\n    if (this.#refetchIntervalId) {\n      timeoutManager.clearInterval(this.#refetchIntervalId);\n      this.#refetchIntervalId = void 0;\n    }\n  }\n  createResult(query, options) {\n    const prevQuery = this.#currentQuery;\n    const prevOptions = this.options;\n    const prevResult = this.#currentResult;\n    const prevResultState = this.#currentResultState;\n    const prevResultOptions = this.#currentResultOptions;\n    const queryChange = query !== prevQuery;\n    const queryInitialState = queryChange ? query.state : this.#currentQueryInitialState;\n    const { state } = query;\n    let newState = { ...state };\n    let isPlaceholderData = false;\n    let data;\n    if (options._optimisticResults) {\n      const mounted = this.hasListeners();\n      const fetchOnMount = !mounted && shouldFetchOnMount(query, options);\n      const fetchOptionally = mounted && shouldFetchOptionally(query, prevQuery, options, prevOptions);\n      if (fetchOnMount || fetchOptionally) {\n        newState = {\n          ...newState,\n          ...fetchState(state.data, query.options)\n        };\n      }\n      if (options._optimisticResults === \"isRestoring\") {\n        newState.fetchStatus = \"idle\";\n      }\n    }\n    let { error, errorUpdatedAt, status } = newState;\n    data = newState.data;\n    let skipSelect = false;\n    if (options.placeholderData !== void 0 && data === void 0 && status === \"pending\") {\n      let placeholderData;\n      if (prevResult?.isPlaceholderData && options.placeholderData === prevResultOptions?.placeholderData) {\n        placeholderData = prevResult.data;\n        skipSelect = true;\n      } else {\n        placeholderData = typeof options.placeholderData === \"function\" ? options.placeholderData(\n          this.#lastQueryWithDefinedData?.state.data,\n          this.#lastQueryWithDefinedData\n        ) : options.placeholderData;\n      }\n      if (placeholderData !== void 0) {\n        status = \"success\";\n        data = replaceData(\n          prevResult?.data,\n          placeholderData,\n          options\n        );\n        isPlaceholderData = true;\n      }\n    }\n    if (options.select && data !== void 0 && !skipSelect) {\n      if (prevResult && data === prevResultState?.data && options.select === this.#selectFn) {\n        data = this.#selectResult;\n      } else {\n        try {\n          this.#selectFn = options.select;\n          data = options.select(data);\n          data = replaceData(prevResult?.data, data, options);\n          this.#selectResult = data;\n          this.#selectError = null;\n        } catch (selectError) {\n          this.#selectError = selectError;\n        }\n      }\n    }\n    if (this.#selectError) {\n      error = this.#selectError;\n      data = this.#selectResult;\n      errorUpdatedAt = Date.now();\n      status = \"error\";\n    }\n    const isFetching = newState.fetchStatus === \"fetching\";\n    const isPending = status === \"pending\";\n    const isError = status === \"error\";\n    const isLoading = isPending && isFetching;\n    const hasData = data !== void 0;\n    const result = {\n      status,\n      fetchStatus: newState.fetchStatus,\n      isPending,\n      isSuccess: status === \"success\",\n      isError,\n      isInitialLoading: isLoading,\n      isLoading,\n      data,\n      dataUpdatedAt: newState.dataUpdatedAt,\n      error,\n      errorUpdatedAt,\n      failureCount: newState.fetchFailureCount,\n      failureReason: newState.fetchFailureReason,\n      errorUpdateCount: newState.errorUpdateCount,\n      isFetched: newState.dataUpdateCount > 0 || newState.errorUpdateCount > 0,\n      isFetchedAfterMount: newState.dataUpdateCount > queryInitialState.dataUpdateCount || newState.errorUpdateCount > queryInitialState.errorUpdateCount,\n      isFetching,\n      isRefetching: isFetching && !isPending,\n      isLoadingError: isError && !hasData,\n      isPaused: newState.fetchStatus === \"paused\",\n      isPlaceholderData,\n      isRefetchError: isError && hasData,\n      isStale: isStale(query, options),\n      refetch: this.refetch,\n      promise: this.#currentThenable,\n      isEnabled: resolveEnabled(options.enabled, query) !== false\n    };\n    const nextResult = result;\n    if (this.options.experimental_prefetchInRender) {\n      const finalizeThenableIfPossible = (thenable) => {\n        if (nextResult.status === \"error\") {\n          thenable.reject(nextResult.error);\n        } else if (nextResult.data !== void 0) {\n          thenable.resolve(nextResult.data);\n        }\n      };\n      const recreateThenable = () => {\n        const pending = this.#currentThenable = nextResult.promise = pendingThenable();\n        finalizeThenableIfPossible(pending);\n      };\n      const prevThenable = this.#currentThenable;\n      switch (prevThenable.status) {\n        case \"pending\":\n          if (query.queryHash === prevQuery.queryHash) {\n            finalizeThenableIfPossible(prevThenable);\n          }\n          break;\n        case \"fulfilled\":\n          if (nextResult.status === \"error\" || nextResult.data !== prevThenable.value) {\n            recreateThenable();\n          }\n          break;\n        case \"rejected\":\n          if (nextResult.status !== \"error\" || nextResult.error !== prevThenable.reason) {\n            recreateThenable();\n          }\n          break;\n      }\n    }\n    return nextResult;\n  }\n  updateResult() {\n    const prevResult = this.#currentResult;\n    const nextResult = this.createResult(this.#currentQuery, this.options);\n    this.#currentResultState = this.#currentQuery.state;\n    this.#currentResultOptions = this.options;\n    if (this.#currentResultState.data !== void 0) {\n      this.#lastQueryWithDefinedData = this.#currentQuery;\n    }\n    if (shallowEqualObjects(nextResult, prevResult)) {\n      return;\n    }\n    this.#currentResult = nextResult;\n    const shouldNotifyListeners = () => {\n      if (!prevResult) {\n        return true;\n      }\n      const { notifyOnChangeProps } = this.options;\n      const notifyOnChangePropsValue = typeof notifyOnChangeProps === \"function\" ? notifyOnChangeProps() : notifyOnChangeProps;\n      if (notifyOnChangePropsValue === \"all\" || !notifyOnChangePropsValue && !this.#trackedProps.size) {\n        return true;\n      }\n      const includedProps = new Set(\n        notifyOnChangePropsValue ?? this.#trackedProps\n      );\n      if (this.options.throwOnError) {\n        includedProps.add(\"error\");\n      }\n      return Object.keys(this.#currentResult).some((key) => {\n        const typedKey = key;\n        const changed = this.#currentResult[typedKey] !== prevResult[typedKey];\n        return changed && includedProps.has(typedKey);\n      });\n    };\n    this.#notify({ listeners: shouldNotifyListeners() });\n  }\n  #updateQuery() {\n    const query = this.#client.getQueryCache().build(this.#client, this.options);\n    if (query === this.#currentQuery) {\n      return;\n    }\n    const prevQuery = this.#currentQuery;\n    this.#currentQuery = query;\n    this.#currentQueryInitialState = query.state;\n    if (this.hasListeners()) {\n      prevQuery?.removeObserver(this);\n      query.addObserver(this);\n    }\n  }\n  onQueryUpdate() {\n    this.updateResult();\n    if (this.hasListeners()) {\n      this.#updateTimers();\n    }\n  }\n  #notify(notifyOptions) {\n    notifyManager.batch(() => {\n      if (notifyOptions.listeners) {\n        this.listeners.forEach((listener) => {\n          listener(this.#currentResult);\n        });\n      }\n      this.#client.getQueryCache().notify({\n        query: this.#currentQuery,\n        type: \"observerResultsUpdated\"\n      });\n    });\n  }\n};\nfunction shouldLoadOnMount(query, options) {\n  return resolveEnabled(options.enabled, query) !== false && query.state.data === void 0 && !(query.state.status === \"error\" && options.retryOnMount === false);\n}\nfunction shouldFetchOnMount(query, options) {\n  return shouldLoadOnMount(query, options) || query.state.data !== void 0 && shouldFetchOn(query, options, options.refetchOnMount);\n}\nfunction shouldFetchOn(query, options, field) {\n  if (resolveEnabled(options.enabled, query) !== false && resolveStaleTime(options.staleTime, query) !== \"static\") {\n    const value = typeof field === \"function\" ? field(query) : field;\n    return value === \"always\" || value !== false && isStale(query, options);\n  }\n  return false;\n}\nfunction shouldFetchOptionally(query, prevQuery, options, prevOptions) {\n  return (query !== prevQuery || resolveEnabled(prevOptions.enabled, query) === false) && (!options.suspense || query.state.status !== \"error\") && isStale(query, options);\n}\nfunction isStale(query, options) {\n  return resolveEnabled(options.enabled, query) !== false && query.isStaleByTime(resolveStaleTime(options.staleTime, query));\n}\nfunction shouldAssignObserverCurrentProperties(observer, optimisticResult) {\n  if (!shallowEqualObjects(observer.getCurrentResult(), optimisticResult)) {\n    return true;\n  }\n  return false;\n}\nexport {\n  QueryObserver\n};\n//# sourceMappingURL=queryObserver.js.map","\"use client\";\n\n// src/IsRestoringProvider.ts\nimport * as React from \"react\";\nvar IsRestoringContext = React.createContext(false);\nvar useIsRestoring = () => React.useContext(IsRestoringContext);\nvar IsRestoringProvider = IsRestoringContext.Provider;\nexport {\n  IsRestoringProvider,\n  useIsRestoring\n};\n//# sourceMappingURL=IsRestoringProvider.js.map","\"use client\";\n\n// src/QueryErrorResetBoundary.tsx\nimport * as React from \"react\";\nimport { jsx } from \"react/jsx-runtime\";\nfunction createValue() {\n  let isReset = false;\n  return {\n    clearReset: () => {\n      isReset = false;\n    },\n    reset: () => {\n      isReset = true;\n    },\n    isReset: () => {\n      return isReset;\n    }\n  };\n}\nvar QueryErrorResetBoundaryContext = React.createContext(createValue());\nvar useQueryErrorResetBoundary = () => React.useContext(QueryErrorResetBoundaryContext);\nvar QueryErrorResetBoundary = ({\n  children\n}) => {\n  const [value] = React.useState(() => createValue());\n  return /* @__PURE__ */ jsx(QueryErrorResetBoundaryContext.Provider, { value, children: typeof children === \"function\" ? children(value) : children });\n};\nexport {\n  QueryErrorResetBoundary,\n  useQueryErrorResetBoundary\n};\n//# sourceMappingURL=QueryErrorResetBoundary.js.map","\"use client\";\n\n// src/errorBoundaryUtils.ts\nimport * as React from \"react\";\nimport { shouldThrowError } from \"@tanstack/query-core\";\nvar ensurePreventErrorBoundaryRetry = (options, errorResetBoundary) => {\n  if (options.suspense || options.throwOnError || options.experimental_prefetchInRender) {\n    if (!errorResetBoundary.isReset()) {\n      options.retryOnMount = false;\n    }\n  }\n};\nvar useClearResetErrorBoundary = (errorResetBoundary) => {\n  React.useEffect(() => {\n    errorResetBoundary.clearReset();\n  }, [errorResetBoundary]);\n};\nvar getHasError = ({\n  result,\n  errorResetBoundary,\n  throwOnError,\n  query,\n  suspense\n}) => {\n  return result.isError && !errorResetBoundary.isReset() && !result.isFetching && query && (suspense && result.data === void 0 || shouldThrowError(throwOnError, [result.error, query]));\n};\nexport {\n  ensurePreventErrorBoundaryRetry,\n  getHasError,\n  useClearResetErrorBoundary\n};\n//# sourceMappingURL=errorBoundaryUtils.js.map","// src/suspense.ts\nvar defaultThrowOnError = (_error, query) => query.state.data === void 0;\nvar ensureSuspenseTimers = (defaultedOptions) => {\n  if (defaultedOptions.suspense) {\n    const MIN_SUSPENSE_TIME_MS = 1e3;\n    const clamp = (value) => value === \"static\" ? value : Math.max(value ?? MIN_SUSPENSE_TIME_MS, MIN_SUSPENSE_TIME_MS);\n    const originalStaleTime = defaultedOptions.staleTime;\n    defaultedOptions.staleTime = typeof originalStaleTime === \"function\" ? (...args) => clamp(originalStaleTime(...args)) : clamp(originalStaleTime);\n    if (typeof defaultedOptions.gcTime === \"number\") {\n      defaultedOptions.gcTime = Math.max(\n        defaultedOptions.gcTime,\n        MIN_SUSPENSE_TIME_MS\n      );\n    }\n  }\n};\nvar willFetch = (result, isRestoring) => result.isLoading && result.isFetching && !isRestoring;\nvar shouldSuspend = (defaultedOptions, result) => defaultedOptions?.suspense && result.isPending;\nvar fetchOptimistic = (defaultedOptions, observer, errorResetBoundary) => observer.fetchOptimistic(defaultedOptions).catch(() => {\n  errorResetBoundary.clearReset();\n});\nexport {\n  defaultThrowOnError,\n  ensureSuspenseTimers,\n  fetchOptimistic,\n  shouldSuspend,\n  willFetch\n};\n//# sourceMappingURL=suspense.js.map","\"use client\";\n\n// src/useBaseQuery.ts\nimport * as React from \"react\";\nimport { isServer, noop, notifyManager } from \"@tanstack/query-core\";\nimport { useQueryClient } from \"./QueryClientProvider.js\";\nimport { useQueryErrorResetBoundary } from \"./QueryErrorResetBoundary.js\";\nimport {\n  ensurePreventErrorBoundaryRetry,\n  getHasError,\n  useClearResetErrorBoundary\n} from \"./errorBoundaryUtils.js\";\nimport { useIsRestoring } from \"./IsRestoringProvider.js\";\nimport {\n  ensureSuspenseTimers,\n  fetchOptimistic,\n  shouldSuspend,\n  willFetch\n} from \"./suspense.js\";\nfunction useBaseQuery(options, Observer, queryClient) {\n  if (process.env.NODE_ENV !== \"production\") {\n    if (typeof options !== \"object\" || Array.isArray(options)) {\n      throw new Error(\n        'Bad argument type. Starting with v5, only the \"Object\" form is allowed when calling query related functions. Please use the error stack to find the culprit call. More info here: https://tanstack.com/query/latest/docs/react/guides/migrating-to-v5#supports-a-single-signature-one-object'\n      );\n    }\n  }\n  const isRestoring = useIsRestoring();\n  const errorResetBoundary = useQueryErrorResetBoundary();\n  const client = useQueryClient(queryClient);\n  const defaultedOptions = client.defaultQueryOptions(options);\n  client.getDefaultOptions().queries?._experimental_beforeQuery?.(\n    defaultedOptions\n  );\n  if (process.env.NODE_ENV !== \"production\") {\n    if (!defaultedOptions.queryFn) {\n      console.error(\n        `[${defaultedOptions.queryHash}]: No queryFn was passed as an option, and no default queryFn was found. The queryFn parameter is only optional when using a default queryFn. More info here: https://tanstack.com/query/latest/docs/framework/react/guides/default-query-function`\n      );\n    }\n  }\n  defaultedOptions._optimisticResults = isRestoring ? \"isRestoring\" : \"optimistic\";\n  ensureSuspenseTimers(defaultedOptions);\n  ensurePreventErrorBoundaryRetry(defaultedOptions, errorResetBoundary);\n  useClearResetErrorBoundary(errorResetBoundary);\n  const isNewCacheEntry = !client.getQueryCache().get(defaultedOptions.queryHash);\n  const [observer] = React.useState(\n    () => new Observer(\n      client,\n      defaultedOptions\n    )\n  );\n  const result = observer.getOptimisticResult(defaultedOptions);\n  const shouldSubscribe = !isRestoring && options.subscribed !== false;\n  React.useSyncExternalStore(\n    React.useCallback(\n      (onStoreChange) => {\n        const unsubscribe = shouldSubscribe ? observer.subscribe(notifyManager.batchCalls(onStoreChange)) : noop;\n        observer.updateResult();\n        return unsubscribe;\n      },\n      [observer, shouldSubscribe]\n    ),\n    () => observer.getCurrentResult(),\n    () => observer.getCurrentResult()\n  );\n  React.useEffect(() => {\n    observer.setOptions(defaultedOptions);\n  }, [defaultedOptions, observer]);\n  if (shouldSuspend(defaultedOptions, result)) {\n    throw fetchOptimistic(defaultedOptions, observer, errorResetBoundary);\n  }\n  if (getHasError({\n    result,\n    errorResetBoundary,\n    throwOnError: defaultedOptions.throwOnError,\n    query: client.getQueryCache().get(defaultedOptions.queryHash),\n    suspense: defaultedOptions.suspense\n  })) {\n    throw result.error;\n  }\n  ;\n  client.getDefaultOptions().queries?._experimental_afterQuery?.(\n    defaultedOptions,\n    result\n  );\n  if (defaultedOptions.experimental_prefetchInRender && !isServer && willFetch(result, isRestoring)) {\n    const promise = isNewCacheEntry ? (\n      // Fetch immediately on render in order to ensure `.promise` is resolved even if the component is unmounted\n      fetchOptimistic(defaultedOptions, observer, errorResetBoundary)\n    ) : (\n      // subscribe to the \"cache promise\" so that we can finalize the currentThenable once data comes in\n      client.getQueryCache().get(defaultedOptions.queryHash)?.promise\n    );\n    promise?.catch(noop).finally(() => {\n      observer.updateResult();\n    });\n  }\n  return !defaultedOptions.notifyOnChangeProps ? observer.trackResult(result) : result;\n}\nexport {\n  useBaseQuery\n};\n//# sourceMappingURL=useBaseQuery.js.map","\"use client\";\n\n// src/useQuery.ts\nimport { QueryObserver } from \"@tanstack/query-core\";\nimport { useBaseQuery } from \"./useBaseQuery.js\";\nfunction useQuery(options, queryClient) {\n  return useBaseQuery(options, QueryObserver, queryClient);\n}\nexport {\n  useQuery\n};\n//# sourceMappingURL=useQuery.js.map","import React, { useState, useEffect, useRef } from 'react';\n\nconst LyricLineEditor = ({ line, onSave, onCancel }) => {\n  const [editedLine, setEditedLine] = useState(line || '');\n  const inputRef = useRef(null);\n\n  useEffect(() => {\n    // Focus the input when the editor opens\n    if (inputRef.current) {\n      inputRef.current.focus();\n    }\n  }, []);\n\n  const handleSave = () => {\n    onSave(editedLine);\n  };\n\n  const handleKeyDown = (e: any) => {\n    if (e.key === 'Enter') {\n      handleSave();\n    } else if (e.key === 'Escape') {\n      onCancel();\n    }\n  };\n\n  return (\n    <div className=\"lyric-line-editor\">\n      <input\n        ref={inputRef}\n        type=\"text\"\n        value={editedLine}\n        onChange={(e: any) => setEditedLine(e.target.value)}\n        onKeyDown={handleKeyDown}\n        placeholder=\"Enter lyrics with [Chord] notation...\"\n        className=\"lyric-input\"\n      />\n      <div className=\"editor-controls\">\n        <button onClick={handleSave} className=\"save-button\">Save</button>\n        <button onClick={onCancel} className=\"cancel-button\">Cancel</button>\n      </div>\n    </div>\n  );\n};\n\nexport default LyricLineEditor;\n","import React, { useState } from 'react';\nimport { FaPencilAlt, FaPlus, FaTrash, FaEdit, FaGripVertical, FaClipboard } from 'react-icons/fa';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { setInstrument, transposeSongUp, transposeSongDown } from '../../../store/chordsSlice';\nimport { deleteSong, clearSelectedSong, setGoogleDriveConnection, setUserInfo } from '../../../store/songsSlice';\nimport ChordChart from './ChordChart';\nimport LyricLineEditor from './LyricLineEditor';\nimport { Spin, App, Modal } from 'antd';\nimport {\n  DndContext,\n  closestCenter,\n  KeyboardSensor,\n  PointerSensor,\n  useSensor,\n  useSensors\n} from '@dnd-kit/core';\nimport {\n  arrayMove,\n  SortableContext,\n  sortableKeyboardCoordinates,\n  verticalListSortingStrategy\n} from '@dnd-kit/sortable';\nimport {\n  useSortable\n} from '@dnd-kit/sortable';\nimport { CSS } from '@dnd-kit/utilities';\n\n// Sortable line component for drag and drop\nconst SortableLyricLine = ({ \n  line, \n  index, \n  id, \n  editingLineIndex, \n  editingEnabled, \n  hoveredLineIndex,\n  setHoveredLineIndex,\n  handleEditLine,\n  handleInsertAfter,\n  handleDeleteLine,\n  handleSaveLine,\n  handleCancelEdit,\n  renderLyricLine,\n  isThisLinePending = false,\n  isDragDisabled = false,\n  isPendingDelete = false,\n  isAddingLine = false,\n  isPendingSave = false\n}) => {\n  const {\n    attributes,\n    listeners,\n    setNodeRef,\n    transform,\n    transition,\n    isDragging\n  } = useSortable({ \n    id,\n    disabled: isDragDisabled\n  });\n\n  const style = {\n    transform: CSS.Transform.toString(transform),\n    transition,\n    opacity: isDragging ? 0.5 : (isPendingDelete ? 0.6 : 1)\n  };\n\n  return (\n    <div \n      ref={setNodeRef} \n      style={style} \n      className={`lyric-line ${isPendingDelete ? 'pending-delete' : ''}`}\n      onMouseEnter={() => setHoveredLineIndex(index)}\n      onMouseLeave={() => setHoveredLineIndex(null)}\n    >\n      {editingLineIndex === index && !isAddingLine && editingEnabled ? (\n        <LyricLineEditor\n          line={line}\n          onSave={(newLine) => handleSaveLine(newLine, index)}\n          onCancel={handleCancelEdit}\n        />\n      ) : (\n        <div className=\"lyric-line-row\">\n          <div className=\"lyric-content\">\n            {renderLyricLine(line)}\n          </div>\n          {isPendingSave && (\n            <div className=\"pending-badge pending-save\">\n              <Spin size=\"small\" />\n              <span className=\"pending-text\">Saving...</span>\n            </div>\n          )}\n          {isPendingDelete && (\n            <div className=\"pending-badge pending-delete-badge\">\n              <Spin size=\"small\" />\n              <span className=\"pending-text\">Deleting...</span>\n            </div>\n          )}\n          {hoveredLineIndex === index && editingEnabled && !isPendingDelete && (\n            <div className=\"lyric-controls\">\n              <button \n                className=\"control-button edit\" \n                onClick={(e: any) => {\n                  e.stopPropagation();\n                  handleEditLine(index);\n                }}\n                \n                title=\"Edit this line\"\n              >\n                <FaPencilAlt />\n              </button>\n              <button \n                className=\"control-button insert\" \n                onClick={(e: any) => {\n                  e.stopPropagation();\n                  handleInsertAfter(index);\n                }}\n                \n                title=\"Insert new line after this line\"\n              >\n                <FaPlus />\n              </button>\n              <button \n                className=\"control-button delete\" \n                onClick={(e: any) => {\n                  e.stopPropagation();\n                  handleDeleteLine(index);\n                }}\n                \n                title=\"Delete this line\"\n              >\n                <FaTrash />\n              </button>\n              <div \n                {...(isDragDisabled ? {} : attributes)}\n                {...(isDragDisabled ? {} : listeners)}\n                className=\"drag-handle\"\n                title={isDragDisabled ? 'Drag disabled during update' : 'Drag to reorder'}\n              >\n                {isThisLinePending ? (\n                  <Spin size=\"small\" />\n                ) : (\n                  <FaGripVertical />\n                )}\n              </div>\n            </div>\n          )}\n        </div>\n      )}\n    </div>\n  );\n};\n\nconst SongDetail = ({ song, onPinChord, onUpdateSong, artist, editingEnabled = true }) => {\n  const { message } = App.useApp();\n  const [editingLineIndex, setEditingLineIndex] = useState(null);\n  const [isAddingLine, setIsAddingLine] = useState(false);\n  const [hoveredLineIndex, setHoveredLineIndex] = useState(null);\n  const [localTranspose, setLocalTranspose] = useState(0);\n  const [isEditingWholeSong, setIsEditingWholeSong] = useState(false);\n  const [wholeSongText, setWholeSongText] = useState('');\n  const [pendingSaves, setPendingSaves] = useState(new Set());\n  const [optimisticLyrics, setOptimisticLyrics] = useState(null);\n  const [pendingLineIndex, setPendingLineIndex] = useState(null);\n  const [pendingDeleteLines, setPendingDeleteLines] = useState(new Set());\n  const [isPendingAnyOperation, setIsPendingAnyOperation] = useState(false);\n  const [isSavingTranspose, setIsSavingTranspose] = useState(false);\n  const [isSavingWholeSong, setIsSavingWholeSong] = useState(false);\n  const dispatch = useDispatch();\n  const instrument = useSelector((state: any) => state.chords.currentInstrument);\n  const transpose = useSelector((state: any) => state.chords.transposeBy?.[song.title] || 0);\n  const chordFingerings = useSelector((state: any) => state.chords.chordFingerings);\n  const isGoogleDriveConnected = useSelector((state: any) => state.songs.isGoogleDriveConnected);\n\n  // Set up sensors for drag and drop\n  const sensors = useSensors(\n    useSensor(PointerSensor),\n    useSensor(KeyboardSensor, {\n      coordinateGetter: sortableKeyboardCoordinates\n    })\n  );\n\n  // Extract unique chords from lyrics\n  const extractChords = (lyrics) => {\n    const chordRegex = /\\[(.*?)\\]/g;\n    const allChords = [];\n    \n    lyrics?.forEach((line: any) => {\n      let match;\n      while ((match = chordRegex.exec(line)) !== null) {\n        if (!allChords.includes(match[1])) {\n          allChords.push(match[1]);\n        }\n      }\n    });\n    \n    return allChords;\n  };\n\n  // Helper to shift a chord name by a number of semitones\n  const CHROMATIC = ['C', 'C#', 'D', 'D#', 'E', 'F', 'F#', 'G', 'G#', 'A', 'A#', 'B'];\n  const FLAT_EQUIV = { 'Db': 'C#', 'Eb': 'D#', 'Gb': 'F#', 'Ab': 'G#', 'Bb': 'A#' };\n\n  function transposeChord(chord, semitones) {\n    // Handle slashed chords (e.g. A/C# -> A#/D)\n    if (chord.includes('/')) {\n      const [rootPart, bassPart] = chord.split('/');\n      const transposedRoot = transposeChord(rootPart, semitones);\n      const transposedBass = transposeChord(bassPart, semitones);\n      return `${transposedRoot}/${transposedBass}`;\n    }\n    \n    // Extract root and suffix (e.g. C#m7 -> C#, m7)\n    const match = chord.match(/^([A-G][b#]?)(.*)$/);\n    if (!match) return chord;\n    let [, root, suffix] = match;\n    // Normalize flats to sharps\n    if (FLAT_EQUIV[root]) root = FLAT_EQUIV[root];\n    let idx = CHROMATIC.indexOf(root);\n    if (idx === -1) return chord;\n    let newIdx = (idx + semitones + 12) % 12;\n    return CHROMATIC[newIdx] + suffix;\n  }\n\n  // Helper function to convert complex lyrics format to simple array format\n  const convertLyricsToArray = (lyrics) => {\n    if (!lyrics) return [];\n    \n    // If it's already an array of strings, return as-is\n    if (Array.isArray(lyrics) && lyrics.length > 0 && typeof lyrics[0] === 'string') {\n      return lyrics;\n    }\n    \n    // If it's a string, split by newlines\n    if (typeof lyrics === 'string') {\n      return lyrics ? lyrics.split('\\n') : [];\n    }\n    \n    // If it's the complex nested format from tabs.js\n    if (Array.isArray(lyrics) && lyrics.length > 0 && Array.isArray(lyrics[0])) {\n      const converted = [];\n      \n      lyrics.forEach((verse, verseIndex) => {\n        if (verseIndex > 0) {\n          converted.push(''); // Add blank line between verses\n        }\n        \n        verse.forEach((lineObj) => {\n          if (lineObj && lineObj.text) {\n            let line = lineObj.text;\n            \n            // Add chords inline if they exist\n            if (lineObj.chords && lineObj.chords.length > 0) {\n              // For now, just add the first chord at the beginning of the line\n              // This is a simple conversion - could be made more sophisticated\n              line = `[${lineObj.chords[0]}]${line}`;\n            }\n            \n            converted.push(line);\n          }\n        });\n      });\n      \n      return converted;\n    }\n    \n    // Fallback: return empty array\n    return [];\n  };\n\n  // Ensure lyrics is always an array\n  const lyricsArray = convertLyricsToArray(song.lyrics);\n\n  const chords = (song.chords || extractChords(lyricsArray)).map((chord: any) =>\n    localTranspose !== 0 ? transposeChord(chord, localTranspose) : chord\n  );\n\n  const handleEditLine = (index: number) => {\n    setEditingLineIndex(index);\n    setIsAddingLine(false);\n  };\n\n  const handleInsertAfter = (afterIndex) => {\n    // Block if there are pending operations\n    if (isPendingAnyOperation || pendingDeleteLines.size > 0) {\n      message.warning('Please wait for current operation to complete before inserting a new line.');\n      return;\n    }\n    \n    setIsAddingLine(true);\n    // Set to the position where we want to insert (after the specified index)\n    if (afterIndex === -1) {\n      // Empty song case - insert at position 0\n      setEditingLineIndex(0);\n    } else {\n      // Insert after the specified line\n      setEditingLineIndex(afterIndex + 1);\n    }\n  };\n\n  const handleSaveLine = async (newLine, index: number) => {\n    const updatedLyrics = [...lyricsArray];\n    \n    if (isAddingLine) {\n      // Set pending add state\n      setIsPendingAnyOperation(true);\n      \n      // Check if we're inserting at a specific position or adding at the end\n      const targetIndex = editingLineIndex !== null && editingLineIndex <= lyricsArray.length\n        ? editingLineIndex // Insert at specific position\n        : updatedLyrics.length; // Add at the end\n      \n      // Insert at target position\n      updatedLyrics.splice(targetIndex, 0, newLine);\n      \n      setOptimisticLyrics(updatedLyrics);\n      setPendingSaves(prev => new Set([...prev, targetIndex]));\n      \n      // Exit edit mode immediately for better UX\n      setEditingLineIndex(null);\n      setIsAddingLine(false);\n      \n      // Save the add operation\n      onUpdateSong({\n        ...song,\n        lyrics: updatedLyrics\n      }).then(() => {\n        message.success('Line added successfully!');\n        setOptimisticLyrics(null);\n        setIsPendingAnyOperation(false);\n        setPendingSaves(prev => {\n          const newSet = new Set(prev);\n          newSet.delete(targetIndex);\n          return newSet;\n        });\n        // Ensure we completely reset editing state\n        setEditingLineIndex(null);\n        setIsAddingLine(false);\n      }).catch((error) => {\n        console.error('Failed to add line:', error);\n        message.error('Failed to add new line. Please try again.');\n        // Revert optimistic update\n        setOptimisticLyrics(null);\n        setIsPendingAnyOperation(false);\n        setPendingSaves(prev => {\n          const newSet = new Set(prev);\n          newSet.delete(targetIndex);\n          return newSet;\n        });\n        setIsAddingLine(true);\n        setEditingLineIndex(null);\n      });\n    } else {\n      // Set pending edit state\n      setIsPendingAnyOperation(true);\n      setPendingSaves(prev => new Set([...prev, index]));\n      \n      // Update existing line - optimistic update\n      updatedLyrics[index] = newLine;\n      setOptimisticLyrics(updatedLyrics);\n      \n      // Exit edit mode immediately for better UX\n      setEditingLineIndex(null);\n      \n      // Save the edit operation\n      onUpdateSong({\n        ...song,\n        lyrics: updatedLyrics\n      }).then(() => {\n        message.success('Line updated successfully!');\n        setOptimisticLyrics(null);\n        setIsPendingAnyOperation(false);\n        setPendingSaves(prev => {\n          const newSet = new Set(prev);\n          newSet.delete(index);\n          return newSet;\n        });\n      }).catch((error) => {\n        console.error('Failed to update line:', error);\n        message.error('Failed to update line. Please try again.');\n        // Revert optimistic update\n        setOptimisticLyrics(null);\n        setIsPendingAnyOperation(false);\n        setPendingSaves(prev => {\n          const newSet = new Set(prev);\n          newSet.delete(index);\n          return newSet;\n        });\n        setEditingLineIndex(index);\n      });\n    }\n  };\n\n  const handleCancelEdit = () => {\n    setEditingLineIndex(null);\n    setIsAddingLine(false);\n  };\n\n  // Handle deleting a line with optimistic updates\n  const handleDeleteLine = async (index: number) => {\n    // Block if there are pending operations\n    if (isPendingAnyOperation || pendingDeleteLines.has(index)) {\n      message.warning('Please wait for current operation to complete before deleting this line.');\n      return;\n    }\n\n    // Set pending delete state\n    setIsPendingAnyOperation(true);\n    setPendingDeleteLines(prev => new Set([...prev, index]));\n\n    const updatedLyrics = [...lyricsArray];\n    updatedLyrics.splice(index, 1);\n    \n    // Optimistic update\n    setOptimisticLyrics(updatedLyrics);\n\n    try {\n      await onUpdateSong({\n        ...song,\n        lyrics: updatedLyrics\n      });\n      \n      message.success('Line deleted successfully!');\n      setOptimisticLyrics(null);\n      setIsPendingAnyOperation(false);\n      setPendingDeleteLines(prev => {\n        const newSet = new Set(prev);\n        newSet.delete(index);\n        return newSet;\n      });\n    } catch (error: unknown) {\n      console.error('Failed to delete line:', error);\n      message.error('Failed to delete line. Please try again.');\n      \n      // Revert optimistic update\n      setOptimisticLyrics(null);\n      setIsPendingAnyOperation(false);\n      setPendingDeleteLines(prev => {\n        const newSet = new Set(prev);\n        newSet.delete(index);\n        return newSet;\n      });\n    }\n  };\n\n  // Handle drag end for reordering lines with optimistic updates\n  const handleDragEnd = async (event: any) => {\n    const { active, over } = event;\n\n    if (active.id !== over.id) {\n      // Set pending reorder state\n      setIsPendingAnyOperation(true);\n      \n      const oldIndex = lyricsArray.findIndex((_, index: number) => index.toString() === active.id);\n      const newIndex = lyricsArray.findIndex((_, index: number) => index.toString() === over.id);\n      \n      // Optimistic update - immediately show the new order\n      const newLyrics = arrayMove(lyricsArray, oldIndex, newIndex);\n      setOptimisticLyrics(newLyrics);\n      setPendingLineIndex(newIndex); // Track which line is pending\n      \n      // Save the reorder operation\n      onUpdateSong({\n        ...song,\n        lyrics: newLyrics\n      }).then(() => {\n        message.success('Lines reordered successfully!');\n        setOptimisticLyrics(null);\n        setIsPendingAnyOperation(false);\n        setPendingLineIndex(null);\n      }).catch((error) => {\n        console.error('Failed to reorder lines:', error);\n        message.error('Failed to reorder lines. Please try again.');\n        // Revert optimistic update\n        setOptimisticLyrics(null);\n        setIsPendingAnyOperation(false);\n        setPendingLineIndex(null);\n      });\n    }\n  };\n\n  // Remove the old handleMoveLine function as it's replaced by drag and drop\n\n  // Handle whole song editing\n  const handleEditWholeSong = () => {\n    setWholeSongText(lyricsArray.join('\\n'));\n    setIsEditingWholeSong(true);\n  };\n\n  const handleSaveWholeSong = async () => {\n    setIsSavingWholeSong(true);\n    try {\n      const newLyrics = wholeSongText.split('\\n').filter((line: any) => line.trim() !== '');\n      await onUpdateSong({\n        ...song,\n        lyrics: newLyrics,\n        chords: extractChords(newLyrics)\n      });\n      setIsEditingWholeSong(false);\n      message.success('Song lyrics saved successfully!');\n    } catch (error: unknown) {\n      console.error('Failed to save whole song:', error);\n      message.error('Failed to save song. Please try again.');\n    } finally {\n      setIsSavingWholeSong(false);\n    }\n  };\n\n  // Helper function to check if error is authentication-related\n  const isAuthError = (error) => {\n    if (!error) return false;\n    const message = error.message || error || '';\n    const authErrorPatterns = [\n      'User not signed in to Google Drive',\n      'Expected OAuth 2 access token',\n      'login cookie or other valid authentication credential', \n      'Invalid Credentials',\n      'Authentication failed',\n      'unauthorized_client',\n      'invalid_token',\n      'expired_token',\n      'access_denied',\n      'token_expired',\n      'Request had invalid authentication credentials'\n    ];\n    return authErrorPatterns.some((pattern: any) => \n      message.toLowerCase().includes(pattern.toLowerCase())\n    );\n  };\n\n  // Handle opening the popconfirm - start countdown\n  const handleDeleteConfirm = () => {\n    // This is called when user clicks the actual Delete button in the popconfirm\n    handleDeleteSong();\n  };\n\n  // Handle actual song deletion\n  const handleDeleteSong = async () => {\n    try {\n      await dispatch(deleteSong({\n        artistName: artist.name,\n        albumTitle: song.album?.title,\n        songTitle: song.title,\n        isGoogleDriveConnected\n      })).unwrap();\n\n      message.success('Song deleted successfully!');\n      \n      // Clear selected song to navigate away\n      dispatch(clearSelectedSong());\n      \n    } catch (error: unknown) {\n      console.error('Failed to delete song:', error);\n      \n      // Check if this is an authentication error\n      if (isAuthError(error)) {\n        dispatch(setGoogleDriveConnection(false));\n        dispatch(setUserInfo(null));\n        message.error('Your Google Drive session has expired. Please sign in again to delete songs.');\n      } else {\n        message.error(error.message || 'Failed to delete song. Please try again.');\n      }\n    }\n  };\n\n  const handleCancelWholeSong = () => {\n    setIsEditingWholeSong(false);\n    setWholeSongText('');\n  };\n\n  // Function to render a lyric line with chord formatting above text\n  const renderLyricLine = (line) => {\n    const chordRegex = /\\[(.*?)\\]/g;\n    const chordPositions = [];\n    let plainText = line;\n    let match;\n    \n    // Extract chord positions and create plain text\n    while ((match = chordRegex.exec(line)) !== null) {\n      chordPositions.push({\n        chord: match[1],\n        position: match.index,\n        length: match[0].length\n      });\n    }\n    \n    // Remove chord markers for plain text\n    plainText = plainText.replace(/\\[(.*?)\\]/g, '');\n    \n    // Calculate positions for chord labels\n    const adjustedChordPositions = chordPositions.map((item, index: number) => {\n      let adjustment = 0;\n      for (let i = 0; i < index; i++) {\n        adjustment += chordPositions[i].length;\n      }\n      // Transpose the chord if needed\n      const transposedChord = localTranspose !== 0 ? transposeChord(item.chord, localTranspose) : item.chord;\n      return {\n        ...item,\n        chord: transposedChord,\n        position: item.position - adjustment\n      };\n    });\n    \n    return (\n      <div className=\"lyric-line-with-chords\">\n        <div className=\"chord-labels\">\n          {adjustedChordPositions.map((item, idx: number) => (\n            <span \n              key={`chord-${idx}`} \n              className=\"chord-label\"\n              style={{ left: `${item.position}ch` }}\n              onClick={() => onPinChord(item.chord)}\n            >\n              {item.chord}\n            </span>\n          ))}\n        </div>\n        <div className=\"lyric-text-only\">\n          {plainText}\n        </div>\n      </div>\n    );\n  };\n\n  React.useEffect(() => {\n    // Sync local transpose with redux only when song changes\n    setLocalTranspose(transpose);\n  }, [song.title]);\n\n  const handleTransposeUp = () => {\n    setLocalTranspose((prev) => prev + 1);\n    dispatch(transposeSongUp(song.title));\n  };\n  const handleTransposeDown = () => {\n    setLocalTranspose((prev) => prev - 1);\n    dispatch(transposeSongDown(song.title));\n  };\n  const handleSaveTranspose = async () => {\n    setIsSavingTranspose(true);\n    try {\n      // Apply transposition to all lyrics inline\n      const transposedLyrics = lyricsArray.map((line: any) => {\n        const chordRegex = /\\[([^\\]]+)\\]/g;\n        return line.replace(chordRegex, (match, chord) => {\n          const transposedChord = transposeChord(chord, localTranspose);\n          return `[${transposedChord}]`;\n        });\n      });\n\n      const updatedSong = { \n        ...song, \n        lyrics: transposedLyrics,\n        chords: extractChords(transposedLyrics),\n        chordFingerings: chordFingerings\n      };\n      \n      await onUpdateSong(updatedSong);\n      \n      // Reset local transpose since it's now baked into the lyrics\n      setLocalTranspose(0);\n\n      // Show success message\n      message.success('Transposed lyrics saved successfully!');\n    } catch (error: unknown) {\n      console.error('Failed to save transposed lyrics:', error);\n      message.error('Failed to save transposed lyrics. Please try again.');\n    } finally {\n      setIsSavingTranspose(false);\n    }\n  };\n\n  return (\n    <div className=\"song-detail\">      \n      {/* Chord section */}\n        <div className=\"chords-section\">\n        <div className=\"chords-header\">\n          <div className=\"chords-header-left\">\n            <button\n              className=\"transpose-btn\"\n              title=\"Transpose Down\"\n              onClick={handleTransposeDown}\n            >\n              -\n            </button>\n            <span className=\"transpose-label\">Transpose: {localTranspose > 0 ? `+${localTranspose}` : localTranspose} semitones</span>\n            <button\n              className=\"transpose-btn\"\n              title=\"Transpose Up\"\n              onClick={handleTransposeUp}\n            >\n              +\n            </button>\n            <button\n              className=\"save-transpose-btn\"\n              onClick={handleSaveTranspose}\n                disabled={localTranspose === 0 || isSavingTranspose}\n            >\n              {isSavingTranspose && <Spin size=\"small\" />}\n              Save Transposed Lyrics\n            </button>\n          </div>\n          <div className=\"instrument-selector\">\n            <label htmlFor=\"instrument-select\" className=\"instrument-label\">Instrument:</label>\n            <select\n              id=\"instrument-select\"\n              value={instrument}\n              onChange={(e: any) => dispatch(setInstrument(e.target.value))}\n              className=\"instrument-select\"\n            >\n              <option value=\"ukulele\">Ukulele</option>\n              <option value=\"guitar\">Guitar</option>\n              <option value=\"piano\">Piano</option>\n              <option value=\"bassGuitar\">Bass Guitar</option>\n              <option value=\"bassUkulele\">Bass Ukulele</option>\n              <option value=\"baritoneUkulele\">Baritone Ukulele</option>\n            </select>\n          </div>\n        </div>\n        <div className=\"chord-container\">\n          {chords.map((chord: any) => (\n            <div key={chord} className=\"chord-item\" onClick={() => onPinChord(chord)}>\n              <ChordChart\n                chord={chord}\n                instrument={instrument}\n              />\n            </div>\n          ))}\n        </div>\n      </div>\n      \n      {/* Lyrics section */}\n          <div className=\"lyrics-section\">\n        <div className=\"lyrics-container\">\n          {/* Song metadata */}\n          <div className=\"song-header-row\">\n            <div className=\"song-header-main\">\n              <div className=\"song-header-titles\">\n                <h3 className=\"song-header-title\">{song.title}</h3>\n                <i className=\"song-header-artist\">{artist.name}</i>\n                {song.album && song.album.title && (\n                  <span className=\"song-header-meta\">\n                    • {song.album.title}\n                  </span>\n                )}\n              </div>\n            </div>\n\n            {/* Edit buttons */}\n            <div className=\"song-header-actions\">\n              {editingEnabled && !isEditingWholeSong && (\n                <>\n                  <button \n                    className=\"edit-whole-song-btn\"\n                    onClick={handleEditWholeSong}\n                  >\n                    <FaEdit /> Edit Whole Song\n                  </button>\n                  <button \n                    className=\"delete-song-btn\"\n                    onClick={() => {\n                      Modal.confirm({\n                        title: 'Delete song?',\n                        content: `Are you sure you want to delete \"${song.title}\" by ${artist?.name || 'Unknown Artist'}?`,\n                        okText: 'Delete',\n                        cancelText: 'Cancel',\n                        onOk: () => handleDeleteConfirm()\n                      });\n                    }}\n                  >\n                    <FaTrash /> Delete Song\n                  </button>\n                </>\n              )}\n              {isEditingWholeSong && (\n                  <div className=\"save-cancel-row\">\n                  <button \n                    className=\"save-whole-song-btn\"\n                    onClick={handleSaveWholeSong}\n                    disabled={isSavingWholeSong}\n                  >\n                    {isSavingWholeSong ? <Spin size=\"small\" /> : <FaClipboard />}\n                    Save\n                  </button>\n                  <button \n                    className=\"cancel-whole-song-btn\"\n                    onClick={handleCancelWholeSong}\n                  >\n                    Cancel\n                  </button>\n                </div>\n              )}\n            </div>\n          </div>\n\n          {isEditingWholeSong ? (\n            <textarea\n              value={wholeSongText}\n              onChange={(e: any) => setWholeSongText(e.target.value)}\n              className=\"whole-song-textarea\"\n            />\n          ) : (\n            <DndContext\n              sensors={sensors}\n              collisionDetection={closestCenter}\n              onDragEnd={handleDragEnd}\n            >\n              <SortableContext\n                items={(optimisticLyrics || lyricsArray).map((_, index: number) => index.toString())}\n                strategy={verticalListSortingStrategy}\n              >\n                {(optimisticLyrics || lyricsArray).map((line, index: number) => (\n                  <SortableLyricLine\n                    key={index}\n                    id={index.toString()}\n                    index={index}\n                    line={line}\n                    editingLineIndex={editingLineIndex}\n                    editingEnabled={editingEnabled}\n                    hoveredLineIndex={hoveredLineIndex}\n                    setHoveredLineIndex={setHoveredLineIndex}\n                    handleEditLine={handleEditLine}\n                    handleInsertAfter={handleInsertAfter}\n                    handleDeleteLine={handleDeleteLine}\n                    handleSaveLine={handleSaveLine}\n                    handleCancelEdit={handleCancelEdit}\n                    renderLyricLine={renderLyricLine}\n                    isThisLinePending={pendingLineIndex === index}\n                    isDragDisabled={isPendingAnyOperation || pendingDeleteLines.size > 0}\n                    isPendingDelete={pendingDeleteLines.has(index)}\n                    isAddingLine={isAddingLine && editingLineIndex === index}\n                    isPendingSave={pendingSaves.has(index)}\n                  />\n                ))}\n                {isAddingLine && editingLineIndex === (optimisticLyrics || lyricsArray).length && (\n                  <LyricLineEditor\n                    line=\"\"\n                    onSave={(newLine) => handleSaveLine(newLine, (optimisticLyrics || lyricsArray).length)}\n                    onCancel={handleCancelEdit}\n                    isAdding\n                  />\n                )}\n              </SortableContext>\n            </DndContext>\n          )}\n          \n          {editingEnabled && !isEditingWholeSong && (\n            <div className=\"add-line-row\">\n              <button \n                className=\"add-line-btn\"\n                onClick={() => handleInsertAfter((optimisticLyrics || lyricsArray).length - 1)}\n                disabled={isPendingAnyOperation || pendingDeleteLines.size > 0}\n              >\n                <FaPlus /> Add Line\n              </button>\n            </div>\n          )}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default SongDetail;\n","// Spotify Web API service for fetching album artwork and artist albums\n// NOTE: This is the updated secure version that calls a backend API\nclass SpotifyService {\n  apiEndpoint: string;\n  albumCache: Map<string, any>;\n  cacheExpiry: number;\n\n  constructor() {\n    // Backend API endpoint for Spotify searches - using your deployed Cloudflare worker\n    this.apiEndpoint = import.meta.env.VITE_SPOTIFY_API_ENDPOINT || 'https://songs-spotify-api.ai-recipe-notepad.workers.dev/api/spotify-search';\n    // Cache for artist albums to avoid repeated API calls\n    this.albumCache = new Map();\n    this.cacheExpiry = 24 * 60 * 60 * 1000; // 24 hours in milliseconds\n  }\n\n  // Search for album art by artist and album (no track required)\n  async searchAlbumArt(artist, album = null) {\n    try {\n      const response = await fetch(this.apiEndpoint, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({ \n          artist, \n          album,\n          searchType: 'album' // Tell the worker to search for albums, not tracks\n        })\n      });\n\n      if (!response.ok) {\n        throw new Error(`Album search request failed: ${response.status}`);\n      }\n\n      const data = await response.json();\n      \n      // Check for album results first, then track results as fallback\n      if (data.albums?.items?.length > 0) {\n        const albumItem = data.albums.items[0];\n        return {\n          albumArt: albumItem.images?.[0]?.url || null,\n          albumName: albumItem.name,\n          artistName: albumItem.artists?.[0]?.name,\n          releaseDate: albumItem.release_date,\n          spotifyUrl: albumItem.external_urls?.spotify,\n          totalTracks: albumItem.total_tracks\n        };\n      } else if (data.tracks?.items?.length > 0) {\n        // Fallback to track search if no album found\n        const trackItem = data.tracks.items[0];\n        return {\n          albumArt: trackItem.album.images?.[0]?.url || null,\n          albumName: trackItem.album.name,\n          artistName: trackItem.artists?.[0]?.name,\n          trackName: trackItem.name,\n          releaseDate: trackItem.album.release_date,\n          spotifyUrl: trackItem.external_urls?.spotify\n        };\n      }\n\n      return null;\n    } catch (error: unknown) {\n      console.error('Spotify album search failed:', error);\n      return null;\n    }\n  }\n\n  // Keep the original method for backwards compatibility\n  async searchTrack(artist, track, album = null) {\n    try {\n      const response = await fetch(this.apiEndpoint, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({ artist, track, album })\n      });\n\n      if (!response.ok) {\n        throw new Error(`Search request failed: ${response.status}`);\n      }\n\n      const data = await response.json();\n      \n      if (data.tracks?.items?.length > 0) {\n        const trackItem = data.tracks.items[0];\n        return {\n          albumArt: trackItem.album.images?.[0]?.url || null,\n          albumName: trackItem.album.name,\n          artistName: trackItem.artists?.[0]?.name,\n          trackName: trackItem.name,\n          releaseDate: trackItem.album.release_date,\n          spotifyUrl: trackItem.external_urls?.spotify\n        };\n      }\n\n      return null;\n    } catch (error: unknown) {\n      console.error('Spotify search failed:', error);\n      return null;\n    }\n  }\n\n  // Get albums for an artist (cached)\n  async getAlbumsForArtist(artistName) {\n    if (!artistName || artistName.trim() === '') {\n      return [];\n    }\n\n    const cacheKey = artistName.toLowerCase().trim();\n    \n    // Check cache first\n    const cached = this.albumCache.get(cacheKey);\n    if (cached && Date.now() - cached.timestamp < this.cacheExpiry) {\n      return cached.albums;\n    }\n\n    try {\n      const response = await fetch(this.apiEndpoint, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({ \n          artist: artistName,\n          searchType: 'artist-albums' // Tell the backend to search for artist albums\n        })\n      });\n\n      if (!response.ok) {\n        // If it's a 404, the endpoint might not be set up yet\n        if (response.status === 404) {\n          console.warn('Spotify API endpoint not configured - album suggestions disabled');\n        } else {\n          console.error(`Artist albums search failed: ${response.status}`);\n        }\n        throw new Error(`Artist albums search failed: ${response.status}`);\n      }\n\n      const data = await response.json();\n      \n      // Check for error in response data\n      if (data.error) {\n        console.warn('Spotify API error:', data.error);\n        throw new Error(data.error);\n      }\n      \n      // Extract album names from the response\n      let albums = [];\n      if (data.albums?.items) {\n        // Deduplicate and sort album names\n        albums = [...new Set(\n          data.albums.items.map((album: any) => album.name)\n        )].sort();\n      }\n      \n      // Cache the result\n      this.albumCache.set(cacheKey, {\n        albums,\n        timestamp: Date.now()\n      });\n\n      return albums;\n    } catch (error: unknown) {\n      console.error('Failed to get artist albums:', error);\n      // Cache empty result to avoid repeated failed searches\n      this.albumCache.set(cacheKey, {\n        albums: [],\n        timestamp: Date.now()\n      });\n      return [];\n    }\n  }\n\n  // Search for artists by name (for fuzzy matching/autocomplete)\n  async searchArtists(searchTerm) {\n    if (!searchTerm || searchTerm.trim() === '') {\n      return [];\n    }\n\n    const cacheKey = `artist_search_${searchTerm.toLowerCase().trim()}`;\n    \n    // Check cache first\n    const cached = this.albumCache.get(cacheKey);\n    if (cached && Date.now() - cached.timestamp < this.cacheExpiry) {\n      return cached.artists;\n    }\n\n    try {\n      const response = await fetch(this.apiEndpoint, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({ \n          artist: searchTerm,\n          searchType: 'artist' // Tell the backend to search for artists\n        })\n      });\n\n      if (!response.ok) {\n        console.error(`Artist search failed: ${response.status}`);\n        throw new Error(`Artist search failed: ${response.status}`);\n      }\n\n      const data = await response.json();\n      \n      // Check for error in response data\n      if (data.error) {\n        console.warn('Spotify API error:', data.error);\n        throw new Error(data.error);\n      }\n      \n      // Extract artist names from the response\n      let artists = [];\n      if (data.artists?.items) {\n        // Deduplicate and sort artist names\n        artists = [...new Set(\n          data.artists.items.map((artist: any) => artist.name)\n        )].sort();\n      }\n      \n      // Cache the result\n      this.albumCache.set(cacheKey, {\n        artists,\n        timestamp: Date.now()\n      });\n\n      return artists;\n    } catch (error: unknown) {\n      console.error('Failed to search artists:', error);\n      // Cache empty result to avoid repeated failed searches\n      this.albumCache.set(cacheKey, {\n        artists: [],\n        timestamp: Date.now()\n      });\n      return [];\n    }\n  }\n\n  // Clear the album cache (useful for testing or if needed)\n  clearAlbumCache() {\n    this.albumCache.clear();\n  }\n\n  // Get album cache stats (for debugging)\n  getAlbumCacheStats() {\n    return {\n      size: this.albumCache.size,\n      entries: Array.from(this.albumCache.keys())\n    };\n  }\n\n  // Get album artwork URL with fallback handling\n  getAlbumArtUrl(trackData) {\n    if (!trackData?.albumArt) return null;\n    return trackData.albumArt;\n  }\n\n  // Get tracks from a specific album (for song title suggestions)\n  async getTracksFromAlbum(artistName, albumName) {\n    if (!artistName || !albumName || artistName.trim() === '' || albumName.trim() === '') {\n      return [];\n    }\n\n    const cacheKey = `album_tracks_${artistName.toLowerCase().trim()}_${albumName.toLowerCase().trim()}`;\n    \n    // Check cache first\n    const cached = this.albumCache.get(cacheKey);\n    if (cached && Date.now() - cached.timestamp < this.cacheExpiry) {\n      return cached.tracks;\n    }\n\n    try {\n      const response = await fetch(this.apiEndpoint, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({ \n          artist: artistName,\n          album: albumName,\n          searchType: 'tracks' // Tell the backend to search for tracks in an album\n        })\n      });\n\n      if (!response.ok) {\n        console.error(`Album tracks search failed: ${response.status}`);\n        throw new Error(`Album tracks search failed: ${response.status}`);\n      }\n\n      const data = await response.json();\n      \n      // Check for error in response data\n      if (data.error) {\n        console.warn('Spotify API error:', data.error);\n        throw new Error(data.error);\n      }\n      \n      // Extract track names from the response\n      let tracks = [];\n      if (data.tracks?.items) {\n        // Deduplicate and sort track names\n        tracks = [...new Set(\n          data.tracks.items.map((track: any) => track.name)\n        )].sort();\n      }\n      \n      // Cache the result\n      this.albumCache.set(cacheKey, {\n        tracks,\n        timestamp: Date.now()\n      });\n\n      return tracks;\n    } catch (error: unknown) {\n      console.error('Failed to get album tracks:', error);\n      // Cache empty result to avoid repeated failed searches\n      this.albumCache.set(cacheKey, {\n        tracks: [],\n        timestamp: Date.now()\n      });\n      return [];\n    }\n  }\n\n  // Search for tracks by name (for fuzzy matching/autocomplete)\n  async searchTracks(searchTerm, artistName = null) {\n    if (!searchTerm || searchTerm.trim() === '') {\n      return [];\n    }\n\n    const cacheKey = `track_search_${searchTerm.toLowerCase().trim()}_${artistName ? artistName.toLowerCase().trim() : 'any'}`;\n    \n    // Check cache first\n    const cached = this.albumCache.get(cacheKey);\n    if (cached && Date.now() - cached.timestamp < this.cacheExpiry) {\n      return cached.tracks;\n    }\n\n    try {\n      const response = await fetch(this.apiEndpoint, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({ \n          track: searchTerm,\n          artist: artistName,\n          searchType: 'track-search' // Tell the backend to search for tracks by name\n        })\n      });\n\n      if (!response.ok) {\n        console.error(`Track search failed: ${response.status}`);\n        throw new Error(`Track search failed: ${response.status}`);\n      }\n\n      const data = await response.json();\n      \n      // Check for error in response data\n      if (data.error) {\n        console.warn('Spotify API error:', data.error);\n        throw new Error(data.error);\n      }\n      \n      // Extract track names from the response\n      let tracks = [];\n      if (data.tracks?.items) {\n        // Deduplicate and sort track names\n        tracks = [...new Set(\n          data.tracks.items.map((track: any) => track.name)\n        )].sort();\n      }\n      \n      // Cache the result\n      this.albumCache.set(cacheKey, {\n        tracks,\n        timestamp: Date.now()\n      });\n\n      return tracks;\n    } catch (error: unknown) {\n      console.error('Failed to search tracks:', error);\n      // Cache empty result to avoid repeated failed searches\n      this.albumCache.set(cacheKey, {\n        tracks: [],\n        timestamp: Date.now()\n      });\n      return [];\n    }\n  }\n}\n\nexport default new SpotifyService();","import React, { useState, useEffect } from 'react';\nimport SpotifyService from '../services/SpotifyService';\n\n// Cache utility functions\nconst CACHE_KEY_PREFIX = 'albumArt_';\nconst CACHE_EXPIRY_HOURS = 24; // Cache for 24 hours\n\nconst getCacheKey = (artist, album: any) => {\n  // Cache by artist and album only (not track)\n  return `${CACHE_KEY_PREFIX}${artist}_${album || 'unknown'}`.replace(/[^a-zA-Z0-9_]/g, '_');\n};\n\nconst getCachedData = (cacheKey) => {\n  try {\n    const cached = localStorage.getItem(cacheKey);\n    if (cached) {\n      const { data, timestamp } = JSON.parse(cached);\n      const now = Date.now();\n      const expiryTime = timestamp + (CACHE_EXPIRY_HOURS * 60 * 60 * 1000);\n      \n      if (now < expiryTime) {\n        return data;\n      } else {\n        // Cache expired, remove it\n        localStorage.removeItem(cacheKey);\n      }\n    }\n  } catch (error: unknown) {\n    console.warn('Cache read error:', error);\n  }\n  return null;\n};\n\nconst setCachedData = (cacheKey, data: any) => {\n  try {\n    const cacheObject = {\n      data,\n      timestamp: Date.now()\n    };\n    localStorage.setItem(cacheKey, JSON.stringify(cacheObject));\n  } catch (error: unknown) {\n    console.warn('Cache write error:', error);\n  }\n};\n\nconst AlbumArt = ({ artist, album, size = 150 }) => {\n  const [albumData, setAlbumData] = useState(null);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(null);\n\n  useEffect(() => {\n    const fetchAlbumArt = async () => {\n      if (!artist) return; // Only require artist, not track\n\n      const cacheKey = getCacheKey(artist, album);\n      \n      // Check cache first\n      const cachedData = getCachedData(cacheKey);\n      if (cachedData) {\n        console.log('🎯 Cache hit for:', artist, album ? `- ${album}` : '(any album)');\n        setAlbumData(cachedData);\n        return;\n      }\n\n      setLoading(true);\n      setError(null);\n      \n      try {\n        console.log('🌐 API call for:', artist, album ? `- ${album}` : '(searching artist albums)');\n        const data = await SpotifyService.searchAlbumArt(artist, album);\n        setAlbumData(data);\n        \n        // Cache the result\n        if (data) {\n          setCachedData(cacheKey, data);\n        }\n      } catch (err: unknown) {\n        // Detailed error handling\n        let errorMessage = 'Failed to load album art';\n        \n        if (err.name === 'TypeError' && err.message.includes('Failed to fetch')) {\n          errorMessage = 'Network error: Cannot reach Spotify API service';\n        } else if (err.message.includes('JSON')) {\n          errorMessage = `JSON Parse Error: ${err.message}`;\n        } else if (err.message.includes('404')) {\n          errorMessage = 'API endpoint not found (404)';\n        } else if (err.message.includes('401')) {\n          errorMessage = 'Authentication failed (401) - Check Spotify credentials';\n        } else if (err.message.includes('403')) {\n          errorMessage = 'Access forbidden (403) - API quota exceeded?';\n        } else if (err.message.includes('500')) {\n          errorMessage = 'Server error (500) - Spotify API or Worker issue';\n        } else if (err.message) {\n          errorMessage = `Error: ${err.message}`;\n        }\n        \n        setError(errorMessage);\n        console.error('Album art fetch error details:', {\n          name: err.name,\n          message: err.message,\n          stack: err.stack,\n          artist,\n          album\n        });\n      } finally {\n        setLoading(false);\n      }\n    };\n\n    fetchAlbumArt();\n  }, [artist, album]); // Remove track dependency\n\n  if (loading) {\n    return (\n      <div className=\"album-art-placeholder\" style={{ width: size, height: size }}>\n        <div className=\"album-art-loading-text\">Loading...</div>\n      </div>\n    );\n  }\n\n  if (error || !albumData?.albumArt) {\n    return (\n      <div className=\"album-art-placeholder album-art-missing\" style={{ width: size, height: size }}>\n        <div className=\"album-art-icon\">♪</div>\n        <div className=\"album-art-text\">No album art found</div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"album-art-wrapper\" style={{ width: size, height: size }}>\n      <img\n        src={albumData.albumArt}\n        alt={`${albumData.albumName} album art`}\n        className=\"album-art-image\"\n        style={{ width: size, height: size }}\n        onError={(e: any) => {\n          e.target.style.display = 'none';\n          setError('Image failed to load');\n        }}\n      />\n    </div>\n  );\n};\n\nexport default AlbumArt;","/**\n * Converts lyrics from a clipboard format (where chords are on separate lines)\n * to an inline format with chords in square brackets.\n * @param {string} input - The input lyrics text\n * @returns {string} The converted lyrics with inline chord notation\n */\nfunction convertLyrics(input) {\n  // First, remove any existing [tag] notation from the entire input\n  let cleanedInput = input.replace(/\\[.*?\\]/g, '');\n  \n  const lines = cleanedInput.split('\\n');\n  const convertedLines = [];\n  \n  let i = 0;\n  while (i < lines.length) {\n    let line = lines[i].trim();\n    \n    // Skip section headers, replace with single blank line\n    if (/^\\[.*?(?::.+)?\\]$/.test(line)) {\n      if (convertedLines.length === 0 || convertedLines[convertedLines.length - 1] !== '') {\n        convertedLines.push('');\n      }\n      i++;\n      continue;\n    }\n    \n    // Skip empty lines, maintaining only single blank lines between sections\n    if (!line) {\n      if (convertedLines.length === 0 || convertedLines[convertedLines.length - 1] !== '') {\n        convertedLines.push('');\n      }\n      i++;\n      continue;\n    }\n\n    // Replace N.C. (No Chord) with 4 space characters\n    line = line.replace(/N\\.C\\./g, '    ');\n\n    // Check if this is a chord line\n    // Extract actual chord names and see if line consists only of chords and spaces\n    // Comprehensive pattern for chord recognition including extensions, parentheses, and slashes\n    const actualChordPattern = /[A-G][#b]?(?:maj|min|m|sus|aug|dim|add)?[0-9]*(?:\\([^)]+\\))?(?:sus[0-9]*)?(?:[#b][0-9]+)*(?:\\/[A-G][#b]?)?/g;\n    const chordMatches = line.match(actualChordPattern) || [];\n    const lineWithoutChords = line.replace(actualChordPattern, '').trim();\n    // A chord line should have chords and only whitespace left after removing chords\n    const isChordLine = chordMatches.length > 0 && (lineWithoutChords === '' || /^\\s*$/.test(lineWithoutChords));\n\n    if (isChordLine) {\n      const chordPositions = [];\n      let match;\n      \n      // If the line contains only a single chord (after removing spaces)\n      const trimmedLine = line.replace(/\\s+/g, ' ').trim();\n      const singleChordMatch = trimmedLine.match(/^[A-G][#b]?(?:maj|min|m|sus|aug|dim|add)?[0-9]*(?:\\([^)]+\\))?(?:sus[0-9]*)?(?:[#b][0-9]+)*(?:\\/[A-G][#b]?)?$/);\n      if (singleChordMatch) {\n        // Look ahead to the next non-empty line\n        let j = i + 1;\n        while (j < lines.length && !lines[j].trim()) {\n          j++;\n        }\n        \n        // Check if the next line exists and is a lyric line (not another chord line or section header)\n        if (j < lines.length) {\n          const nextLine = lines[j].trim();\n          const nextLineChordMatches = nextLine.match(actualChordPattern) || [];\n          const nextLineWithoutChords = nextLine.replace(actualChordPattern, '').trim();\n          const nextLineIsChordLine = nextLineChordMatches.length > 0 && (nextLineWithoutChords === '' || /^\\s*$/.test(nextLineWithoutChords));\n          const nextLineIsSectionHeader = /^\\[.*?(?::.+)?\\]$/.test(nextLine);\n          \n          // If next line is lyrics (not chords or section header), combine them\n          if (!nextLineIsChordLine && !nextLineIsSectionHeader) {\n            convertedLines.push(`[${singleChordMatch[0]}]${nextLine}`);\n            i = j + 1;\n            continue;\n          }\n        }\n        \n        // If no lyrics follow, output the chord as a standalone progression\n        convertedLines.push(`[${singleChordMatch[0]}]`);\n        i++;\n        continue;\n      }\n      \n      // Multiple chords on one line - use original line to preserve spacing\n      const chordPattern = /[A-G][#b]?(?:maj|min|m|sus|aug|dim|add)?[0-9]*(?:\\([^)]+\\))?(?:sus[0-9]*)?(?:[#b][0-9]+)*(?:\\/[A-G][#b]?)?/g;\n      while ((match = chordPattern.exec(line)) !== null) {\n        chordPositions.push({\n          chord: match[0],\n          position: match.index\n        });\n      }\n\n      // Look ahead to the next non-empty line\n      let j = i + 1;\n      while (j < lines.length && !lines[j].trim()) {\n        j++;\n      }\n\n      if (j < lines.length) {\n        const nextLine = lines[j].trim();\n        const nextLineChordMatches = nextLine.match(actualChordPattern) || [];\n        const nextLineWithoutChords = nextLine.replace(actualChordPattern, '').trim();\n        const nextLineIsChordLine = nextLineChordMatches.length > 0 && (nextLineWithoutChords === '' || /^\\s*$/.test(nextLineWithoutChords));\n        const nextLineIsSectionHeader = /^\\[.*?(?::.+)?\\]$/.test(nextLine);\n        \n        // If next line is lyrics (not chords or section header), merge chords with lyrics\n        if (!nextLineIsChordLine && !nextLineIsSectionHeader) {\n          const lyricLine = nextLine;\n          const chars = lyricLine.split('');\n          const insertions = [];\n          \n          chordPositions.forEach(({ chord, position }) => {\n            // Find the best position in the lyric line for this chord\n            let insertPos = Math.min(position, lyricLine.length);\n            \n            // If we're past the end of the lyric line, place at the end\n            if (insertPos >= lyricLine.length) {\n              insertPos = lyricLine.length;\n            } else {\n              // Try to place at the beginning of a word, not in the middle\n              while (insertPos < lyricLine.length && \n                     insertPos > 0 && \n                     /\\S/.test(lyricLine[insertPos-1]) && \n                     /\\S/.test(lyricLine[insertPos])) {\n                insertPos++;\n              }\n            }\n            \n            insertions.push({\n              pos: insertPos,\n              text: `[${chord}]`\n            });\n          });\n\n          insertions.sort((a, b) => b.pos - a.pos);\n          \n          // Separate chords that go within the lyrics vs at the end\n          const lyricsLength = lyricLine.length;\n          const endChords = [];\n          const withinChords = [];\n          \n          insertions.forEach(({ pos, text }) => {\n            if (pos >= lyricsLength) {\n              endChords.push({ pos, text });\n            } else {\n              withinChords.push({ pos, text });\n            }\n          });\n          \n          // Insert chords within lyrics first\n          withinChords.forEach(({ pos, text }) => {\n            chars.splice(pos, 0, text);\n          });\n          \n          let result = chars.join('');\n          \n          // For chords at the end, calculate proper spacing based on original positions\n          if (endChords.length > 0) {\n            // Sort end chords by their original position in the chord line\n            const sortedEndChords = endChords.sort((a, b) => {\n              // Find the original chord positions\n              const aOriginalPos = chordPositions.find((cp: any) => cp.chord === a.text.slice(1, -1))?.position || 0;\n              const bOriginalPos = chordPositions.find((cp: any) => cp.chord === b.text.slice(1, -1))?.position || 0;\n              return aOriginalPos - bOriginalPos;\n            });\n            \n            // Add chords with proper spacing\n            for (let k = 0; k < sortedEndChords.length; k++) {\n              const chord = sortedEndChords[k].text;\n              const chordName = chord.slice(1, -1); // Remove brackets\n              \n              result += chord;\n              \n              // Add spacing after each chord except the last one\n              if (k < sortedEndChords.length - 1) {\n                const spacesToAdd = chordName.length + 1;\n                result += ' '.repeat(spacesToAdd);\n              }\n            }\n          }\n          \n          convertedLines.push(result);\n          i = j + 1;\n        } else {\n          // Next line is chords or section header, so this is a standalone chord progression\n          // Add proper spacing: each chord followed by (chord length + 1) spaces\n          let chordProgression = '';\n          chordPositions.forEach(({ chord }, index: number) => {\n            chordProgression += `[${chord}]`;\n            // Add spacing after each chord except the last one\n            if (index < chordPositions.length - 1) {\n              const spacesToAdd = chord.length + 1;\n              chordProgression += ' '.repeat(spacesToAdd);\n            }\n          });\n          convertedLines.push(chordProgression);\n          i++;\n        }\n      } else {\n        // No more lines, output as standalone chord progression\n        // Add proper spacing: each chord followed by (chord length + 1) spaces\n        let chordProgression = '';\n        chordPositions.forEach(({ chord }, index: number) => {\n          chordProgression += `[${chord}]`;\n          // Add spacing after each chord except the last one\n          if (index < chordPositions.length - 1) {\n            const spacesToAdd = chord.length + 1;\n            chordProgression += ' '.repeat(spacesToAdd);\n          }\n        });\n        convertedLines.push(chordProgression);\n        i++;\n      }\n    } else {\n      // Regular lyric line without chords\n      convertedLines.push(line);\n      i++;\n    }\n  }\n\n  // Clean up consecutive blank lines at start and end\n  while (convertedLines[0] === '') convertedLines.shift();\n  while (convertedLines[convertedLines.length - 1] === '') convertedLines.pop();\n\n  return convertedLines.join('\\n');\n}\n\nexport { convertLyrics };\n","export default \"data:image/svg+xml,%3csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20100%20100'%20width='100'%20height='100'%3e%3ccircle%20cx='50'%20cy='50'%20r='50'%20fill='%231DB954'/%3e%3cpath%20d='M75.5%2041.5c-12.5-7.5-33-8-45-4.5-1.5%200.5-3-0.5-3.5-2s0.5-3%202-3.5c13.5-4%2035.5-3%2049.5%205%201.5%200.5%201.5%202.5%201%204s-2.5%201.5-4%201z'%20fill='%23000'/%3e%3cpath%20d='M72.5%2051c-10.5-6.5-28-7-38-4-1.5%200.5-2.5-0.5-3-1.5s0.5-2.5%201.5-3c11.5-3.5%2031-3%2043%204.5%201%200.5%201.5%202%201%203s-2%201.5-3%201c-0.5%200-1-0.5-1.5-0z'%20fill='%23000'/%3e%3cpath%20d='M69.5%2060c-9-5.5-24-6-32-3.5-1%200.5-2-0.5-2.5-1.5s0.5-2%201.5-2.5c9.5-3%2026-2.5%2036%204%201%200.5%201%201.5%200.5%202.5s-1.5%201-2.5%201c-0.5%200-0.5%200-1%200z'%20fill='%23000'/%3e%3c/svg%3e\"","\nimport React, { useState, useEffect, useRef, useMemo } from 'react';\nimport { Button, message, Select, Modal } from 'antd';\nimport { FaSave, FaTimes } from 'react-icons/fa';\nimport SpotifyService from '../services/SpotifyService';\nimport { convertLyrics } from '../../../convert-lyrics';\nimport SpotifyIcon from '../../../img/spotify-icon.svg';\nimport './SongEditor.css';\n\nconst { Option } = Select;\n\nconst SongEditor = ({\n  song,\n  artist,\n  album,\n  onSave,\n  onCancel,\n  isGoogleDriveConnected,\n  isNewSong = false, // New prop to indicate if we're creating a new song\n  library = null, // Library passed for existing artists/albums when creating new songs\n  lyricsRef\n}) => {\n  // Song metadata state (for new songs)\n  const [songTitle, setSongTitle] = useState(() => song?.title || '');\n  const [songArtist, setSongArtist] = useState(() => artist?.name || '');\n  const [songAlbum, setSongAlbum] = useState(() => album?.title || '');\n  \n  // Spotify album suggestions\n  const [spotifyAlbums, setSpotifyAlbums] = useState([]);\n  const [isLoadingAlbums, setIsLoadingAlbums] = useState(false);\n  \n  // Spotify artist suggestions\n  const [spotifyArtists, setSpotifyArtists] = useState([]);\n  const [isLoadingArtists, setIsLoadingArtists] = useState(false);\n  \n  // Spotify track suggestions\n  const [spotifyTracks, setSpotifyTracks] = useState([]);\n  const [isLoadingTracks, setIsLoadingTracks] = useState(false);\n  \n  const [editedLyrics, setEditedLyrics] = useState(() => {\n    // Ensure we always have a string\n    return typeof song?.lyrics === 'string' ? song.lyrics : '';\n  });\n  const [chordPalette, setChordPalette] = useState([]);\n  const [isSaving, setIsSaving] = useState(false);\n  const textareaRef = useRef(null);\n  // Always call hooks at the top level\n  const localLyricsRef = useRef(null);\n  const lyricsSectionRef = lyricsRef !== undefined && lyricsRef !== null ? lyricsRef : localLyricsRef;\n\n  // Lyrics conversion state\n  const [originalLyrics, setOriginalLyrics] = useState('');\n  const [showConversion, setShowConversion] = useState(false);\n\n  // Load Spotify albums when artist changes\n  useEffect(() => {\n    if (songArtist && songArtist.trim() !== '') {\n      const loadSpotifyAlbums = async () => {\n        setIsLoadingAlbums(true);\n        try {\n          const albums = await SpotifyService.getAlbumsForArtist(songArtist);\n          setSpotifyAlbums(albums);\n        } catch (error: unknown) {\n          console.log('Spotify album suggestions unavailable:', error.message);\n          setSpotifyAlbums([]);\n        } finally {\n          setIsLoadingAlbums(false);\n        }\n      };\n      \n      // Add a small delay to avoid too many API calls while typing\n      const timeoutId = setTimeout(loadSpotifyAlbums, 500);\n      return () => clearTimeout(timeoutId);\n    } else {\n      setSpotifyAlbums([]);\n      setIsLoadingAlbums(false);\n    }\n  }, [songArtist]);\n\n  // Load Spotify artist suggestions when typing\n  useEffect(() => {\n    if (songArtist && songArtist.trim() !== '' && songArtist.length > 0) {\n      const searchArtists = async () => {\n        setIsLoadingArtists(true);\n        try {\n          const artists = await SpotifyService.searchArtists(songArtist);\n          setSpotifyArtists(artists);\n        } catch (error: unknown) {\n          console.log('Spotify artist suggestions unavailable:', error.message);\n          setSpotifyArtists([]);\n        } finally {\n          setIsLoadingArtists(false);\n        }\n      };\n      \n      // Add a delay to avoid too many API calls while typing\n      const timeoutId = setTimeout(searchArtists, 300);\n      return () => clearTimeout(timeoutId);\n    } else {\n      setSpotifyArtists([]);\n      setIsLoadingArtists(false);\n    }\n  }, [songArtist]);\n\n  // Load Spotify track suggestions when album is selected\n  useEffect(() => {\n    if (songArtist && songAlbum && songArtist.trim() !== '' && songAlbum.trim() !== '') {\n      const loadTracks = async () => {\n        setIsLoadingTracks(true);\n        try {\n          const tracks = await SpotifyService.getTracksFromAlbum(songArtist, songAlbum);\n          setSpotifyTracks(tracks);\n        } catch (error: unknown) {\n          console.log('Spotify track suggestions unavailable:', error.message);\n          setSpotifyTracks([]);\n        } finally {\n          setIsLoadingTracks(false);\n        }\n      };\n      \n      // Add a delay to avoid too many API calls\n      const timeoutId = setTimeout(loadTracks, 300);\n      return () => clearTimeout(timeoutId);\n    } else {\n      setSpotifyTracks([]);\n      setIsLoadingTracks(false);\n    }\n  }, [songArtist, songAlbum]);\n\n  // Filter albums based on current input (memoized)\n  const filteredAlbums = useMemo(() => {\n    if (!songAlbum || songAlbum.trim() === '') {\n      return spotifyAlbums; // Show all when no filter\n    }\n    \n    const searchTerm = songAlbum.toLowerCase().trim();\n    return spotifyAlbums.filter((album: any) => \n      album.toLowerCase().includes(searchTerm)\n    );\n  }, [spotifyAlbums, songAlbum]);\n\n  // Filter artists based on current input (memoized)\n  const filteredArtists = useMemo(() => {\n    if (!songArtist || songArtist.trim() === '') {\n      return spotifyArtists; // Show all when no filter\n    }\n    \n    const searchTerm = songArtist.toLowerCase().trim();\n    return spotifyArtists.filter((artist: any) => \n      artist.toLowerCase().includes(searchTerm)\n    );\n  }, [spotifyArtists, songArtist]);\n\n  // Get existing artists from library (filtered and memoized)\n  const filteredLibraryArtists = useMemo(() => {\n    if (!library?.artists) return [];\n    let artists = library.artists.map((artist: any) => artist.name).sort();\n    \n    // Filter based on current artist input if there is one\n    if (songArtist && songArtist.trim() !== '') {\n      const searchTerm = songArtist.toLowerCase().trim();\n      artists = artists.filter((artist: any) => \n        artist.toLowerCase().includes(searchTerm)\n      );\n    }\n    \n    return artists;\n  }, [library, songArtist]);\n\n  // Get existing albums for selected artist from library (filtered and memoized)\n  const filteredLibraryAlbums = useMemo(() => {\n    if (!library?.artists || !songArtist) return [];\n    const artist = library.artists.find((a: any) => a.name === songArtist);\n    if (!artist?.albums) return [];\n    \n    let albums = artist.albums.map((album: any) => album.title).sort();\n    \n    // Filter based on current album input if there is one\n    if (songAlbum && songAlbum.trim() !== '') {\n      const searchTerm = songAlbum.toLowerCase().trim();\n      albums = albums.filter((album: any) => \n        album.toLowerCase().includes(searchTerm)\n      );\n    }\n    \n    return albums;\n  }, [library, songArtist, songAlbum]);\n\n  // Get existing song titles from library for the selected artist/album (memoized)\n  const existingSongTitles = useMemo(() => {\n    if (!library?.artists || !songArtist || !songAlbum) return [];\n    \n    const artist = library.artists.find((a: any) => a.name === songArtist);\n    if (!artist?.albums) return [];\n    \n    const album = artist.albums.find((a: any) => a.title === songAlbum);\n    if (!album?.songs) return [];\n    \n    return album.songs.map((song: any) => song.title.toLowerCase().trim());\n  }, [library, songArtist, songAlbum]);\n\n  // Get deduplicated and filtered Spotify tracks (memoized)\n  const filteredSpotifyTracks = useMemo(() => {\n    if (!spotifyTracks || spotifyTracks.length === 0) return [];\n    \n    // Filter out Spotify tracks that already exist in the library\n    let filtered = spotifyTracks.filter((track: any) => \n      !existingSongTitles.includes(track.toLowerCase().trim())\n    );\n    \n    // Also filter based on current song title input if there is one\n    if (songTitle && songTitle.trim() !== '') {\n      const searchTerm = songTitle.toLowerCase().trim();\n      filtered = filtered.filter((track: any) => \n        track.toLowerCase().includes(searchTerm)\n      );\n    }\n    \n    return filtered;\n  }, [spotifyTracks, existingSongTitles, songTitle]);\n\n  // Get existing song titles from library for display (memoized)\n  const filteredLibrarySongs = useMemo(() => {\n    if (!library?.artists || !songArtist || !songAlbum) return [];\n    \n    const artist = library.artists.find((a: any) => a.name === songArtist);\n    if (!artist?.albums) return [];\n    \n    const album = artist.albums.find((a: any) => a.title === songAlbum);\n    if (!album?.songs) return [];\n    \n    let songs = album.songs.map((song: any) => song.title).sort();\n    \n    // Filter based on current song title input if there is one\n    if (songTitle && songTitle.trim() !== '') {\n      const searchTerm = songTitle.toLowerCase().trim();\n      songs = songs.filter((title: any) => \n        title.toLowerCase().includes(searchTerm)\n      );\n    }\n    \n    return songs;\n  }, [library, songArtist, songAlbum, songTitle]);\n\n  // Handle lyrics conversion from external format\n  const handleConvertLyrics = () => {\n    if (originalLyrics.trim()) {\n      const converted = convertLyrics(originalLyrics);\n      // Remove blank lines\n      const cleaned = converted\n        .split('\\n')\n        .filter((line: any) => line.trim() !== '')\n        .join('\\n');\n      setEditedLyrics(cleaned);\n      setOriginalLyrics(''); // Clear the conversion input\n      setShowConversion(false); // Hide the conversion section\n      message.success('Lyrics converted successfully!');\n    }\n  };\n\n  // Extract all chords from the lyrics when component mounts or lyrics change\n  useEffect(() => {\n    const chordPattern = /\\[([^\\]]+)\\]/g;\n    const matches = [];\n    let match;\n\n    // Ensure editedLyrics is a string before using regex\n    const lyricsText = typeof editedLyrics === 'string' ? editedLyrics : '';\n\n    while ((match = chordPattern.exec(lyricsText)) !== null) {\n      const chord = match[1];\n      if (!matches.includes(chord)) {\n        matches.push(chord);\n      }\n    }\n\n    // Sort chords alphabetically\n    setChordPalette(matches.sort());\n\n    // Auto-resize textarea to fit content\n    if (textareaRef.current) {\n      const textarea = textareaRef.current;\n      textarea.style.height = 'auto';\n      textarea.style.height = Math.max(400, textarea.scrollHeight) + 'px';\n    }\n  }, [editedLyrics]);\n\n  // Add keyboard shortcuts for chord insertion\n  useEffect(() => {\n    const handleKeyDown = (event: any) => {\n      // Check if Ctrl is pressed and it's a number key\n      if (event.ctrlKey && !event.shiftKey && !event.altKey) {\n        const keyNum = parseInt(event.key);\n        if (keyNum >= 1 && keyNum <= 9) {\n          const chordIndex = keyNum - 1;\n          if (chordIndex < chordPalette.length) {\n            event.preventDefault();\n            insertChord(chordPalette[chordIndex]);\n          }\n        }\n        // Handle Ctrl+0 for the 10th chord\n        else if (event.key === '0' && chordPalette.length >= 10) {\n          event.preventDefault();\n          insertChord(chordPalette[9]);\n        }\n        // Handle Ctrl+QWERTY for chords 11-20\n        else {\n          const qwertyKeys = ['q','w','e','r','t','y','u','i','o','p'];\n          const idx = qwertyKeys.indexOf(event.key.toLowerCase());\n          if (idx !== -1 && chordPalette.length > 10 + idx) {\n            event.preventDefault();\n            insertChord(chordPalette[10 + idx]);\n          }\n        }\n      }\n    };\n\n    // Add event listener to the document\n    document.addEventListener('keydown', handleKeyDown);\n\n    // Cleanup event listener on unmount\n    return () => {\n      document.removeEventListener('keydown', handleKeyDown);\n    };\n  }, [chordPalette]); // Re-run when chord palette changes\n\n  // Render lyrics with chord highlighting (same logic as SongDetail)\n  const renderPreview = () => {\n    // Ensure editedLyrics is a string\n    const lyricsText = typeof editedLyrics === 'string' ? editedLyrics : '';\n\n    if (!lyricsText) {\n      return <div className=\"preview-empty\">No lyrics to preview</div>;\n    }\n\n    const lines = lyricsText.split('\\n');\n    return (\n      <div className=\"lyrics-preview\">\n        {lines.map((line, index: number) => {\n          if (!line.trim()) {\n            return <div key={index} className=\"preview-line empty-line\">&nbsp;</div>;\n          }\n\n          // Use the same chord rendering logic as SongDetail\n          const chordRegex = /\\[(.*?)\\]/g;\n          const chordPositions = [];\n          let plainText = line;\n          let match;\n\n          // Extract chord positions and create plain text\n          while ((match = chordRegex.exec(line)) !== null) {\n            chordPositions.push({\n              chord: match[1],\n              position: match.index,\n              length: match[0].length\n            });\n          }\n\n          // Remove chord markers for plain text\n          plainText = plainText.replace(/\\[(.*?)\\]/g, '');\n\n          // Calculate positions for chord labels\n          const adjustedChordPositions = chordPositions.map((item, index: number) => {\n            let adjustment = 0;\n            for (let i = 0; i < index; i++) {\n              adjustment += chordPositions[i].length;\n            }\n            return {\n              ...item,\n              position: item.position - adjustment\n            };\n          });\n\n          return (\n            <div key={index} className=\"lyric-line-with-chords\">\n              <div className=\"chord-labels\">\n                {adjustedChordPositions.map((item, idx: number) => (\n                  <span\n                    key={`chord-${idx}`}\n                    className=\"chord-label\"\n                    style={{ left: `${item.position}ch` }}\n                  >\n                    {item.chord}\n                  </span>\n                ))}\n              </div>\n              <div className=\"lyric-text-only\">\n                {plainText}\n              </div>\n            </div>\n          );\n        })}\n      </div>\n    );\n  };\n\n  // Insert chord at cursor position\n  const insertChord = async (chord) => {\n    const textarea = textareaRef.current;\n    if (!textarea) return;\n\n    const start = textarea.selectionStart;\n    const end = textarea.selectionEnd;\n    const beforeCursor = editedLyrics.slice(0, start);\n    const afterCursor = editedLyrics.slice(end);\n\n    const chordText = `[${chord}]`;\n    const newLyrics = beforeCursor + chordText + afterCursor;\n\n    setEditedLyrics(newLyrics);\n\n    // Copy to clipboard\n    try {\n      await navigator.clipboard.writeText(chordText);\n      message.success(`${chordText} copied to clipboard`);\n    } catch (err: unknown) {\n      console.error('Failed to copy to clipboard:', err);\n      message.info(`${chordText} inserted`);\n    }\n\n    // Restore focus and cursor position\n    setTimeout(() => {\n      textarea.focus();\n      const newPosition = start + chordText.length;\n      textarea.setSelectionRange(newPosition, newPosition);\n    }, 0);\n  };\n\n  // Handle save\n  const handleSave = async () => {\n    // Validation\n    if (isNewSong) {\n      if (!songTitle.trim()) {\n        message.error('Please enter a song title');\n        return;\n      }\n      if (!songArtist.trim()) {\n        message.error('Please enter an artist name');\n        return;\n      }\n      if (!songAlbum.trim()) {\n        message.error('Please enter an album title');\n        return;\n      }\n    }\n\n    if (!isGoogleDriveConnected && !isNewSong) {\n      message.error('Please sign in to Google Drive to save changes');\n      return;\n    }\n\n    setIsSaving(true);\n    try {\n      if (isNewSong) {\n        // Creating a new song\n        await onSave({\n          title: songTitle.trim(),\n          artist: songArtist.trim(),\n          album: songAlbum.trim(),\n          lyrics: editedLyrics\n        });\n      } else {\n        // Updating existing song - include metadata changes\n        const updatedSong = {\n          ...song,\n          title: songTitle.trim(),\n          lyrics: editedLyrics,\n          updatedAt: new Date().toISOString()\n        };\n        \n        // Pass the updated metadata as well\n        await onSave(updatedSong, {\n          artist: songArtist.trim(),\n          album: songAlbum.trim()\n        });\n      }\n      \n      message.success(isNewSong ? 'Song created successfully!' : 'Song saved successfully!');\n    } catch (error: unknown) {\n      console.error('Failed to save song:', error);\n      message.error(`Failed to ${isNewSong ? 'create' : 'save'} song. Please try again.`);\n    } finally {\n      setIsSaving(false);\n    }\n  };\n\n  // Handle cancel\n  const handleCancel = () => {\n    const hasChanges = isNewSong \n      ? (songTitle.trim() !== '' || songArtist.trim() !== '' || songAlbum.trim() !== '' || editedLyrics.trim() !== '')\n      : (editedLyrics !== (song?.lyrics || ''));\n      \n    if (hasChanges) {\n      Modal.confirm({\n        title: 'Unsaved changes',\n        content: 'You have unsaved changes. Are you sure you want to cancel?',\n        okText: 'Yes',\n        cancelText: 'No',\n        onOk: () => onCancel()\n      });\n    } else {\n      onCancel();\n    }\n  };\n\n  return (\n    <div className=\"song-editor\">\n      {/* Header */}\n      <div className=\"song-editor-header\">\n        <div className=\"song-info\">\n          <div className=\"song-form\">\n            <div className=\"form-row\">\n              <div className=\"form-group\">\n                <label>Artist</label>\n                <Select\n                  value={songArtist}\n                  data-testid=\"input-artist\"\n                  onChange={setSongArtist}\n                  placeholder=\"Type to search for artists\"\n                  size=\"large\"\n                  showSearch\n                  allowClear\n                  loading={isLoadingArtists}\n                  className=\"full-width-select\"\n                  filterOption={false} // Disable built-in filtering since we handle it with API\n                  onSearch={setSongArtist} // Update the value as user types\n                  notFoundContent={isLoadingArtists ? 'Searching...' : 'No artists found'}\n                >\n                  {/* Existing artists from library */}\n                  {filteredLibraryArtists.map((artistName, index: number) => (\n                    <Option key={`library-artist-${index}-${artistName}`} value={artistName}>\n                      📚 {artistName}\n                    </Option>\n                  ))}\n                  \n                  {/* Spotify artist suggestions */}\n                  {filteredArtists.map((artistName, index: number) => (\n                    <Option key={`spotify-artist-${index}-${artistName}`} value={artistName}>\n                      <img \n                        src={SpotifyIcon} \n                        alt=\"Spotify\" \n                        className=\"spotify-icon\"\n                      />\n                      {artistName}\n                    </Option>\n                  ))}\n                </Select>\n              </div>\n            </div>\n            <div className=\"form-row\">\n              <div className=\"form-group\">\n                <label>Album</label>\n                <Select\n                  value={songAlbum}\n                  data-testid=\"input-album\"\n                  onChange={setSongAlbum}\n                  placeholder=\"Type to search for albums\"\n                  size=\"large\"\n                  showSearch\n                  allowClear\n                  loading={isLoadingAlbums}\n                  className=\"full-width-select\"\n                  filterOption={false} // Disable built-in filtering\n                  onSearch={setSongAlbum} // Allow custom input\n                  notFoundContent={isLoadingAlbums ? 'Loading albums...' : 'No albums found'}\n                >\n                  {/* Existing albums from library */}\n                  {filteredLibraryAlbums.map((albumTitle, index: number) => (\n                    <Option key={`library-album-${index}-${albumTitle}`} value={albumTitle}>\n                      📚 {albumTitle}\n                    </Option>\n                  ))}\n                  \n                  {/* Spotify album suggestions */}\n                  {filteredAlbums.map((albumTitle, index: number) => (\n                    <Option key={`spotify-album-${index}-${albumTitle}`} value={albumTitle}>\n                      <img \n                        src={SpotifyIcon} \n                        alt=\"Spotify\" \n                        className=\"spotify-icon\"\n                      />\n                      {albumTitle}\n                    </Option>\n                  ))}\n                </Select>\n              </div>\n            </div>\n            <div className=\"form-row\">\n              <div className=\"form-group\">\n                <label>Title</label>\n                <Select\n                  value={songTitle}\n                  data-testid=\"input-title\"\n                  onChange={setSongTitle}\n                  placeholder=\"Type to search for songs\"\n                  size=\"large\"\n                  showSearch\n                  allowClear\n                  loading={isLoadingTracks}\n                  className=\"full-width-select\"\n                  filterOption={false} // Disable built-in filtering\n                  onSearch={setSongTitle} // Allow custom input\n                  notFoundContent={isLoadingTracks ? 'Loading tracks...' : 'No tracks found'}\n                >\n                  {/* Existing songs from library */}\n                  {filteredLibrarySongs.map((title, index: number) => (\n                    <Option key={`library-${index}-${title}`} value={title}>\n                      📚 {title}\n                    </Option>\n                  ))}\n                  \n                  {/* Spotify track suggestions from selected album (deduplicated) */}\n                  {filteredSpotifyTracks.map((trackTitle, index: number) => (\n                    <Option key={`spotify-${index}-${trackTitle}`} value={trackTitle}>\n                      <img \n                        src={SpotifyIcon} \n                        alt=\"Spotify\" \n                        className=\"spotify-icon\"\n                      />\n                      {trackTitle}\n                    </Option>\n                  ))}\n                </Select>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n\n      {/* Main Editor */}\n      <div className=\"editor-main\">\n        {/* Left: Editable Lyrics */}\n        <div className=\"editor-pane\" ref={lyricsSectionRef}>\n          <div className=\"editor-header\">\n            <h3>Edit Lyrics <small>(use [chord] format)</small></h3>\n            \n            {/* Ultimate Guitar Conversion - moved to top for better UX */}\n            <div className=\"ug-conversion-compact\">\n              <Button \n                type=\"default\"\n                onClick={() => setShowConversion(!showConversion)}\n                size=\"small\"\n                className=\"ug-toggle-btn\"\n              >\n                {showConversion ? '▼ Hide UG Converter' : '▶ Convert from Ultimate Guitar'}\n              </Button>\n              \n              {showConversion && (\n                <div className=\"conversion-content\">\n                  <textarea\n                    value={originalLyrics}\n                    onChange={(e: any) => setOriginalLyrics(e.target.value)}\n                    placeholder=\"Paste Ultimate Guitar format lyrics here...\"\n                    className=\"conversion-textarea-compact\"\n                    rows={4}\n                    spellCheck={false}\n                  />\n                  <div className=\"conversion-actions\">\n                    <Button \n                      type=\"primary\"\n                      onClick={handleConvertLyrics}\n                      disabled={!originalLyrics.trim()}\n                      size=\"small\"\n                    >\n                      Convert to Inline Format\n                    </Button>\n                    <Button \n                      type=\"text\"\n                      onClick={() => {\n                        setOriginalLyrics('');\n                        setShowConversion(false);\n                      }}\n                      size=\"small\"\n                    >\n                      Cancel\n                    </Button>\n                  </div>\n                </div>\n              )}\n            </div>\n          </div>\n          \n          {/* Chord Palette Ribbon - positioned at top and made sticky */}\n          {chordPalette.length > 0 && (\n            <div className=\"chord-palette-ribbon\">\n              <h4>Chord Palette (click to insert or use Ctrl+1-9, Ctrl+0):</h4>\n              <div className=\"chord-buttons\">\n                {chordPalette.map((chord, index: number) => (\n                  <button\n                    key={index}\n                    className=\"chord-button\"\n                    onClick={() => insertChord(chord)}\n                    title={`Insert [${chord}] at cursor position and copy to clipboard. Shortcut: Ctrl+${index < 9 ? index + 1 : 0}`}\n                  >\n                    <span className=\"chord-text\">{chord}</span>\n                    {index < 10 && (\n                      <span className=\"chord-shortcut\">Ctrl+{index < 9 ? index + 1 : 0}</span>\n                    )}\n                  </button>\n                ))}\n              </div>\n            </div>\n          )}\n\n          <textarea\n            ref={textareaRef}\n            value={editedLyrics}\n            onChange={(e: any) => setEditedLyrics(e.target.value)}\n            placeholder=\"Enter lyrics with chords in [chord] format...\"\n            className={`lyrics-editor${chordPalette.length > 0 ? ' has-chord-palette' : ''}`}\n            spellCheck={false}\n          />\n\n          <div className=\"editor-help\">\n            <p>\n              <strong>Tip:</strong> Use square braces around chords: [C], [C#], [Cm] [Csus4], etc.\n              <br/>Click palette buttons or use <strong>Ctrl+1-9, Ctrl+0</strong> to insert chords at cursor.\n            </p>\n          </div>\n        </div>\n\n        {/* Right: Preview */}\n  <div className={`preview-pane${chordPalette.length > 0 ? ' has-chord-ribbon' : ''}`}>\n          <h3>Preview</h3>\n          {renderPreview()}\n        </div>\n      </div>\n\n      {/* Action buttons moved to bottom */}\n      <div className=\"editor-actions-bottom\">\n        <Button\n          type=\"primary\"\n          icon={<FaSave />}\n          onClick={handleSave}\n          loading={isSaving}\n          disabled={!isGoogleDriveConnected && !isNewSong}\n          size=\"large\"\n          data-testid={isNewSong ? 'create-song-submit' : 'save-changes-submit'}\n        >\n          {isNewSong ? 'Create Song' : 'Save Changes'}\n        </Button>\n        <Button\n          icon={<FaTimes />}\n          onClick={handleCancel}\n          className=\"cancel-btn\"\n          size=\"large\"\n        >\n          Cancel\n        </Button>\n      </div>\n    </div>\n  );\n};\n\nexport default SongEditor;","import * as React from 'react';\nimport TextField from '@mui/material/TextField';\nimport Box from '@mui/material/Box';\nimport './SongTree.css';\n\n// Custom tree implementation replacing MUI TreeView to avoid recursion issues\n// This simple tree provides the same functionality without the complexity and bugs of MUI's TreeView\nfunction SongListTest_MuiTreeView({ library, onSelectSong }) {\n  const [filterText, setFilterText] = React.useState('');\n  const [expandedArtists, setExpandedArtists] = React.useState(new Set());\n  const [expandedAlbums, setExpandedAlbums] = React.useState(new Set());\n  const [selectedSongId, setSelectedSongId] = React.useState(null);\n\n  // Filter library data based on search text\n  const filteredLibrary = React.useMemo(() => {\n    if (!library?.artists) return { artists: [] };\n    \n    const searchTerm = filterText.toLowerCase().trim();\n    if (!searchTerm) return library;\n\n    const filteredArtists = library.artists\n      .map((artist: any) => {\n        const matchesArtist = artist.name?.toLowerCase().includes(searchTerm);\n        const filteredAlbums = (artist.albums || [])\n          .map((album: any) => {\n            const matchesAlbum = album.title?.toLowerCase().includes(searchTerm);\n            const filteredSongs = (album.songs || [])\n              .filter((song: any) => song.title?.toLowerCase().includes(searchTerm));\n            \n            if (matchesAlbum || filteredSongs.length > 0) {\n              return { ...album, songs: matchesAlbum ? album.songs : filteredSongs };\n            }\n            return null;\n          })\n          .filter(Boolean);\n\n        if (matchesArtist || filteredAlbums.length > 0) {\n          return { ...artist, albums: matchesArtist ? artist.albums : filteredAlbums };\n        }\n        return null;\n      })\n      .filter(Boolean);\n\n    return { artists: filteredArtists };\n  }, [library, filterText]);\n\n  // Toggle artist expansion\n  const toggleArtist = React.useCallback((artistName: any) => {\n    setExpandedArtists(prev => {\n      const newSet = new Set(prev);\n      if (newSet.has(artistName)) {\n        newSet.delete(artistName);\n      } else {\n        newSet.add(artistName);\n      }\n      return newSet;\n    });\n  }, []);\n\n  // Toggle album expansion\n  const toggleAlbum = React.useCallback((albumId) => {\n    setExpandedAlbums(prev => {\n      const newSet = new Set(prev);\n      if (newSet.has(albumId)) {\n        newSet.delete(albumId);\n      } else {\n        newSet.add(albumId);\n      }\n      return newSet;\n    });\n  }, []);\n\n  // Handle song selection\n  const handleSongSelect = React.useCallback((song, artistName, albumTitle: any) => {\n    const songId = `${artistName}-${albumTitle}-${song.title}`;\n    setSelectedSongId(songId);\n    if (onSelectSong) {\n      onSelectSong(song, artistName, albumTitle);\n    }\n  }, [onSelectSong]);\n\n  return (\n    <Box sx={{ width: '100%' }}>\n      <TextField\n        fullWidth\n        variant=\"outlined\"\n        size=\"small\"\n        value={filterText}\n        onChange={e => setFilterText(e.target.value)}\n        placeholder=\"Filter by song, artist, or album...\"\n        sx={{ mb: 2 }}\n      />\n      \n      <div className=\"song-tree\">\n        {filteredLibrary.artists.length === 0 ? (\n          <div className=\"song-tree-empty\">\n            {filterText ? 'No songs found matching your search.' : 'No songs available.'}\n          </div>\n        ) : (\n          filteredLibrary.artists.map((artist: any) => {\n            const artistExpanded = expandedArtists.has(artist.name);\n            return (\n              <div key={artist.name} className=\"tree-artist\">\n                <div \n                  className=\"tree-node tree-artist-node\"\n                  onClick={() => toggleArtist(artist.name)}\n                >\n                  <span className=\"tree-toggle\">\n                    {artist.albums?.length > 0 ? (artistExpanded ? '▼' : '▶') : '•'}\n                  </span>\n                  <span className=\"tree-artist-name\">{artist.name}</span>\n                  <span className=\"tree-count\">({artist.albums?.length || 0} albums)</span>\n                </div>\n                \n                {artistExpanded && (\n                  <div className=\"tree-albums\" style={{ marginLeft: '20px' }}>\n                    {(artist.albums || []).map((album: any) => {\n                      const albumId = `${artist.name}-${album.title}`;\n                      const albumExpanded = expandedAlbums.has(albumId);\n                      return (\n                        <div key={albumId} className=\"tree-album\">\n                          <div \n                            className=\"tree-node tree-album-node\"\n                            onClick={() => toggleAlbum(albumId)}\n                          >\n                            <span className=\"tree-toggle\">\n                              {album.songs?.length > 0 ? (albumExpanded ? '▼' : '▶') : '•'}\n                            </span>\n                            <span className=\"tree-album-title\">{album.title}</span>\n                            <span className=\"tree-count\">({album.songs?.length || 0} songs)</span>\n                          </div>\n                          \n                          {albumExpanded && (\n                            <div className=\"tree-songs\">\n                              {(album.songs || []).map((song: any) => {\n                                const songId = `${artist.name}-${album.title}-${song.title}`;\n                                const isSelected = selectedSongId === songId;\n                                return (\n                                  <div \n                                    key={songId}\n                                    className={`tree-node tree-song-node ${isSelected ? 'selected' : ''}`}\n                                    onClick={() => handleSongSelect(song, artist.name, album.title)}\n                                    \n                                  >\n                                    <span className=\"tree-song-text\">♪ {song.title}</span>\n                                  </div>\n                                );\n                              })}\n                            </div>\n                          )}\n                        </div>\n                      );\n                    })}\n                  </div>\n                )}\n              </div>\n            );\n          })\n        )}\n      </div>\n    </Box>\n  );\n}\n\nexport default SongListTest_MuiTreeView;\n","import * as React from 'react';\nimport SongListTest_MuiTreeView from './SongListTest_MuiTreeView';\n\nfunction SongListTest({ library, selectedSong, editingEnabled, onSelectSong }) {\n  try {\n    const libraryInfo = {\n      libraryExists: !!library,\n      hasArtists: !!(library?.artists),\n      artistCount: library?.artists?.length || 0,\n      totalSongs: library?.artists ? library.artists.reduce((total, artist) => {\n        return total + (artist.albums || []).reduce((albumTotal, album) => {\n          return albumTotal + (album.songs || []).length;\n        }, 0);\n      }, 0) : 0,\n      selectedSongExists: !!selectedSong,\n      editingEnabled,\n      libraryStructure: library ? Object.keys(library) : []\n    };\n    \n    console.log('🎵 SongListTest received props:', libraryInfo);\n    \n    if (library?.artists && library.artists.length > 0) {\n      console.log('🎤 SongListTest first few artists:', library.artists.slice(0, 3).map(artist => ({\n        name: artist.name,\n        albumCount: artist.albums?.length || 0,\n        songCount: (artist.albums || []).reduce((total, album) => total + (album.songs || []).length, 0)\n      })));\n    } else {\n      console.log('❌ SongListTest: No artists found in library');\n    }\n  } catch (e) {\n    console.error('❌ SongListTest: Error analyzing props:', e);\n  }\n  return <SongListTest_MuiTreeView library={library} selectedSong={selectedSong} editingEnabled={editingEnabled} onSelectSong={onSelectSong} />;\n}\n\nexport default SongListTest;\n","import { useQuery, useMutation, useQueryClient } from '@tanstack/react-query';\nimport GoogleDriveServiceModern from '../apps/songs/services/GoogleDriveServiceModern';\n\n// Hook to fetch the full library JSON using React Query (v5 object API)\nexport function useLibraryQuery() {\n  return useQuery({\n    queryKey: ['library', 'full'],\n    queryFn: async () => {\n      console.log('🚀 useLibraryQuery: Starting library fetch...');\n      try {\n        const lib = await GoogleDriveServiceModern.loadLibrary();\n        console.log('📚 useLibraryQuery: Library loaded successfully:', {\n          hasArtists: !!(lib?.artists),\n          artistCount: lib?.artists?.length || 0,\n          totalSongs: lib?.artists ? lib.artists.reduce((total, artist) => {\n            return total + (artist.albums || []).reduce((albumTotal, album) => {\n              return albumTotal + (album.songs || []).length;\n            }, 0);\n          }, 0) : 0,\n          libraryStructure: lib ? Object.keys(lib) : []\n        });\n        return lib;\n      } catch (error) {\n        console.error('❌ useLibraryQuery: Failed to load library:', error);\n        throw error;\n      }\n    },\n    staleTime: 1000 * 60,\n    refetchOnWindowFocus: false\n  });\n}\n\n// Hook to save the library and invalidate the cache on success (v5 object API)\nexport function useSaveLibraryMutation() {\n  const qc = useQueryClient();\n  return useMutation({\n    mutationFn: async (libraryData: any) => {\n      const res = await GoogleDriveServiceModern.saveLibrary(libraryData);\n      return res;\n    },\n    onSuccess: () => {\n      qc.invalidateQueries({ queryKey: ['library', 'full'] });\n    }\n  });\n}\n","// Simplified SongTabsApp.js using TreeSelect and modal for adding songs with Redux state management\nimport React, { useEffect, useCallback, useState, useRef } from 'react';\nimport { useDropdown } from '../../components/DropdownProvider';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { pinChord, loadChordFingerings } from '../../store/chordsSlice';\nimport {\n  loadLibraryFromDrive,\n  updateSong,\n  setSelectedSong,\n  setGoogleDriveConnection,\n  setUserInfo,\n  clearError,\n  loadMockLibrary,\n  addSong,\n  addArtist,\n  addAlbum,\n  deleteSong,\n  setLibrary\n} from '../../store/songsSlice';\nimport AppNavigation from '../../components/AppNavigation';\nimport SongDetail from './components/SongDetail';\nimport AlbumArt from './components/AlbumArt';\nimport SongEditor from './components/SongEditor';\nimport SongListTest from './components/SongListTest';\nimport GoogleDriveServiceModern from './services/GoogleDriveServiceModern';\nimport { loadFullLibrary, setFullLibrary } from '../../store/librarySlice';\nimport { useLibraryQuery } from '../../hooks/useLibraryQuery';\nimport './styles/SongTabsApp.css';\nimport { Button, App, Popconfirm, Switch } from 'antd';\n\nconst SongTabsApp = () => {\n  const { message } = App.useApp();\n\n  // Redux state\n  const dispatch = useDispatch();\n  const library = useSelector((state: any) => state.songs.library);\n  const selectedSong = useSelector((state: any) => state.songs.selectedSong);\n  const isGoogleDriveConnected = useSelector((state: any) => state.songs.isGoogleDriveConnected);\n  const userInfo = useSelector((state: any) => state.songs.userInfo);\n  const isLoading = useSelector((state: any) => state.songs.isLoading);\n  const error = useSelector((state: any) => state.songs.error);\n\n  // Connect to library store for auto-population\n  const libraryEntries = useSelector((state: any) => state.library?.entries || []);\n  // Full library JSON blob (new in library slice) - Redux fallback\n  const fullLibraryRedux = useSelector((state: any) => state.library?.fullLibrary || null);\n\n  // React Query: full library (preferred source of truth once migrated)\n  const { data: fullLibraryQuery, isLoading: fullLibraryLoading } = useLibraryQuery();\n\n  // Prefer React Query data if available, otherwise fall back to Redux\n  const fullLibrary = fullLibraryQuery || fullLibraryRedux;\n\n  // Local component state for UI interactions only\n  const [isEditingSong, setIsEditingSong] = useState(false);\n  const [isCreatingNewSong, setIsCreatingNewSong] = useState(false);\n  // Local state to represent whether library-level editing is enabled (toggle)\n  const [isEditingMode, setIsEditingMode] = useState(false);\n\n  // Helper function to count total songs in library\n  const getTotalSongsCount = useCallback(() => {\n    if (!library || !library.artists) return 0;\n    return library.artists.reduce((total, artist: any) => {\n      return total + artist.albums.reduce((albumTotal, album: any) => {\n        return albumTotal + (album.songs ? album.songs.length : 0);\n      }, 0);\n    }, 0);\n  }, [library]);\n\n  // Legacy: we previously auto-populated the songs store from `library.entries`.\n  // That path caused race conditions with the `fullLibrary` (React Query) path and\n  // produced inconsistent UI updates. We intentionally remove the entry-based\n  // auto-populate logic so the `fullLibrary` effect is the single source that\n  // writes `state.songs.library`.\n\n  // Log whenever the Redux songs library updates so we can see what the UI receives\n  useEffect(() => {\n    try {\n      console.log('SongTabsApp observed songs store library change — artists=', (library && library.artists) ? library.artists.length : 0);\n    } catch (e) {}\n  }, [library]);\n\n  // Drive is now the source-of-truth for the full library JSON. When a full library\n  // blob with `artists` is loaded we overwrite the songs store with that data.\n  // To avoid repeated identical overwrites we track the last-applied JSON in a ref.\n  const lastAppliedLibraryJsonRef = useRef<string | null>(null);\n\n  useEffect(() => {\n    try {\n      console.log('🔄 SongTabsApp fullLibrary effect triggered:', {\n        fullLibraryPresent: !!fullLibrary,\n        fullLibraryHasArtists: !!(fullLibrary?.artists),\n        fullLibraryArtistCount: fullLibrary?.artists?.length || 0,\n        reduxLibraryHasArtists: !!(library?.artists),\n        reduxLibraryArtistCount: library?.artists?.length || 0,\n        fullLibraryStructure: fullLibrary ? Object.keys(fullLibrary) : [],\n        reduxLibraryStructure: library ? Object.keys(library) : []\n      });\n\n      if (fullLibrary && fullLibrary.artists && Array.isArray(fullLibrary.artists)) {\n        const newJson = JSON.stringify(fullLibrary.artists);\n        if (lastAppliedLibraryJsonRef.current === newJson) {\n          // Already applied this exact library - nothing to do\n          console.log('📋 Full library already applied to songs store (no-op)');\n          return;\n        }\n\n        const existingCount = library?.artists?.length || 0;\n        const newCount = fullLibrary.artists.length;\n\n        console.log('🔄 Overwriting Redux songs store from Drive library:', {\n          existingArtists: existingCount,\n          newArtists: newCount,\n          firstFewArtists: fullLibrary.artists.slice(0, 3).map(a => ({ \n            name: a.name, \n            albumCount: a.albums?.length || 0,\n            totalSongs: (a.albums || []).reduce((total, album) => total + (album.songs || []).length, 0)\n          }))\n        });\n\n        // Overwrite the Redux songs store so the UI reflects the Drive file immediately.\n        dispatch(setLibrary({ artists: fullLibrary.artists }));\n\n        // Also publish the full library into the library slice so apps that\n        // derive counts from `state.library.entries` (for example HomePage)\n        // will reflect the newly-loaded Drive JSON.\n        try {\n          dispatch(setFullLibrary(fullLibrary));\n          console.log('📚 Successfully set full library into library slice');\n        } catch (e) {\n          console.warn('⚠️ Failed to set full library into library slice:', e);\n        }\n\n        // Remember what we applied so we don't re-apply identical data repeatedly.\n        lastAppliedLibraryJsonRef.current = newJson;\n\n        console.log('✅ Songs store successfully overwritten from fullLibrary (Drive)');\n      } else if (fullLibrary) {\n        console.log('⚠️ fullLibrary present but no artists array found:', {\n          fullLibrary,\n          hasArtists: !!(fullLibrary?.artists),\n          artistsType: typeof fullLibrary?.artists,\n          isArray: Array.isArray(fullLibrary?.artists)\n        });\n      } else {\n        console.log('❌ No fullLibrary data available yet');\n      }\n    } catch (err) {\n      console.error('Error applying fullLibrary to songs store:', err);\n    }\n  }, [fullLibrary, library, dispatch]);\n\n  // Redux-based handlers\n  const handleLoadMockLibrary = useCallback(() => {\n    dispatch(loadMockLibrary());\n  }, [dispatch]);\n\n  const handleLoadLibraryFromDrive = useCallback(async () => {\n    try {\n      await dispatch(loadLibraryFromDrive()).unwrap();\n      console.log('Library loaded from Google Drive');\n    } catch (error: unknown) {\n      console.error('Failed to load library from Google Drive:', error);\n\n      // Detailed error analysis\n      let errorMessage = 'Failed to load library from Google Drive';\n\n      if (typeof error === 'string') {\n        if (error.includes('User not signed in')) {\n          errorMessage = 'Please sign in to Google Drive to access your music library';\n        } else if (error.includes('JSON')) {\n          errorMessage = 'Invalid JSON format in Google Drive library file';\n        } else if (error.includes('401')) {\n          errorMessage = 'Google Drive authentication expired - please sign in again';\n        } else if (error.includes('403')) {\n          errorMessage = 'Access denied to Google Drive - check permissions';\n        } else if (error.includes('404')) {\n          errorMessage = 'Library file not found in Google Drive - will create new one';\n        } else if (error.includes('500')) {\n          errorMessage = 'Google Drive server error - try again later';\n        } else if (error.includes('Network Error') || error.includes('Failed to fetch')) {\n          errorMessage = 'Network error - check your internet connection';\n        } else {\n          errorMessage = `Google Drive error: ${error}`;\n        }\n      } else if (error?.message) {\n        errorMessage = `Error: ${error.message}`;\n      }\n\n      console.error('Detailed error info:', {\n        errorType: typeof error,\n        errorMessage: error?.message || error,\n        errorStack: error?.stack,\n        timestamp: new Date().toISOString()\n      });\n\n      // Check if this is an authentication error\n      if (isAuthError(error) || errorMessage.includes('sign in') || errorMessage.includes('authentication')) {\n        message.error(errorMessage);\n        dispatch(setGoogleDriveConnection(false));\n        dispatch(setUserInfo(null));\n      } else {\n        message.error(errorMessage);\n      }\n\n      // Fall back to mock library\n      dispatch(loadMockLibrary());\n    }\n  }, [dispatch, message]);\n\n  // Simplified song update handler using Redux\n  const handleSongUpdate = async (updatedSongData) => {\n    if (!selectedSong) return;\n\n    try {\n      const artistName = selectedSong.artist.name;\n      const albumTitle = selectedSong.album.title; // Use consistent property name\n      const songTitle = selectedSong.title;\n\n      await dispatch(updateSong({\n        artistName,\n        albumTitle,\n        songTitle,\n        updatedSongData,\n        isGoogleDriveConnected\n      })).unwrap();\n\n      message.success('Song updated successfully');\n    } catch (error: unknown) {\n      console.error('Failed to update song:', error);\n\n      // Check if this is an authentication error\n      if (isAuthError(error)) {\n        // Update UI state to reflect that user is no longer authenticated\n        dispatch(setGoogleDriveConnection(false));\n        dispatch(setUserInfo(null));\n\n        message.error('Your Google Drive session has expired. Please sign in again to save changes.');\n      } else {\n        message.error('Failed to save song changes. Please try again.');\n      }\n    }\n  };\n\n  // Handler for song updates from the editor (exits editing mode on success)\n  const handleSongEditorSave = async (updatedSongData, newMetadata = null) => {\n    if (!selectedSong) return;\n\n    try {\n      // Use original metadata unless new metadata is provided\n      const artistName = newMetadata?.artist || selectedSong.artist.name;\n      const albumTitle = newMetadata?.album || selectedSong.album.title;\n      const songTitle = updatedSongData.title || selectedSong.title;\n\n      await dispatch(updateSong({\n        artistName: selectedSong.artist.name, // Original location for deletion\n        albumTitle: selectedSong.album.title, // Original location for deletion\n        songTitle: selectedSong.title, // Original song title for deletion\n        updatedSongData,\n        newArtistName: artistName, // New location if different\n        newAlbumTitle: albumTitle, // New location if different\n        newSongTitle: songTitle, // New song title if different\n        isGoogleDriveConnected\n      })).unwrap();\n\n      message.success('Song updated successfully');\n      setIsEditingSong(false); // Exit editing mode after successful save\n    } catch (error: unknown) {\n      console.error('Failed to update song:', error);\n\n      // Check if this is an authentication error\n      if (isAuthError(error)) {\n        // Update UI state to reflect that user is no longer authenticated\n        dispatch(setGoogleDriveConnection(false));\n        dispatch(setUserInfo(null));\n\n        message.error('Your Google Drive session has expired. Please sign in again to save changes.');\n      } else {\n        message.error('Failed to save song changes. Please try again.');\n      }\n    }\n  };\n\n  // Initialize Google Drive API\n  useEffect(() => {\n    const initGoogleDrive = async () => {\n      try {\n        // Safe environment accessor: prefer Vite's import.meta.env when available,\n        // otherwise fall back to a test-injected global or process.env.\n        const getEnv = (key: string) => {\n          // Avoid referencing the import.meta token directly in this module (it's ESM-only and\n          // causes a parse error in CommonJS/Jest). Instead, try to read it via the Function\n          // constructor so the parser doesn't see the literal.\n          try {\n            const reader = new Function('k', 'try { return import.meta.env[k]; } catch(e) { return undefined; }');\n            const v = reader(key);\n            if (v) return v;\n          } catch (e) {\n            // ignore failures (e.g., environments that don't support import.meta)\n          }\n\n          // @ts-ignore - test setup may inject variables here\n          if (globalThis.__IMPORT_META_ENV__ && globalThis.__IMPORT_META_ENV__[key]) return globalThis.__IMPORT_META_ENV__[key];\n\n          // Fallback to process.env for Node/Jest\n          // @ts-ignore\n          return (process.env && (process.env as any)[key]) || undefined;\n        };\n\n        const CLIENT_ID = getEnv('VITE_GOOGLE_CLIENT_ID');\n        if (!CLIENT_ID) {\n          throw new Error('Google Client ID not found in environment variables');\n        }\n\n        await GoogleDriveServiceModern.initialize(CLIENT_ID);\n        const signInStatus = GoogleDriveServiceModern.getSignInStatus();\n\n        if (signInStatus.isSignedIn) {\n          dispatch(setGoogleDriveConnection(true));\n          dispatch(setUserInfo({\n            email: signInStatus.userEmail,\n            name: signInStatus.userName,\n            picture: signInStatus.userPicture\n          }));\n          console.log('Restored user session for:', signInStatus.userEmail);\n          // Library load is handled at the top-level App startup (and via React Query).\n          // Avoid dispatching `loadFullLibrary()` here to prevent duplicate loads\n          // and race conditions that overwrite the songs store unexpectedly.\n        } else {\n          console.debug('No valid session found, checking if library already loaded...');\n          // Only load mock library if we don't already have real data\n          if (!fullLibrary || !fullLibrary.artists || fullLibrary.artists.length === 0) {\n            console.debug('No existing library data, using mock library');\n            handleLoadMockLibrary();\n          } else {\n            console.debug('Real library data already available, skipping mock library');\n          }\n        }\n      } catch (error: unknown) {\n        console.error('Failed to initialize Google Drive:', error);\n        // Only load mock library if we don't already have real data\n        if (!fullLibrary || !fullLibrary.artists || fullLibrary.artists.length === 0) {\n          console.debug('No existing library data, using mock library as fallback');\n          handleLoadMockLibrary();\n        } else {\n          console.debug('Real library data already available, skipping mock library fallback');\n        }\n      }\n    };\n\n    initGoogleDrive();\n  }, [dispatch, handleLoadLibraryFromDrive, handleLoadMockLibrary]);\n\n  // Google Drive handlers\n  const handleGoogleSignInSuccess = async (tokenResponse) => {\n    try {\n      await GoogleDriveServiceModern.handleOAuthToken(tokenResponse);\n      const signInStatus = GoogleDriveServiceModern.getSignInStatus();\n\n      dispatch(setGoogleDriveConnection(true));\n      dispatch(setUserInfo({\n        email: signInStatus.userEmail,\n        name: signInStatus.userName,\n        picture: signInStatus.userPicture\n      }));\n\n      await handleLoadLibraryFromDrive();\n    } catch (error: unknown) {\n      console.error('Google Sign-In failed:', error);\n      message.error('Failed to connect to Google Drive. Please try again.');\n    }\n  };\n\n  const handleGoogleSignInError = (error) => {\n    console.error('Google Sign-In error:', error);\n    message.error('Failed to sign in with Google. Please try again.');\n  };\n\n  const handleGoogleSignOut = async () => {\n    try {\n      await GoogleDriveServiceModern.signOut();\n      dispatch(setGoogleDriveConnection(false));\n      dispatch(setUserInfo(null));\n      handleLoadMockLibrary();\n    } catch (error: unknown) {\n      console.error('Failed to sign out:', error);\n    }\n  };\n\n  // Handle Google Drive settings changes\n  const handleSettingsChange = async (settings) => {\n    try {\n      GoogleDriveServiceModern.updateSettings(settings);\n      message.success('Google Drive settings updated successfully');\n      \n      // Optionally reload the library with new settings\n      if (isGoogleDriveConnected) {\n        await handleLoadLibraryFromDrive();\n      }\n    } catch (error: unknown) {\n      console.error('Failed to update settings:', error);\n      message.error('Failed to update Google Drive settings');\n    }\n  };\n\n  // Register header dropdown items for Songs app\n  const { setMenuItems } = useDropdown();\n  useEffect(() => {\n    const items = [\n      // Library Settings handled by top-level GoogleAuthButton\n      // Songs auto-populate from library, no manual open/save needed\n    ];\n\n    setMenuItems(items);\n    return () => setMenuItems([]);\n  }, [setMenuItems, dispatch]);\n\n  // Ref for lyrics section in SongEditor\n  const lyricsSectionRef = React.useRef(null);\n\n  // Handle song selection from SongList\n  const handleSongSelect = React.useCallback((songData, artistName, albumTitle: any) => {\n    if (songData && artistName && albumTitle) {\n      // Create normalized song object for Redux\n      const normalizedSong = {\n        ...songData,\n        title: songData.title,\n        artist: { name: artistName },\n        album: { title: albumTitle }\n      };\n      dispatch(setSelectedSong(normalizedSong));\n\n      // Scroll to lyrics section after selecting song\n      setTimeout(() => {\n        if (lyricsSectionRef.current) {\n          lyricsSectionRef.current.scrollIntoView({ behavior: 'smooth' });\n        } else {\n          window.scrollTo({ top: 0, behavior: 'smooth' });\n        }\n      }, 100);\n\n      // Load chord fingerings if they exist in the song data\n      if (songData.chordFingerings) {\n        dispatch(loadChordFingerings(songData.chordFingerings));\n      } else {\n        // Clear chord fingerings if song doesn't have any saved\n        dispatch(loadChordFingerings({}));\n      }\n    }\n  }, [dispatch]);\n\n  // Helper function to check if error is authentication-related\n  const isAuthError = (error) => {\n    if (!error) return false;\n    const message = error.message || error || '';\n    const authErrorPatterns = [\n      'User not signed in to Google Drive',\n      'Expected OAuth 2 access token',\n      'login cookie or other valid authentication credential',\n      'Invalid Credentials',\n      'Authentication failed',\n      'unauthorized_client',\n      'invalid_token',\n      'expired_token',\n      'access_denied',\n      'token_expired',\n      'Request had invalid authentication credentials'\n    ];\n    return authErrorPatterns.some((pattern: any) =>\n      message.toLowerCase().includes(pattern.toLowerCase())\n    );\n  };\n\n  // Handle chord pinning\n  const handlePinChord = (chord) => {\n    dispatch(pinChord(chord));\n  };\n\n  // Open new song editor\n  const openNewSongEditor = () => {\n    setIsCreatingNewSong(true);\n  };\n\n  // Handle new song creation using SongEditor\n  const handleCreateNewSong = async (newSongData) => {\n    try {\n      const { title, artist, album, lyrics } = newSongData;\n\n      // First ensure the artist exists\n      const existingArtist = library.artists?.find((a: any) => a.name === artist);\n\n      if (!existingArtist) {\n        await dispatch(addArtist({\n          artistName: artist,\n          isGoogleDriveConnected\n        })).unwrap();\n      }\n\n      // Then ensure the album exists\n      const artistAfterAdd = library.artists?.find((a: any) => a.name === artist) || existingArtist;\n      const existingAlbum = artistAfterAdd?.albums?.find((a: any) => a.title === album);\n\n      if (!existingAlbum) {\n        await dispatch(addAlbum({\n          artistName: artist,\n          albumTitle: album,\n          isGoogleDriveConnected\n        })).unwrap();\n      }\n\n      // Finally, add the song\n      await dispatch(addSong({\n        artistName: artist,\n        albumTitle: album,\n        songData: {\n          title: title,\n          lyrics: lyrics || '',\n          notes: '',\n          chords: ''\n        },\n        isGoogleDriveConnected\n      })).unwrap();\n\n      // Reload library to get updated data\n      const finalLibrary = await dispatch(loadLibraryFromDrive()).unwrap();\n\n      // Auto-select the new song\n      const newArtist = finalLibrary.artists?.find((a: any) => a.name === artist);\n      const newAlbum = newArtist?.albums?.find((a: any) => a.title === album);\n      const newSong = newAlbum?.songs?.find((s: any) => s.title === title);\n\n      if (newSong) {\n        handleSongSelect(newSong, artist, album);\n      }\n\n      // Close the new song editor\n      setIsCreatingNewSong(false);\n\n      message.success('Song created successfully!');\n    } catch (error: unknown) {\n      console.error('Failed to create song:', error);\n      message.error('Failed to create song. Please try again.');\n    }\n  };\n\n  // Handle song deletion\n  const handleDeleteSong = async () => {\n    try {\n      await dispatch(deleteSong({\n        artistName: selectedSong.artist?.name,\n        albumTitle: selectedSong.album?.title,\n        songTitle: selectedSong.title,\n        isGoogleDriveConnected\n      })).unwrap();\n\n      // Clear selected song since it was deleted\n      dispatch(setSelectedSong(null));\n      \n      message.success('Song deleted successfully!');\n    } catch (error: unknown) {\n      console.error('Failed to delete song:', error);\n      message.error('Failed to delete song. Please try again.');\n    }\n  };\n\n  return (\n    <div className=\"song-tabs-app\">\n      {/* Main Content - Vertical Stack Layout */}\n      <div className={`songs-content-vertical ${isEditingSong || isCreatingNewSong ? 'mode-full' : ''}`}>\n        {/* Selected Song Content - Show First When Song is Selected */}\n        {selectedSong && (\n          <div className=\"selected-song-section\">\n            {isEditingSong ? (\n              <SongEditor\n                song={selectedSong}\n                artist={selectedSong.artist}\n                album={selectedSong.album}\n                onSave={handleSongEditorSave}\n                onCancel={() => setIsEditingSong(false)}\n                isGoogleDriveConnected={isGoogleDriveConnected}\n                lyricsRef={lyricsSectionRef}\n              />\n            ) : (\n              <div className=\"song-view-body\">\n                {/* Song View Header with Google Drive, Edit, and Add Buttons */}\n                <div className=\"song-view-header\">\n                  <AlbumArt artist={selectedSong.artist?.name} album={selectedSong.album?.title} />\n\n                  <div className=\"song-view-header-main\">\n                    <div className=\"song-title-row\">\n                      <h2 className=\"song-title\">{selectedSong.title}</h2>\n                      {isGoogleDriveConnected && (\n                        <>\n                          <Button\n                            type=\"text\"\n                            size=\"small\"\n                            onClick={() => setIsEditingSong(true)}\n                            className=\"song-action-button edit\"\n                            title=\"Edit Song\"\n                          >\n                            ✏️\n                          </Button>\n                          <Popconfirm\n                            title=\"Delete Song\"\n                            description={`Are you sure you want to delete \"${selectedSong.title}\"? This action cannot be undone.`}\n                            onConfirm={handleDeleteSong}\n                            okText=\"Yes, Delete\"\n                            cancelText=\"Cancel\"\n                            okType=\"danger\"\n                          >\n                            <Button\n                              type=\"text\"\n                              size=\"small\"\n                              className=\"song-action-button delete\"\n                              title=\"Delete Song\"\n                            >\n                              🗑️\n                            </Button>\n                          </Popconfirm>\n                        </>\n                      )}\n                    </div>\n                    <p className=\"song-subtitle\">\n                      {selectedSong.artist?.name} - {selectedSong.album?.title}\n                    </p>\n                  </div>\n\n                  <div className=\"song-action-column\">\n                    {/* Go to Library Button */}\n                    <Button\n                      onClick={() => {\n                        const librarySection = document.querySelector('.song-library-section');\n                        if (librarySection) {\n                          librarySection.scrollIntoView({ behavior: 'smooth' });\n                        }\n                      }}\n                      className=\"scroll-library-button\"\n                    >\n                      📚 Scroll to Song Library\n                    </Button>\n                  </div>\n                </div>\n\n                <div className=\"song-detail-wrapper\">\n                  <SongDetail\n                    song={selectedSong}\n                    artist={selectedSong.artist}\n                    album={selectedSong.album}\n                    editingEnabled={false}\n                    onUpdateSong={handleSongUpdate}\n                    onPinChord={handlePinChord}\n                  />\n                </div>\n              </div>\n            )}\n          </div>\n        )}\n\n        {/* New Song Creation Section */}\n        {isCreatingNewSong && (\n          <div className=\"new-song-section\">\n            <SongEditor\n              song={{ lyrics: '' }}\n              artist={{ name: '' }}\n              album={{ title: '' }}\n              onSave={handleCreateNewSong}\n              onCancel={() => setIsCreatingNewSong(false)}\n              isGoogleDriveConnected={isGoogleDriveConnected}\n              isNewSong={true}\n              library={library}\n            />\n          </div>\n        )}\n\n        {/* Song Library - Show Only When Not Editing and Not Creating */}\n        {!isEditingSong && !isCreatingNewSong && (\n          <div className={`song-library-section ${selectedSong ? 'has-selected-song' : 'no-selected-song'}`}>\n            {/* Library Header with Count and Google Drive Button */}\n            <AppNavigation\n              appName=\"Songs\"\n              // Allow the navigation to reflect editing mode for tests: when editing mode\n              // is enabled we surface edit-related controls (like the Add Song button).\n              // We intentionally augment the prop so AppNavigation will render primaryAction\n              // when either the app is connected or editing mode is toggled on.\n              isGoogleDriveConnected={isGoogleDriveConnected || isEditingMode}\n              userInfo={userInfo}\n              onSignIn={handleGoogleSignInSuccess}\n              onSignOut={handleGoogleSignOut}\n              onSettingsChange={handleSettingsChange}\n              // Show primary action only when editing mode is enabled (or connected)\n              primaryAction={(isEditingMode || isGoogleDriveConnected) ? {\n                label: 'Add Song',\n                onClick: openNewSongEditor,\n                style: {\n                  backgroundColor: '#4CAF50',\n                  borderColor: '#4CAF50'\n                }\n              } : null}\n              // Provide a small leftContent area with an Editing switch so tests can toggle\n              // editing mode even when not connected to Google Drive.\n              leftContent={(\n                <div className=\"editing-toggle\">\n                  <span>Editing</span>\n                  <Switch\n                    checked={isEditingMode}\n                    onChange={(checked) => setIsEditingMode(checked)}\n                    aria-label=\"editing-toggle\"\n                  />\n                </div>\n              )}\n              libraryInfo={{\n                title: 'Songs',\n                emoji: '🎵',\n                count: getTotalSongsCount(),\n                isLoading: isLoading\n              }}\n              googleSignInProps={{\n                onError: handleGoogleSignInError,\n                disabled: isLoading\n              }}\n              // styling handled via `.songs-navigation` CSS\n              className=\"songs-navigation\"\n            />\n\n            <SongListTest\n              library={library}\n              onSelectSong={handleSongSelect}\n              selectedSong={selectedSong}\n              editingEnabled={isGoogleDriveConnected}\n            />\n          </div>\n        )}\n\n        {/* Empty State - Only Show When No Song Selected and Not Creating New Song */}\n        {!selectedSong && !isCreatingNewSong && (\n          <div className=\"empty-state\">\n            <p>Select a song from your library above to see its chord chart and lyrics.</p>\n          </div>\n        )}\n      </div>\n\n      {/* Display Redux errors */}\n      {error && (\n        <div className=\"error-message\">\n          Error: {error}\n          <Button\n            size=\"small\"\n            onClick={() => dispatch(clearError())}\n            className=\"dismiss-error-button\"\n          >\n            Dismiss\n          </Button>\n        </div>\n      )}\n\n      {/* Library Settings handled by top-level GoogleAuthButton */}\n      {/* Songs auto-populate from library */}\n    </div>\n  );\n};\n\n// Wrap component with App provider for message API\nconst SongTabsAppWithProvider = () => (\n  <App>\n    <SongTabsApp />\n  </App>\n);\n\nexport default SongTabsAppWithProvider;\n"],"names":["QueryObserver","Subscribable","client","options","#client","#selectError","#currentThenable","pendingThenable","#currentQuery","#currentQueryInitialState","#currentResult","#currentResultState","#currentResultOptions","#selectFn","#selectResult","#lastQueryWithDefinedData","#staleTimeoutId","#refetchIntervalId","#currentRefetchInterval","#trackedProps","shouldFetchOnMount","#executeFetch","#updateTimers","shouldFetchOn","#clearStaleTimeout","#clearRefetchInterval","prevOptions","prevQuery","resolveEnabled","#updateQuery","shallowEqualObjects","mounted","shouldFetchOptionally","resolveStaleTime","#updateStaleTimeout","nextRefetchInterval","#computeRefetchInterval","#updateRefetchInterval","query","result","shouldAssignObserverCurrentProperties","onPropTracked","target","key","defaultedOptions","fetchOptions","promise","noop","staleTime","isServer","isValidTimeout","timeout","timeUntilStale","timeoutManager","nextInterval","focusManager","prevResult","prevResultState","prevResultOptions","queryInitialState","state","newState","isPlaceholderData","data","fetchOnMount","fetchOptionally","fetchState","error","errorUpdatedAt","status","skipSelect","placeholderData","replaceData","selectError","isFetching","isPending","isError","isLoading","hasData","nextResult","isStale","finalizeThenableIfPossible","thenable","recreateThenable","pending","prevThenable","shouldNotifyListeners","notifyOnChangeProps","notifyOnChangePropsValue","includedProps","typedKey","#notify","notifyOptions","notifyManager","listener","shouldLoadOnMount","field","value","observer","optimisticResult","IsRestoringContext","React.createContext","useIsRestoring","React.useContext","createValue","isReset","QueryErrorResetBoundaryContext","useQueryErrorResetBoundary","ensurePreventErrorBoundaryRetry","errorResetBoundary","useClearResetErrorBoundary","React.useEffect","getHasError","throwOnError","suspense","shouldThrowError","ensureSuspenseTimers","clamp","originalStaleTime","args","willFetch","isRestoring","shouldSuspend","fetchOptimistic","useBaseQuery","Observer","queryClient","useQueryClient","isNewCacheEntry","React.useState","shouldSubscribe","React.useSyncExternalStore","React.useCallback","onStoreChange","unsubscribe","useQuery","LyricLineEditor","line","onSave","onCancel","editedLine","setEditedLine","useState","inputRef","useRef","useEffect","handleSave","handleKeyDown","e","jsxs","jsx","SortableLyricLine","index","id","editingLineIndex","editingEnabled","hoveredLineIndex","setHoveredLineIndex","handleEditLine","handleInsertAfter","handleDeleteLine","handleSaveLine","handleCancelEdit","renderLyricLine","isThisLinePending","isDragDisabled","isPendingDelete","isAddingLine","isPendingSave","attributes","listeners","setNodeRef","transform","transition","isDragging","useSortable","style","CSS","newLine","Spin","FaPencilAlt","FaPlus","FaTrash","FaGripVertical","SongDetail","song","onPinChord","onUpdateSong","artist","message","App","setEditingLineIndex","setIsAddingLine","localTranspose","setLocalTranspose","isEditingWholeSong","setIsEditingWholeSong","wholeSongText","setWholeSongText","pendingSaves","setPendingSaves","optimisticLyrics","setOptimisticLyrics","pendingLineIndex","setPendingLineIndex","pendingDeleteLines","setPendingDeleteLines","isPendingAnyOperation","setIsPendingAnyOperation","isSavingTranspose","setIsSavingTranspose","isSavingWholeSong","setIsSavingWholeSong","dispatch","useDispatch","instrument","useSelector","transpose","chordFingerings","isGoogleDriveConnected","sensors","useSensors","useSensor","PointerSensor","KeyboardSensor","sortableKeyboardCoordinates","extractChords","lyrics","chordRegex","allChords","match","CHROMATIC","FLAT_EQUIV","transposeChord","chord","semitones","rootPart","bassPart","transposedRoot","transposedBass","root","suffix","idx","newIdx","lyricsArray","converted","verse","verseIndex","lineObj","chords","afterIndex","updatedLyrics","targetIndex","prev","newSet","handleDragEnd","event","active","over","oldIndex","_","newIndex","newLyrics","arrayMove","handleEditWholeSong","handleSaveWholeSong","isAuthError","pattern","handleDeleteConfirm","handleDeleteSong","deleteSong","clearSelectedSong","setGoogleDriveConnection","setUserInfo","handleCancelWholeSong","chordPositions","plainText","adjustedChordPositions","item","adjustment","i","transposedChord","React","handleTransposeUp","transposeSongUp","handleTransposeDown","transposeSongDown","handleSaveTranspose","transposedLyrics","updatedSong","setInstrument","ChordChart","Fragment","FaEdit","Modal","FaClipboard","DndContext","closestCenter","SortableContext","verticalListSortingStrategy","SpotifyService","album","response","albumItem","trackItem","track","artistName","cacheKey","cached","albums","searchTerm","artists","trackData","albumName","tracks","SpotifyService$1","CACHE_KEY_PREFIX","CACHE_EXPIRY_HOURS","getCacheKey","getCachedData","timestamp","now","expiryTime","setCachedData","cacheObject","AlbumArt","size","albumData","setAlbumData","loading","setLoading","setError","cachedData","err","errorMessage","convertLyrics","input","lines","convertedLines","actualChordPattern","chordMatches","lineWithoutChords","singleChordMatch","j","nextLine","nextLineChordMatches","nextLineWithoutChords","nextLineIsChordLine","nextLineIsSectionHeader","chordPattern","lyricLine","chars","insertions","position","insertPos","a","b","lyricsLength","endChords","withinChords","pos","text","sortedEndChords","aOriginalPos","cp","bOriginalPos","k","chordName","spacesToAdd","chordProgression","SpotifyIcon","Option","Select","SongEditor","isNewSong","library","lyricsRef","songTitle","setSongTitle","songArtist","setSongArtist","songAlbum","setSongAlbum","spotifyAlbums","setSpotifyAlbums","isLoadingAlbums","setIsLoadingAlbums","spotifyArtists","setSpotifyArtists","isLoadingArtists","setIsLoadingArtists","spotifyTracks","setSpotifyTracks","isLoadingTracks","setIsLoadingTracks","editedLyrics","setEditedLyrics","chordPalette","setChordPalette","isSaving","setIsSaving","textareaRef","localLyricsRef","lyricsSectionRef","originalLyrics","setOriginalLyrics","showConversion","setShowConversion","timeoutId","filteredAlbums","useMemo","filteredArtists","filteredLibraryArtists","filteredLibraryAlbums","existingSongTitles","filteredSpotifyTracks","filtered","filteredLibrarySongs","songs","title","handleConvertLyrics","cleaned","matches","lyricsText","textarea","keyNum","chordIndex","insertChord","renderPreview","start","end","beforeCursor","afterCursor","chordText","newPosition","handleCancel","albumTitle","trackTitle","Button","FaSave","FaTimes","SongListTest_MuiTreeView","onSelectSong","filterText","setFilterText","expandedArtists","setExpandedArtists","expandedAlbums","setExpandedAlbums","selectedSongId","setSelectedSongId","filteredLibrary","React.useMemo","matchesArtist","matchesAlbum","filteredSongs","toggleArtist","toggleAlbum","albumId","handleSongSelect","songId","Box","TextField","artistExpanded","albumExpanded","isSelected","SongListTest","selectedSong","libraryInfo","total","albumTotal","useLibraryQuery","lib","GoogleDriveServiceModern","SongTabsApp","userInfo","fullLibraryRedux","fullLibraryQuery","fullLibraryLoading","fullLibrary","isEditingSong","setIsEditingSong","isCreatingNewSong","setIsCreatingNewSong","isEditingMode","setIsEditingMode","getTotalSongsCount","useCallback","lastAppliedLibraryJsonRef","newJson","existingCount","newCount","setLibrary","setFullLibrary","handleLoadMockLibrary","loadMockLibrary","handleLoadLibraryFromDrive","loadLibraryFromDrive","handleSongUpdate","updatedSongData","updateSong","handleSongEditorSave","newMetadata","CLIENT_ID","v","define_process_env_default","signInStatus","handleGoogleSignInSuccess","tokenResponse","handleGoogleSignInError","handleGoogleSignOut","handleSettingsChange","settings","setMenuItems","useDropdown","songData","normalizedSong","setSelectedSong","loadChordFingerings","handlePinChord","pinChord","openNewSongEditor","handleCreateNewSong","newSongData","existingArtist","addArtist","addAlbum","addSong","newSong","s","Popconfirm","librarySection","AppNavigation","Switch","checked","clearError","SongTabsAppWithProvider"],"mappings":"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","x_google_ignoreList":[0,1,2,3,4,5,6]}