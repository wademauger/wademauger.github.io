{"version":3,"file":"static/js/769.77eeaf05.chunk.js","mappings":"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","sources":["models/StitchPlan.js","models/Gauge.js","models/Trapezoid.js","apps/knitting/components/PatternList.js","apps/knitting/components/PatternEditor.js","apps/knitting/components/PatternViewer.js","apps/knitting/components/ColorworkEditor.js","apps/knitting/KnittingApp.js"],"sourcesContent":["class StitchPlan {\n    constructor() {\n        this.rows = [];\n    }\n\n    addRow(row) {\n        this.rows.push(row);\n    }\n\n    generateKnittingInstructions() {\n        // case: no rows\n        if (this.rows.length === 0) {\n            return [];\n        }\n        const instructions = [];\n        // case: rectangular panel, no shaping\n        const lowerLeft = this.rows[0].leftStitchesInWork;\n        const lowerRight = this.rows[0].rightStitchesInWork;\n        const upperLeft = this.rows[this.rows.length - 1].leftStitchesInWork;\n        const upperRight = this.rows[this.rows.length - 1].rightStitchesInWork;\n        if (lowerLeft === upperLeft && lowerRight === upperRight) {\n            instructions.push(`Knit ${this.rows.length} rows (RC=${this.rows[this.rows.length - 1].rowNumber}, ${this.rows[this.rows.length - 1].leftStitchesInWork + this.rows[this.rows.length - 1].rightStitchesInWork} sts in work).`);\n        }\n        // case: trapezoidal panel\n        else {\n            const firstRow = this.rows[0];\n            let consecutiveRows = 1;\n            let prevRow = firstRow;\n            for (const row of this.rows) {\n                const leftDiff = row.leftStitchesInWork - prevRow.leftStitchesInWork;\n                const rightDiff = row.rightStitchesInWork - prevRow.rightStitchesInWork;\n                if (leftDiff === 0 && rightDiff === 0) {\n                    consecutiveRows++;\n                    continue;\n                } else {\n                    let instruction = '';\n                    if (leftDiff > 0) {\n                        instruction += `Increase ${leftDiff} stitch${leftDiff > 1 ? `es` : ''} on the left. `;\n                    } else if (leftDiff < 0) {\n                        instruction += `Decrease ${-leftDiff} stitch${leftDiff < -1 ? `es` : ''} on the left. `;\n                    }\n                    if (rightDiff > 0) {\n                        instruction += `Increase ${rightDiff} stitch${rightDiff > 1 ? `es` : ''} on the right. `;\n                    } else if (rightDiff < 0) {\n                        instruction += `Decrease ${-rightDiff} stitch${rightDiff < -1 ? `es` : ''} on the right. `;\n                    }\n                    prevRow = row;\n                    instruction = consecutiveRows > 1 ? `${instruction}Knit ${consecutiveRows} rows. ` : `${instruction}Knit 1 row. `;\n                    instruction += `(RC=${row.rowNumber}, ${row.leftStitchesInWork+row.rightStitchesInWork} sts in work)`;\n                    consecutiveRows = 1;\n                    instructions.push(instruction);\n                }\n            }\n        }\n        return instructions;\n    }\n}\n\nStitchPlan.Row = class {\n    constructor(rowNumber, leftStitchesInWork, rightStitchesInWork) {\n        this.rowNumber = rowNumber;\n        this.leftStitchesInWork = leftStitchesInWork;\n        this.rightStitchesInWork = rightStitchesInWork;\n    }\n};\n\nexport { StitchPlan };","class Gauge {\n    /**\n     * Represents the knitting gauge, which defines stitch and row density.\n     * @param {number} stitchesPerFourInches - The number of stitches in four inches.\n     * @param {number} rowsPerFourInches - The number of rows in four inches.\n     */\n    constructor(stitchesPerFourInches, rowsPerFourInches) {\n        this.stitchesPerFourInches = stitchesPerFourInches;\n        this.rowsPerFourInches = rowsPerFourInches;\n    }\n\n    getStitchesPerInch() {\n        return this.stitchesPerFourInches / 4;\n    }\n\n    getRowsPerInch() {\n        return this.rowsPerFourInches / 4;\n    }\n}\n\nconst defaultGauge = new Gauge(19, 30);\n\nexport { Gauge, defaultGauge };","import { StitchPlan } from \"./StitchPlan\";\nimport { defaultGauge } from \"./Gauge\";\n\nclass Trapezoid {\n    /**\n     * Represents a trapezoidal section of the knitting panel.\n     * Responsible for increases and decreases in instructions.\n     */\n    constructor(height, baseA, baseB, baseBHorizontalOffset = 0, successors = [], finishingSteps = [], sizeModifier = 1) {\n        this.height = height;\n        this.baseA = baseA;\n        this.baseB = baseB;\n        this.baseBHorizontalOffset = baseBHorizontalOffset;\n        this.successors = successors;\n        this.modificationScale = sizeModifier;\n        this.finishingSteps = finishingSteps; // Array of extra instructions for finishing\n    }\n\n    setSizeModifier(sizeModifier) {\n        this.modificationScale = sizeModifier;\n    }\n\n    getHeight() {\n        return this.height * this.modificationScale;\n    }\n\n    getLowerBase() {\n        return this.baseA * this.modificationScale;\n    }\n\n    getUpperBase() {\n        return this.baseB * this.modificationScale;\n    }\n\n    getOffset() {\n        return this.baseBHorizontalOffset * this.modificationScale;\n    }\n\n    static fromObject(json) {\n        if (!json || json == [] || json == {}) {\n            return null; // Handle empty JSON\n        }\n\n        const successors = (json.successors && Array.isArray(json.successors))\n            ? json.successors.filter(s => s != null).map(s => Trapezoid.fromObject(s))\n            : [];\n\n        return new Trapezoid(\n            json.height,\n            json.baseA,\n            json.baseB,\n            json.baseBHorizontalOffset || 0,\n            successors,\n            json.finishingSteps || [] // Ensure finishingSteps is an array\n        );\n    }\n\n    getUpperBaseWidthInStitches(gauge = defaultGauge) {\n        return Math.round(this.getUpperBase() * (gauge.getStitchesPerInch()));\n    }\n\n    getStitchPlan(gauge, sizeModifier, startRow = 1) {\n        const stitchesPerInch = gauge.getStitchesPerInch() * sizeModifier;\n        const rowsPerInch = gauge.getRowsPerInch() * sizeModifier;\n        const startStitches = Math.round(this.getLowerBase() * stitchesPerInch);\n        const startStitchesLeft = Math.floor(startStitches / 2);\n        const startStitchesRight = startStitches % 2 === 0 ? startStitchesLeft : startStitchesLeft + 1;\n        const totalRows = Math.round(this.getHeight() * rowsPerInch);\n\n        // calculate the number of stitches to be increased on the left and right edges of the trapezoid\n        const baseWidthDifference = this.getUpperBase() - this.getLowerBase();\n        const leftIncreaseWidth = baseWidthDifference / 2 - this.getOffset();\n        const rightIncreaseWidth = baseWidthDifference / 2 + this.getOffset();\n        const leftIncreaseStitches = Math.round(leftIncreaseWidth * stitchesPerInch);\n        const rightIncreaseStitches = Math.round(rightIncreaseWidth * stitchesPerInch);\n\n        // calculate how often to increase or decrease stitches\n        const increaseLeftFrequency = Math.abs(leftIncreaseStitches / totalRows);\n        const increaseRightFrequency = Math.abs(rightIncreaseStitches / totalRows);\n\n        let leftShapingCounter = 0, rightShapingCounter = 0;\n\n        const stitchPlan = new StitchPlan(gauge, sizeModifier);\n        let prevRow = new StitchPlan.Row(startRow - 1, startStitchesLeft, startStitchesRight);\n        for (let rowNumber = startRow; rowNumber < startRow + totalRows; rowNumber++) {\n            let leftShapingModifier = 0;\n            let rightShapingModifier = 0;\n            leftShapingCounter += increaseLeftFrequency;\n            rightShapingCounter += increaseRightFrequency;\n\n            // Handle multiple increases or decreases in a single row\n            while (leftShapingCounter >= 1) {\n                if (leftIncreaseStitches > 0) {\n                    // increase 1 stitch on the left edge\n                    leftShapingModifier += 1;\n                } else {\n                    // decrease 1 stitch on the left edge\n                    leftShapingModifier -= 1;\n                }\n                leftShapingCounter -= 1;\n            }\n\n            while (rightShapingCounter >= 1) {\n                if (rightIncreaseStitches > 0) {\n                    // increase 1 stitch on the right edge\n                    rightShapingModifier += 1;\n                } else {\n                    // decrease 1 stitch on the right edge\n                    rightShapingModifier -= 1;\n                }\n                rightShapingCounter -= 1;\n            }\n\n            const leftStitchesInWork = prevRow.leftStitchesInWork + leftShapingModifier;\n            const rightStitchesInWork = prevRow.rightStitchesInWork + rightShapingModifier;\n            const newRow = new StitchPlan.Row(rowNumber, leftStitchesInWork, rightStitchesInWork);\n            stitchPlan.addRow(newRow);\n            prevRow = newRow;\n        }\n\n        return stitchPlan;\n    }\n\n    generateKnittingInstructions(gauge, sizeModifier, startRow = 1, isRoot = false, visualMotif = null) {\n        const stitchPlan = this.getStitchPlan(gauge, sizeModifier, startRow);\n        const instructions = [];\n\n        if (isRoot && stitchPlan.rows.length > 0) {\n            instructions.push(`Cast on ${stitchPlan.rows[0].leftStitchesInWork + stitchPlan.rows[0].rightStitchesInWork} stitches.`);\n        }\n\n        instructions.push(...stitchPlan.generateKnittingInstructions(visualMotif));\n\n        instructions.push(...this.finishingSteps);\n\n        if (this.successors.length > 1) {\n            instructions.push(`Divide into ${this.successors.length} sections:`);\n            for (let i = 0; i < this.successors.length; i++) {\n                const successor = this.successors[i];\n                const successorBaseWidth = successor.getUpperBaseWidthInStitches(gauge, sizeModifier);\n                if (successor.getHeight() > 0) {\n                    instructions.push(`Section ${i + 1}: ${successorBaseWidth} stitches`);\n                    const successorInstructions = successor.generateKnittingInstructions(gauge, sizeModifier, stitchPlan.rows.length > 0 ? stitchPlan.rows[stitchPlan.rows.length - 1].rowNumber + 1 : startRow, false, visualMotif ? visualMotif.getChild(stitchPlan.rows.length) : null);\n                    instructions.push(...successorInstructions);\n                } else {\n                    instructions.push(`Section ${i + 1}: bind off ${successor.getUpperBaseWidthInStitches(gauge, sizeModifier)} stitches.`);\n                }\n            }\n        } else if (this.successors.length === 1) {\n            const successor = this.successors[0];\n            const successorBaseWidth = successor.getUpperBaseWidthInStitches(gauge, sizeModifier);\n            if (successor.getHeight() > 0) {\n                const successorInstructions = successor.generateKnittingInstructions(gauge, sizeModifier, stitchPlan.rows.length > 0 ? stitchPlan.rows[stitchPlan.rows.length - 1].rowNumber + 1 : startRow, false, visualMotif ? visualMotif.getChild(stitchPlan.rows.length) : null);\n                instructions.push(...successorInstructions);\n            } else {\n                instructions.push(`Bind off ${successorBaseWidth} stitches.`);\n            }\n        } else if (stitchPlan.rows.length > 0) {\n            instructions.push(`Bind off ${stitchPlan.rows[stitchPlan.rows.length - 1].leftStitchesInWork + stitchPlan.rows[stitchPlan.rows.length - 1].rightStitchesInWork} stitches.`);\n        }\n        return instructions;\n    }\n}\n\nexport { Trapezoid };","import React from 'react';\n\nconst PatternList = ({ patterns, activePatternId, onSelectPattern }) => {\n  return (\n    <div className=\"pattern-list\">\n      <h2>My Patterns</h2>\n      <ul>\n        {patterns.map(pattern => (\n          <li \n            key={pattern.id} \n            className={activePatternId === pattern.id ? 'active' : ''}\n            onClick={() => onSelectPattern(pattern)}\n          >\n            {pattern.name}\n            <span className=\"pattern-description\">{pattern.description}</span>\n          </li>\n        ))}\n        {patterns.length === 0 && (\n          <li className=\"empty-message\">No patterns found.</li>\n        )}\n      </ul>\n    </div>\n  );\n};\n\nexport default PatternList;\n","import React, { useState } from 'react';\nimport { Trapezoid } from '../../../models/Trapezoid';\n\nconst PatternEditor = ({ pattern, onPatternChange }) => {\n  const [panelSettings, setPanelSettings] = useState({\n    height: pattern?.panel?.height || 0,\n    baseA: pattern?.panel?.baseA || 0,\n    baseB: pattern?.panel?.baseB || 0,\n    baseBHorizontalOffset: pattern?.panel?.baseBHorizontalOffset || 0\n  });\n  \n  if (!pattern) return null;\n  \n  const handleChange = (e) => {\n    const { name, value } = e.target;\n    const numValue = parseFloat(value);\n    \n    setPanelSettings({\n      ...panelSettings,\n      [name]: numValue\n    });\n    \n    // Create updated panel\n    const updatedPanel = new Trapezoid(\n      name === 'height' ? numValue : panelSettings.height,\n      name === 'baseA' ? numValue : panelSettings.baseA,\n      name === 'baseB' ? numValue : panelSettings.baseB,\n      name === 'baseBHorizontalOffset' ? numValue : panelSettings.baseBHorizontalOffset,\n      pattern.panel.successors,\n      pattern.panel.finishingSteps,\n      pattern.panel.modificationScale\n    );\n    \n    // Update the pattern with new panel\n    onPatternChange({\n      ...pattern,\n      panel: updatedPanel\n    });\n  };\n  \n  return (\n    <div className=\"pattern-editor\">\n      <h2>Edit Pattern</h2>\n      \n      <div className=\"editor-section\">\n        <h3>Panel Properties</h3>\n        \n        <div className=\"form-group\">\n          <label htmlFor=\"height\">Height (inches):</label>\n          <input \n            type=\"number\" \n            id=\"height\"\n            name=\"height\"\n            value={panelSettings.height}\n            onChange={handleChange}\n            step=\"0.25\"\n            min=\"0\"\n          />\n        </div>\n        \n        <div className=\"form-group\">\n          <label htmlFor=\"baseA\">Lower Width (inches):</label>\n          <input \n            type=\"number\" \n            id=\"baseA\"\n            name=\"baseA\"\n            value={panelSettings.baseA}\n            onChange={handleChange}\n            step=\"0.25\"\n            min=\"0\"\n          />\n        </div>\n        \n        <div className=\"form-group\">\n          <label htmlFor=\"baseB\">Upper Width (inches):</label>\n          <input \n            type=\"number\" \n            id=\"baseB\"\n            name=\"baseB\"\n            value={panelSettings.baseB}\n            onChange={handleChange}\n            step=\"0.25\"\n            min=\"0\"\n          />\n        </div>\n        \n        <div className=\"form-group\">\n          <label htmlFor=\"baseBHorizontalOffset\">Horizontal Offset (inches):</label>\n          <input \n            type=\"number\" \n            id=\"baseBHorizontalOffset\"\n            name=\"baseBHorizontalOffset\"\n            value={panelSettings.baseBHorizontalOffset}\n            onChange={handleChange}\n            step=\"0.25\"\n          />\n        </div>\n      </div>\n      \n      <div className=\"successors-section\">\n        <h3>Successor Panels</h3>\n        <p>Advanced panel editing not available in this view</p>\n        {/* This would contain UI for editing successor trapezoids */}\n      </div>\n    </div>\n  );\n};\n\nexport default PatternEditor;\n","import React, { useEffect, useState } from 'react';\nimport { defaultGauge } from '../../../models/Gauge';\n\nconst PatternViewer = ({ pattern, colorwork, currentRow, onRowChange, sizeModifier }) => {\n  const [instructions, setInstructions] = useState([]);\n  const [rowCount, setRowCount] = useState(0);\n  \n  useEffect(() => {\n    if (pattern?.panel) {\n      const stitchPlan = pattern.panel.getStitchPlan(defaultGauge, sizeModifier);\n      const knittingInstructions = pattern.panel.generateKnittingInstructions(\n        defaultGauge, \n        sizeModifier, \n        1, // start row\n        true, // is root\n        colorwork // visual motif (colorwork)\n      );\n      \n      setInstructions(knittingInstructions);\n      setRowCount(stitchPlan.rows.length);\n    }\n  }, [pattern, colorwork, sizeModifier]);\n  \n  if (!pattern) return null;\n  \n  return (\n    <div className=\"pattern-viewer\">\n      <div className=\"pattern-header\">\n        <h2>{pattern.name}</h2>\n        <p className=\"pattern-description\">{pattern.description}</p>\n      </div>\n      \n      <div className=\"pattern-controls\">\n        <div className=\"row-controls\">\n          <button \n            onClick={() => onRowChange(Math.max(1, currentRow - 1))}\n            disabled={currentRow <= 1}\n          >\n            Previous Row\n          </button>\n          <span className=\"row-indicator\">Row {currentRow} of {rowCount}</span>\n          <button \n            onClick={() => onRowChange(Math.min(rowCount, currentRow + 1))}\n            disabled={currentRow >= rowCount}\n          >\n            Next Row\n          </button>\n        </div>\n      </div>\n      \n      <div className=\"pattern-display\">\n        <div className=\"shape-visualization\">\n          <h3>Pattern Shape</h3>\n          <div className=\"trapezoid-visual\" style={{\n            height: `${pattern.panel.getHeight() * 20}px`,\n            width: `${pattern.panel.getLowerBase() * 20}px`,\n            borderTop: `${pattern.panel.getHeight() * 20}px solid transparent`,\n            borderLeft: `${pattern.panel.getOffset() * 20}px solid transparent`,\n            borderRight: `${(pattern.panel.getUpperBase() - pattern.panel.getLowerBase() - pattern.panel.getOffset()) * 20}px solid transparent`\n          }}>\n            {/* Visual representation of the pattern shape */}\n          </div>\n        </div>\n        \n        <div className=\"current-row-display\">\n          <h3>Current Row</h3>\n          <div className=\"stitch-visualization\">\n            {/* Visual representation of stitches in current row */}\n            <div className=\"stitch-row\">\n              {/* This would normally be dynamically generated */}\n              {Array(20).fill().map((_, i) => (\n                <div key={i} className=\"stitch\" style={{\n                  backgroundColor: i % 3 === 0 ? '#3498db' : '#e74c3c'\n                }}></div>\n              ))}\n            </div>\n          </div>\n        </div>\n        \n        <div className=\"instructions\">\n          <h3>Knitting Instructions</h3>\n          <ol className=\"instruction-list\">\n            {instructions.map((instruction, index) => (\n              <li key={index} className={index === currentRow - 1 ? 'active' : ''}>\n                {instruction}\n              </li>\n            ))}\n          </ol>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default PatternViewer;\n","import React, { useState } from 'react';\n\nconst ColorworkEditor = ({ pattern, colorwork, onColorworkChange }) => {\n  const [grid, setGrid] = useState(\n    Array(20).fill().map(() => Array(20).fill('#FFFFFF'))\n  );\n  const [selectedColor, setSelectedColor] = useState('#3498db');\n  \n  if (!pattern) return null;\n  \n  const handleCellClick = (row, col) => {\n    const newGrid = [...grid];\n    newGrid[row][col] = selectedColor;\n    setGrid(newGrid);\n    \n    // This would update a more complex colorwork object in a real implementation\n    onColorworkChange({\n      grid: newGrid,\n      name: 'Custom Colorwork'\n    });\n  };\n  \n  const handleColorChange = (e) => {\n    setSelectedColor(e.target.value);\n  };\n  \n  const clearColorwork = () => {\n    const newGrid = Array(20).fill().map(() => Array(20).fill('#FFFFFF'));\n    setGrid(newGrid);\n    onColorworkChange(null);\n  };\n  \n  return (\n    <div className=\"colorwork-editor\">\n      <h2>Colorwork Pattern</h2>\n      \n      <div className=\"color-controls\">\n        <div className=\"color-picker\">\n          <label>Selected Color: </label>\n          <input \n            type=\"color\"\n            value={selectedColor}\n            onChange={handleColorChange}\n          />\n        </div>\n        <button onClick={clearColorwork}>Clear Colorwork</button>\n      </div>\n      \n      <div className=\"colorwork-grid\">\n        {grid.map((row, rowIndex) => (\n          <div key={rowIndex} className=\"grid-row\">\n            {row.map((cell, colIndex) => (\n              <div \n                key={colIndex}\n                className=\"grid-cell\"\n                style={{ backgroundColor: cell }}\n                onClick={() => handleCellClick(rowIndex, colIndex)}\n              ></div>\n            ))}\n          </div>\n        ))}\n      </div>\n      \n      <div className=\"colorwork-note\">\n        <p>Click on cells to apply the selected color. This will overlay the colorwork pattern onto your knitting pattern.</p>\n      </div>\n    </div>\n  );\n};\n\nexport default ColorworkEditor;\n","import React, { useState, useEffect } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { Trapezoid } from '../../models/Trapezoid';\nimport { StitchPlan } from '../../models/StitchPlan';\nimport PatternList from './components/PatternList';\nimport PatternEditor from './components/PatternEditor';\nimport PatternViewer from './components/PatternViewer';\nimport ColorworkEditor from './components/ColorworkEditor';\nimport './styles/KnittingApp.css';\n\nconst KnittingApp = ({ view = 'viewer' }) => {\n  const [patterns, setPatterns] = useState([]);\n  const [activePattern, setActivePattern] = useState(null);\n  const [sizeModifier, setSizeModifier] = useState(1);\n  const [colorworkPattern, setColorworkPattern] = useState(null);\n  const [currentRow, setCurrentRow] = useState(1);\n  const { patternId } = useParams();\n\n  useEffect(() => {\n    // Mock data - in production, you'd fetch patterns from storage\n    const mockPatterns = [\n      {\n        id: '1',\n        name: 'Basic Sweater Front',\n        description: 'Simple sweater front panel with v-neck',\n        panel: {\n          height: 20,\n          baseA: 16,\n          baseB: 16,\n          successors: [\n            {\n              height: 5,\n              baseA: 8,\n              baseB: 8,\n              baseBHorizontalOffset: -2,\n            },\n            {\n              height: 5,\n              baseA: 8,\n              baseB: 8,\n              baseBHorizontalOffset: 2,\n            }\n          ]\n        }\n      }\n    ];\n    setPatterns(mockPatterns);\n  }, []);\n\n  useEffect(() => {\n    if (patternId && patterns.length) {\n      const pattern = patterns.find(p => p.id === patternId);\n      if (pattern) {\n        // Convert JSON panel to Trapezoid object\n        const trapezoid = Trapezoid.fromObject(pattern.panel);\n        setActivePattern({\n          ...pattern,\n          panel: trapezoid\n        });\n      }\n    }\n  }, [patternId, patterns]);\n\n  const handleSizeChange = (newSize) => {\n    setSizeModifier(newSize);\n    if (activePattern?.panel) {\n      activePattern.panel.setSizeModifier(newSize);\n      // Force refresh\n      setActivePattern({...activePattern});\n    }\n  };\n\n  const handleRowChange = (rowNum) => {\n    setCurrentRow(rowNum);\n  };\n\n  const handlePatternSelect = (pattern) => {\n    // Convert JSON panel to Trapezoid object\n    const trapezoid = Trapezoid.fromObject(pattern.panel);\n    setActivePattern({\n      ...pattern,\n      panel: trapezoid\n    });\n    setCurrentRow(1); // Reset to first row\n  };\n\n  const handleColorworkChange = (colorwork) => {\n    setColorworkPattern(colorwork);\n  };\n\n  return (\n    <div className=\"knitting-app\">\n      <div className=\"app-header\">\n        <h1>Knitting Patterns</h1>\n        <div className=\"view-controls\">\n          {activePattern && (\n            <>\n              <div className=\"size-controls\">\n                <label>Size: </label>\n                <input \n                  type=\"range\" \n                  min=\"0.5\" \n                  max=\"2\" \n                  step=\"0.05\" \n                  value={sizeModifier}\n                  onChange={(e) => handleSizeChange(parseFloat(e.target.value))}\n                />\n                <span>{Math.round(sizeModifier * 100)}%</span>\n              </div>\n              <div className=\"mode-toggle\">\n                {view === 'editor' ? 'Edit Mode' : 'View Mode'}\n              </div>\n            </>\n          )}\n        </div>\n      </div>\n\n      <div className=\"knitting-content\">\n        <PatternList\n          patterns={patterns}\n          activePatternId={activePattern?.id}\n          onSelectPattern={handlePatternSelect}\n        />\n\n        {view === 'editor' && activePattern ? (\n          <div className=\"editor-container\">\n            <PatternEditor \n              pattern={activePattern}\n              onPatternChange={(updatedPattern) => setActivePattern(updatedPattern)}\n            />\n            <ColorworkEditor\n              pattern={activePattern}\n              colorwork={colorworkPattern}\n              onColorworkChange={handleColorworkChange}\n            />\n          </div>\n        ) : activePattern ? (\n          <PatternViewer\n            pattern={activePattern}\n            colorwork={colorworkPattern}\n            currentRow={currentRow}\n            onRowChange={handleRowChange}\n            sizeModifier={sizeModifier}\n          />\n        ) : (\n          <div className=\"empty-state\">\n            <p>Select a pattern to view or edit</p>\n          </div>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default KnittingApp;\n"],"names":["StitchPlan","constructor","this","rows","addRow","row","push","generateKnittingInstructions","length","instructions","lowerLeft","leftStitchesInWork","lowerRight","rightStitchesInWork","upperLeft","upperRight","concat","rowNumber","consecutiveRows","prevRow","leftDiff","rightDiff","instruction","Row","defaultGauge","stitchesPerFourInches","rowsPerFourInches","getStitchesPerInch","getRowsPerInch","Trapezoid","height","baseA","baseB","baseBHorizontalOffset","arguments","undefined","successors","finishingSteps","sizeModifier","modificationScale","setSizeModifier","getHeight","getLowerBase","getUpperBase","getOffset","fromObject","json","Array","isArray","filter","s","map","getUpperBaseWidthInStitches","gauge","Math","round","getStitchPlan","startRow","stitchesPerInch","rowsPerInch","startStitches","startStitchesLeft","floor","startStitchesRight","totalRows","baseWidthDifference","leftIncreaseWidth","rightIncreaseWidth","leftIncreaseStitches","rightIncreaseStitches","increaseLeftFrequency","abs","increaseRightFrequency","leftShapingCounter","rightShapingCounter","stitchPlan","leftShapingModifier","rightShapingModifier","newRow","isRoot","visualMotif","i","successor","successorBaseWidth","successorInstructions","getChild","_ref","patterns","activePatternId","onSelectPattern","_jsxs","className","children","_jsx","pattern","id","onClick","name","description","_pattern$panel","_pattern$panel2","_pattern$panel3","_pattern$panel4","onPatternChange","panelSettings","setPanelSettings","useState","panel","handleChange","e","value","target","numValue","parseFloat","_objectSpread","updatedPanel","htmlFor","type","onChange","step","min","colorwork","currentRow","onRowChange","setInstructions","rowCount","setRowCount","useEffect","knittingInstructions","max","disabled","style","width","borderTop","borderLeft","borderRight","fill","_","backgroundColor","index","onColorworkChange","grid","setGrid","selectedColor","setSelectedColor","clearColorwork","newGrid","rowIndex","cell","colIndex","handleCellClick","col","view","setPatterns","activePattern","setActivePattern","colorworkPattern","setColorworkPattern","setCurrentRow","patternId","useParams","find","p","trapezoid","_Fragment","handleSizeChange","newSize","PatternList","PatternEditor","updatedPattern","ColorworkEditor","PatternViewer","rowNum"],"sourceRoot":""}