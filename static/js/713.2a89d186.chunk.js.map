{"version":3,"file":"static/js/713.2a89d186.chunk.js","mappings":"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","sources":["apps/songs/components/LyricLineEditor.js","apps/songs/components/SongDetail.js","convert-lyrics.js","apps/songs/components/SongListTest.js","apps/songs/components/GoogleSignInButton.js","apps/songs/components/SessionTestingTools.js","apps/songs/SongTabsAppModern.js"],"sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\n\nconst LyricLineEditor = ({ line, onSave, onCancel }) => {\n  const [editedLine, setEditedLine] = useState(line || '');\n  const inputRef = useRef(null);\n\n  useEffect(() => {\n    // Focus the input when the editor opens\n    if (inputRef.current) {\n      inputRef.current.focus();\n    }\n  }, []);\n\n  const handleSave = () => {\n    onSave(editedLine);\n  };\n\n  const handleKeyDown = (e) => {\n    if (e.key === 'Enter') {\n      handleSave();\n    } else if (e.key === 'Escape') {\n      onCancel();\n    }\n  };\n\n  return (\n    <div className=\"lyric-line-editor\">\n      <input\n        ref={inputRef}\n        type=\"text\"\n        value={editedLine}\n        onChange={(e) => setEditedLine(e.target.value)}\n        onKeyDown={handleKeyDown}\n        placeholder=\"Enter lyrics with [Chord] notation...\"\n        className=\"lyric-input\"\n      />\n      <div className=\"editor-controls\">\n        <button onClick={handleSave} className=\"save-button\">Save</button>\n        <button onClick={onCancel} className=\"cancel-button\">Cancel</button>\n      </div>\n    </div>\n  );\n};\n\nexport default LyricLineEditor;\n","import React, { useState, useEffect } from 'react';\nimport { FaPencilAlt, FaPlus, FaTrash, FaEdit, FaGripVertical, FaClipboard } from 'react-icons/fa';\nimport { convertLyrics } from '../../../convert-lyrics';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { setInstrument, transposeSongUp, transposeSongDown } from '../../../store/chordsSlice';\nimport { deleteSong, clearSelectedSong, setGoogleDriveConnection, setUserInfo } from '../../../store/songsSlice';\nimport ChordChart from './ChordChart';\nimport LyricLineEditor from './LyricLineEditor';\nimport { Spin, App, Popconfirm } from 'antd';\nimport { CircularProgress, Box } from '@mui/material';\nimport {\n  DndContext,\n  closestCenter,\n  KeyboardSensor,\n  PointerSensor,\n  useSensor,\n  useSensors,\n} from '@dnd-kit/core';\nimport {\n  arrayMove,\n  SortableContext,\n  sortableKeyboardCoordinates,\n  verticalListSortingStrategy,\n} from '@dnd-kit/sortable';\nimport {\n  useSortable,\n} from '@dnd-kit/sortable';\nimport { CSS } from '@dnd-kit/utilities';\n\n// Sortable line component for drag and drop\nconst SortableLyricLine = ({ \n  line, \n  index, \n  id, \n  editingLineIndex, \n  editingEnabled, \n  hoveredLineIndex,\n  setHoveredLineIndex,\n  handleEditLine,\n  handleInsertAfter,\n  handleDeleteLine,\n  handleSaveLine,\n  handleCancelEdit,\n  renderLyricLine,\n  isThisLinePending = false,\n  isDragDisabled = false,\n  isPendingDelete = false,\n  isAddingLine = false,\n  isPendingSave = false\n}) => {\n  const {\n    attributes,\n    listeners,\n    setNodeRef,\n    transform,\n    transition,\n    isDragging,\n  } = useSortable({ \n    id,\n    disabled: isDragDisabled\n  });\n\n  const style = {\n    transform: CSS.Transform.toString(transform),\n    transition,\n    opacity: isDragging ? 0.5 : (isPendingDelete ? 0.6 : 1),\n    position: 'relative',\n    backgroundColor: isPendingDelete ? '#f5f5f5' : 'transparent',\n    color: isPendingDelete ? '#999' : 'inherit',\n    pointerEvents: isPendingDelete ? 'none' : 'auto'\n  };\n\n  return (\n    <div \n      ref={setNodeRef} \n      style={style} \n      className=\"lyric-line\"\n      onMouseEnter={() => setHoveredLineIndex(index)}\n      onMouseLeave={() => setHoveredLineIndex(null)}\n    >\n      {editingLineIndex === index && !isAddingLine && editingEnabled ? (\n        <LyricLineEditor\n          line={line}\n          onSave={(newLine) => handleSaveLine(newLine, index)}\n          onCancel={handleCancelEdit}\n        />\n      ) : (\n        <div style={{ display: 'flex', alignItems: 'center', gap: '8px' }}>\n          <div className=\"lyric-content\" style={{ flex: 1 }}>\n            {renderLyricLine(line)}\n          </div>\n          {isPendingSave && (\n            <div style={{\n              display: 'flex',\n              alignItems: 'center',\n              gap: '4px',\n              padding: '4px 8px',\n              backgroundColor: '#e6f7ff',\n              border: '1px solid #91d5ff',\n              borderRadius: '4px',\n              color: '#1890ff'\n            }}>\n              <Spin size=\"small\" />\n              <span style={{ fontSize: '12px' }}>Saving...</span>\n            </div>\n          )}\n          {isPendingDelete && (\n            <div style={{\n              display: 'flex',\n              alignItems: 'center',\n              gap: '4px',\n              padding: '4px 8px',\n              backgroundColor: '#fff2f0',\n              border: '1px solid #ffccc7',\n              borderRadius: '4px',\n              color: '#cf1322'\n            }}>\n              <Spin size=\"small\" />\n              <span style={{ fontSize: '12px' }}>Deleting...</span>\n            </div>\n          )}\n          {hoveredLineIndex === index && editingEnabled && !isPendingDelete && (\n            <div className=\"lyric-controls\" style={{ display: 'flex', alignItems: 'center', gap: '4px' }}>\n              <button \n                className=\"control-button edit\" \n                onClick={(e) => {\n                  e.stopPropagation();\n                  handleEditLine(index);\n                }}\n                style={{\n                  padding: '4px 6px',\n                  border: '1px solid #ccc',\n                  backgroundColor: '#f9f9f9',\n                  borderRadius: '3px',\n                  cursor: 'pointer',\n                  fontSize: '12px'\n                }}\n                title=\"Edit this line\"\n              >\n                <FaPencilAlt />\n              </button>\n              <button \n                className=\"control-button insert\" \n                onClick={(e) => {\n                  e.stopPropagation();\n                  handleInsertAfter(index);\n                }}\n                style={{\n                  padding: '4px 6px',\n                  border: '1px solid #ccc',\n                  backgroundColor: '#f9f9f9',\n                  borderRadius: '3px',\n                  cursor: 'pointer',\n                  fontSize: '12px',\n                  color: '#5cb85c'\n                }}\n                title=\"Insert new line after this line\"\n              >\n                <FaPlus />\n              </button>\n              <button \n                className=\"control-button delete\" \n                onClick={(e) => {\n                  e.stopPropagation();\n                  handleDeleteLine(index);\n                }}\n                style={{\n                  padding: '4px 6px',\n                  border: '1px solid #ccc',\n                  backgroundColor: '#f9f9f9',\n                  borderRadius: '3px',\n                  cursor: 'pointer',\n                  fontSize: '12px',\n                  color: '#d9534f'\n                }}\n                title=\"Delete this line\"\n              >\n                <FaTrash />\n              </button>\n              <div \n                {...(isDragDisabled ? {} : attributes)}\n                {...(isDragDisabled ? {} : listeners)}\n                className=\"drag-handle\"\n                style={{\n                  padding: '4px 6px',\n                  border: '1px solid #ddd',\n                  backgroundColor: isDragDisabled ? '#e9e9e9' : '#f0f0f0',\n                  borderRadius: '3px',\n                  cursor: isDragDisabled ? 'not-allowed' : 'grab',\n                  fontSize: '12px',\n                  color: isDragDisabled ? '#999' : '#666',\n                  display: 'flex',\n                  alignItems: 'center',\n                  transition: 'all 0.2s ease',\n                  boxShadow: isDragDisabled ? 'none' : '0 1px 2px rgba(0,0,0,0.1)',\n                  opacity: isDragDisabled ? 0.6 : 1\n                }}\n                onMouseDown={isDragDisabled ? undefined : (e) => e.currentTarget.style.cursor = 'grabbing'}\n                onMouseUp={isDragDisabled ? undefined : (e) => e.currentTarget.style.cursor = 'grab'}\n                title={isDragDisabled ? \"Drag disabled during update\" : \"Drag to reorder\"}\n              >\n                {isThisLinePending ? (\n                  <Spin size=\"small\" />\n                ) : (\n                  <FaGripVertical />\n                )}\n              </div>\n            </div>\n          )}\n        </div>\n      )}\n    </div>\n  );\n};\n\nconst SongDetail = ({ song, onPinChord, onUpdateSong, artist, editingEnabled = true }) => {\n  const { message, modal } = App.useApp();\n  const [editingLineIndex, setEditingLineIndex] = useState(null);\n  const [isAddingLine, setIsAddingLine] = useState(false);\n  const [insertAfterIndex, setInsertAfterIndex] = useState(null); // Track where we're inserting\n  const [hoveredLineIndex, setHoveredLineIndex] = useState(null);\n  const [localTranspose, setLocalTranspose] = useState(0);\n  const [dirty, setDirty] = useState(false);\n  const [isEditingWholeSong, setIsEditingWholeSong] = useState(false);\n  const [wholeSongText, setWholeSongText] = useState('');\n  const [pendingSaves, setPendingSaves] = useState(new Set());\n  const [pendingDragOperation, setPendingDragOperation] = useState(null);\n  const [optimisticLyrics, setOptimisticLyrics] = useState(null);\n  const [pendingLineIndex, setPendingLineIndex] = useState(null);\n  const [pendingDeleteLines, setPendingDeleteLines] = useState(new Set());\n  const [isPendingAdd, setIsPendingAdd] = useState(false);\n  const [isPendingAnyOperation, setIsPendingAnyOperation] = useState(false);\n  const [isSavingTranspose, setIsSavingTranspose] = useState(false);\n  const [isSavingWholeSong, setIsSavingWholeSong] = useState(false);\n  const [isDeletingSong, setIsDeletingSong] = useState(false);\n  const [deleteCountdown, setDeleteCountdown] = useState(0);\n  const dispatch = useDispatch();\n  const instrument = useSelector((state) => state.chords.currentInstrument);\n  const transpose = useSelector((state) => state.chords.transposeBy?.[song.title] || 0);\n  const chordFingerings = useSelector((state) => state.chords.chordFingerings);\n  const isGoogleDriveConnected = useSelector((state) => state.songs.isGoogleDriveConnected);\n\n  // Set up sensors for drag and drop\n  const sensors = useSensors(\n    useSensor(PointerSensor),\n    useSensor(KeyboardSensor, {\n      coordinateGetter: sortableKeyboardCoordinates,\n    })\n  );\n\n  // Extract unique chords from lyrics\n  const extractChords = (lyrics) => {\n    const chordRegex = /\\[(.*?)\\]/g;\n    const allChords = [];\n    \n    lyrics?.forEach(line => {\n      let match;\n      while ((match = chordRegex.exec(line)) !== null) {\n        if (!allChords.includes(match[1])) {\n          allChords.push(match[1]);\n        }\n      }\n    });\n    \n    return allChords;\n  };\n\n  // Helper to shift a chord name by a number of semitones\n  const CHROMATIC = ['C', 'C#', 'D', 'D#', 'E', 'F', 'F#', 'G', 'G#', 'A', 'A#', 'B'];\n  const FLAT_EQUIV = { 'Db': 'C#', 'Eb': 'D#', 'Gb': 'F#', 'Ab': 'G#', 'Bb': 'A#' };\n  function normalizeChordName(name) {\n    // Convert flats to sharps for lookup\n    let base = name;\n    let suffix = '';\n    if (name.length > 1 && (name[1] === '#' || name[1] === 'b')) {\n      base = name.slice(0, 2);\n      suffix = name.slice(2);\n    } else {\n      base = name[0];\n      suffix = name.slice(1);\n    }\n    if (FLAT_EQUIV[base]) base = FLAT_EQUIV[base];\n    return base + suffix;\n  }\n  function transposeChord(chord, semitones) {\n    // Handle slashed chords (e.g. A/C# -> A#/D)\n    if (chord.includes('/')) {\n      const [rootPart, bassPart] = chord.split('/');\n      const transposedRoot = transposeChord(rootPart, semitones);\n      const transposedBass = transposeChord(bassPart, semitones);\n      return `${transposedRoot}/${transposedBass}`;\n    }\n    \n    // Extract root and suffix (e.g. C#m7 -> C#, m7)\n    const match = chord.match(/^([A-G][b#]?)(.*)$/);\n    if (!match) return chord;\n    let [_, root, suffix] = match;\n    // Normalize flats to sharps\n    if (FLAT_EQUIV[root]) root = FLAT_EQUIV[root];\n    let idx = CHROMATIC.indexOf(root);\n    if (idx === -1) return chord;\n    let newIdx = (idx + semitones + 12) % 12;\n    return CHROMATIC[newIdx] + suffix;\n  }\n\n  // Ensure lyrics is always an array\n  const lyricsArray = Array.isArray(song.lyrics) ? song.lyrics : \n    (typeof song.lyrics === 'string' ? (song.lyrics ? song.lyrics.split('\\n') : []) : []);\n\n  const chords = (song.chords || extractChords(lyricsArray)).map(chord =>\n    localTranspose !== 0 ? transposeChord(chord, localTranspose) : chord\n  );\n\n  const handleEditLine = (index) => {\n    setEditingLineIndex(index);\n    setIsAddingLine(false);\n  };\n\n  const handleAddLine = () => {\n    // Block if there are pending operations\n    if (isPendingAnyOperation || pendingDeleteLines.size > 0) {\n      message.warning('Please wait for current operation to complete before adding a new line.');\n      return;\n    }\n    \n    setIsAddingLine(true);\n    setEditingLineIndex(null);\n  };\n\n  const handleInsertAfter = (afterIndex) => {\n    // Block if there are pending operations\n    if (isPendingAnyOperation || pendingDeleteLines.size > 0) {\n      message.warning('Please wait for current operation to complete before inserting a new line.');\n      return;\n    }\n    \n    setIsAddingLine(true);\n    setInsertAfterIndex(afterIndex); // Track the original position\n    // Set to the position where we want to insert (after the specified index)\n    if (afterIndex === -1) {\n      // Empty song case - insert at position 0\n      setEditingLineIndex(0);\n    } else {\n      // Insert after the specified line\n      setEditingLineIndex(afterIndex + 1);\n    }\n  };\n\n  const handleSaveLine = async (newLine, index) => {\n    const updatedLyrics = [...lyricsArray];\n    \n    if (isAddingLine) {\n      // Set pending add state\n      setIsPendingAdd(true);\n      setIsPendingAnyOperation(true);\n      \n      // Check if we're inserting at a specific position or adding at the end\n      const targetIndex = editingLineIndex !== null && editingLineIndex <= lyricsArray.length\n        ? editingLineIndex // Insert at specific position\n        : updatedLyrics.length; // Add at the end\n      \n      // Insert at target position\n      updatedLyrics.splice(targetIndex, 0, newLine);\n      \n      setOptimisticLyrics(updatedLyrics);\n      setPendingSaves(prev => new Set([...prev, targetIndex]));\n      \n      // Exit edit mode immediately for better UX\n      setEditingLineIndex(null);\n      setIsAddingLine(false);\n      \n      // Save the add operation\n      onUpdateSong({\n        ...song,\n        lyrics: updatedLyrics\n      }).then(() => {\n        message.success('Line added successfully!');\n        setOptimisticLyrics(null);\n        setIsPendingAdd(false);\n        setIsPendingAnyOperation(false);\n        setPendingSaves(prev => {\n          const newSet = new Set(prev);\n          newSet.delete(targetIndex);\n          return newSet;\n        });\n        // Ensure we completely reset editing state\n        setEditingLineIndex(null);\n        setIsAddingLine(false);\n        setInsertAfterIndex(null);\n      }).catch((error) => {\n        console.error('Failed to add line:', error);\n        message.error('Failed to add new line. Please try again.');\n        // Revert optimistic update\n        setOptimisticLyrics(null);\n        setIsPendingAdd(false);\n        setIsPendingAnyOperation(false);\n        setPendingSaves(prev => {\n          const newSet = new Set(prev);\n          newSet.delete(targetIndex);\n          return newSet;\n        });\n        setIsAddingLine(true);\n        setEditingLineIndex(null);\n        setInsertAfterIndex(null);\n      });\n    } else {\n      // Set pending edit state\n      setIsPendingAnyOperation(true);\n      setPendingSaves(prev => new Set([...prev, index]));\n      \n      // Update existing line - optimistic update\n      updatedLyrics[index] = newLine;\n      setOptimisticLyrics(updatedLyrics);\n      \n      // Exit edit mode immediately for better UX\n      setEditingLineIndex(null);\n      \n      // Save the edit operation\n      onUpdateSong({\n        ...song,\n        lyrics: updatedLyrics\n      }).then(() => {\n        message.success('Line updated successfully!');\n        setOptimisticLyrics(null);\n        setIsPendingAnyOperation(false);\n        setPendingSaves(prev => {\n          const newSet = new Set(prev);\n          newSet.delete(index);\n          return newSet;\n        });\n      }).catch((error) => {\n        console.error('Failed to update line:', error);\n        message.error('Failed to update line. Please try again.');\n        // Revert optimistic update\n        setOptimisticLyrics(null);\n        setIsPendingAnyOperation(false);\n        setPendingSaves(prev => {\n          const newSet = new Set(prev);\n          newSet.delete(index);\n          return newSet;\n        });\n        setEditingLineIndex(index);\n      });\n    }\n  };\n\n  const handleCancelEdit = () => {\n    setEditingLineIndex(null);\n    setIsAddingLine(false);\n    setInsertAfterIndex(null);\n  };\n\n  // Handle deleting a line with optimistic updates\n  const handleDeleteLine = async (index) => {\n    // Block if there are pending operations\n    if (isPendingAnyOperation || pendingDeleteLines.has(index)) {\n      message.warning('Please wait for current operation to complete before deleting this line.');\n      return;\n    }\n\n    // Set pending delete state\n    setIsPendingAnyOperation(true);\n    setPendingDeleteLines(prev => new Set([...prev, index]));\n\n    const updatedLyrics = [...lyricsArray];\n    updatedLyrics.splice(index, 1);\n    \n    // Optimistic update\n    setOptimisticLyrics(updatedLyrics);\n\n    try {\n      await onUpdateSong({\n        ...song,\n        lyrics: updatedLyrics\n      });\n      \n      message.success('Line deleted successfully!');\n      setOptimisticLyrics(null);\n      setIsPendingAnyOperation(false);\n      setPendingDeleteLines(prev => {\n        const newSet = new Set(prev);\n        newSet.delete(index);\n        return newSet;\n      });\n    } catch (error) {\n      console.error('Failed to delete line:', error);\n      message.error('Failed to delete line. Please try again.');\n      \n      // Revert optimistic update\n      setOptimisticLyrics(null);\n      setIsPendingAnyOperation(false);\n      setPendingDeleteLines(prev => {\n        const newSet = new Set(prev);\n        newSet.delete(index);\n        return newSet;\n      });\n    }\n  };\n\n  // Handle drag end for reordering lines with optimistic updates\n  const handleDragEnd = async (event) => {\n    const { active, over } = event;\n\n    if (active.id !== over.id) {\n      // Set pending reorder state\n      setIsPendingAnyOperation(true);\n      \n      const oldIndex = lyricsArray.findIndex((_, index) => index.toString() === active.id);\n      const newIndex = lyricsArray.findIndex((_, index) => index.toString() === over.id);\n      \n      // Optimistic update - immediately show the new order\n      const newLyrics = arrayMove(lyricsArray, oldIndex, newIndex);\n      setOptimisticLyrics(newLyrics);\n      setPendingLineIndex(newIndex); // Track which line is pending\n      \n      // Save the reorder operation\n      onUpdateSong({\n        ...song,\n        lyrics: newLyrics\n      }).then(() => {\n        message.success('Lines reordered successfully!');\n        setOptimisticLyrics(null);\n        setIsPendingAnyOperation(false);\n        setPendingLineIndex(null);\n      }).catch((error) => {\n        console.error('Failed to reorder lines:', error);\n        message.error('Failed to reorder lines. Please try again.');\n        // Revert optimistic update\n        setOptimisticLyrics(null);\n        setIsPendingAnyOperation(false);\n        setPendingLineIndex(null);\n      });\n    }\n  };\n\n  // Remove the old handleMoveLine function as it's replaced by drag and drop\n\n  // Handle whole song editing\n  const handleEditWholeSong = () => {\n    setWholeSongText(lyricsArray.join('\\n'));\n    setIsEditingWholeSong(true);\n  };\n\n  const handleSaveWholeSong = async () => {\n    setIsSavingWholeSong(true);\n    try {\n      const newLyrics = wholeSongText.split('\\n').filter(line => line.trim() !== '');\n      await onUpdateSong({\n        ...song,\n        lyrics: newLyrics,\n        chords: extractChords(newLyrics)\n      });\n      setIsEditingWholeSong(false);\n      message.success('Song lyrics saved successfully!');\n    } catch (error) {\n      console.error('Failed to save whole song:', error);\n      message.error('Failed to save song. Please try again.');\n    } finally {\n      setIsSavingWholeSong(false);\n    }\n  };\n\n  // Helper function to check if error is authentication-related\n  const isAuthError = (error) => {\n    if (!error) return false;\n    const message = error.message || error || '';\n    const authErrorPatterns = [\n      'User not signed in to Google Drive',\n      'Expected OAuth 2 access token',\n      'login cookie or other valid authentication credential', \n      'Invalid Credentials',\n      'Authentication failed',\n      'unauthorized_client',\n      'invalid_token',\n      'expired_token',\n      'access_denied',\n      'token_expired',\n      'Request had invalid authentication credentials'\n    ];\n    return authErrorPatterns.some(pattern => \n      message.toLowerCase().includes(pattern.toLowerCase())\n    );\n  };\n\n  // Handle opening the popconfirm - start countdown\n  const handleDeleteConfirm = () => {\n    // This is called when user clicks the actual Delete button in the popconfirm\n    handleDeleteSong();\n  };\n\n  // Start countdown when popconfirm opens\n  const handlePopconfirmOpen = (open) => {\n    if (open) {\n      setDeleteCountdown(3.0); // Start 3-second countdown with decimal\n      const timer = setInterval(() => {\n        setDeleteCountdown(prev => {\n          if (prev <= 0.1) {\n            clearInterval(timer);\n            return 0;\n          }\n          return Math.max(0, prev - 0.1); // Decrease by 0.1 every 100ms\n        });\n      }, 100); // Update every 100ms (10 times per second)\n    } else {\n      // Reset countdown when popconfirm closes\n      setDeleteCountdown(0);\n    }\n  };\n\n  // Handle actual song deletion\n  const handleDeleteSong = async () => {\n    setIsDeletingSong(true);\n    try {\n      await dispatch(deleteSong({\n        artistName: artist.name,\n        albumTitle: song.album?.title,\n        songTitle: song.title,\n        isGoogleDriveConnected\n      })).unwrap();\n\n      message.success('Song deleted successfully!');\n      \n      // Clear selected song to navigate away\n      dispatch(clearSelectedSong());\n      \n    } catch (error) {\n      console.error('Failed to delete song:', error);\n      \n      // Check if this is an authentication error\n      if (isAuthError(error)) {\n        dispatch(setGoogleDriveConnection(false));\n        dispatch(setUserInfo(null));\n        message.error('Your Google Drive session has expired. Please sign in again to delete songs.');\n      } else {\n        message.error(error.message || 'Failed to delete song. Please try again.');\n      }\n    } finally {\n      setIsDeletingSong(false);\n      setDeleteCountdown(0);\n    }\n  };\n\n  const handleCancelWholeSong = () => {\n    setIsEditingWholeSong(false);\n    setWholeSongText('');\n  };\n\n  const renderDeletePopconfirmTitle = () => (\n    <div>\n      <div>Delete \"{song.title}\"?</div>\n      <div style={{ fontSize: '12px', color: '#666', marginTop: '4px' }}>\n        This action cannot be undone.\n      </div>\n    </div>\n  );\n\n  const renderDeletePopconfirmContent = () => (\n    <div style={{ minWidth: '200px' }}>\n      <div>\n        <strong>Artist:</strong> {artist.name}<br />\n        <strong>Album:</strong> {song.album?.title}<br />\n        <strong>Song:</strong> {song.title}\n      </div>\n    </div>\n  );\n\n  // Function to render a lyric line with chord formatting above text\n  const renderLyricLine = (line) => {\n    const chordRegex = /\\[(.*?)\\]/g;\n    const chordPositions = [];\n    let plainText = line;\n    let match;\n    \n    // Extract chord positions and create plain text\n    while ((match = chordRegex.exec(line)) !== null) {\n      chordPositions.push({\n        chord: match[1],\n        position: match.index,\n        length: match[0].length\n      });\n    }\n    \n    // Remove chord markers for plain text\n    plainText = plainText.replace(/\\[(.*?)\\]/g, '');\n    \n    // Calculate positions for chord labels\n    const adjustedChordPositions = chordPositions.map((item, index) => {\n      let adjustment = 0;\n      for (let i = 0; i < index; i++) {\n        adjustment += chordPositions[i].length;\n      }\n      // Transpose the chord if needed\n      const transposedChord = localTranspose !== 0 ? transposeChord(item.chord, localTranspose) : item.chord;\n      return {\n        ...item,\n        chord: transposedChord,\n        position: item.position - adjustment\n      };\n    });\n    \n    return (\n      <div className=\"lyric-line-with-chords\">\n        <div className=\"chord-labels\">\n          {adjustedChordPositions.map((item, idx) => (\n            <span \n              key={`chord-${idx}`} \n              className=\"chord-label\"\n              style={{ left: `${item.position}ch` }}\n              onClick={() => onPinChord(item.chord)}\n            >\n              {item.chord}\n            </span>\n          ))}\n        </div>\n        <div className=\"lyric-text-only\">\n          {plainText}\n        </div>\n      </div>\n    );\n  };\n\n  React.useEffect(() => {\n    // Sync local transpose with redux only when song changes\n    setLocalTranspose(transpose);\n    setDirty(false);\n  }, [song.title]);\n\n  const handleTransposeUp = () => {\n    setLocalTranspose((prev) => prev + 1);\n    setDirty(true);\n    dispatch(transposeSongUp(song.title));\n  };\n  const handleTransposeDown = () => {\n    setLocalTranspose((prev) => prev - 1);\n    setDirty(true);\n    dispatch(transposeSongDown(song.title));\n  };\n  const handleSaveTranspose = async () => {\n    setIsSavingTranspose(true);\n    try {\n      // Apply transposition to all lyrics inline\n      const transposedLyrics = lyricsArray.map(line => {\n        const chordRegex = /\\[([^\\]]+)\\]/g;\n        return line.replace(chordRegex, (match, chord) => {\n          const transposedChord = transposeChord(chord, localTranspose);\n          return `[${transposedChord}]`;\n        });\n      });\n\n      const updatedSong = { \n        ...song, \n        lyrics: transposedLyrics,\n        chords: extractChords(transposedLyrics),\n        chordFingerings: chordFingerings\n      };\n      \n      await onUpdateSong(updatedSong);\n      \n      // Reset local transpose since it's now baked into the lyrics\n      setLocalTranspose(0);\n      setDirty(false);\n      \n      // Show success message\n      message.success('Transposed lyrics saved successfully!');\n    } catch (error) {\n      console.error('Failed to save transposed lyrics:', error);\n      message.error('Failed to save transposed lyrics. Please try again.');\n    } finally {\n      setIsSavingTranspose(false);\n    }\n  };\n\n  return (\n    <div className=\"song-detail\">      \n      {/* Chord section */}\n      <div className=\"chords-section\">\n        <div className=\"chords-header\" style={{ display: 'flex', alignItems: 'center', justifyContent: 'space-between', gap: '1rem' }}>\n          <div style={{ display: 'flex', alignItems: 'flex-end', gap: '1rem' }}>\n            <h3 style={{ margin: 0 }}>{song.title}</h3>\n            <i style={{ margin: 0 }}>{artist.name}</i>\n          </div>\n          <div style={{ display: 'flex', alignItems: 'center', gap: '1rem', flex: 1, justifyContent: 'center' }}>\n            <button\n              className=\"transpose-btn\"\n              title=\"Transpose Down\"\n              onClick={handleTransposeDown}\n              style={{ fontSize: '1.2em', padding: '0.2em 0.6em' }}\n            >\n              -\n            </button>\n            <span style={{ minWidth: 40, textAlign: 'center' }}>Transpose: {localTranspose > 0 ? `+${localTranspose}` : localTranspose} semitones</span>\n            <button\n              className=\"transpose-btn\"\n              title=\"Transpose Up\"\n              onClick={handleTransposeUp}\n              style={{ fontSize: '1.2em', padding: '0.2em 0.6em' }}\n            >\n              +\n            </button>\n            <button\n              className=\"save-transpose-btn\"\n              onClick={handleSaveTranspose}\n              disabled={!dirty || !editingEnabled || isSavingTranspose}\n              style={{ \n                marginLeft: '1em', \n                padding: '0.2em 0.8em', \n                opacity: dirty && editingEnabled && !isSavingTranspose ? 1 : 0.5,\n                display: 'flex',\n                alignItems: 'center',\n                gap: '0.5em'\n              }}\n            >\n              {isSavingTranspose && <Spin size=\"small\" />}\n              Save Transposed Lyrics\n            </button>\n          </div>\n          <div className=\"instrument-selector\" style={{ display: 'flex', alignItems: 'center', gap: '0.5rem', flexWrap: 'wrap' }}>\n            <label htmlFor=\"instrument-select\" style={{ marginRight: 0 }}>Instrument:</label>\n            <select\n              id=\"instrument-select\"\n              value={instrument}\n              onChange={(e) => dispatch(setInstrument(e.target.value))}\n              style={{ minWidth: 120 }}\n            >\n              <option value=\"ukulele\">Ukulele</option>\n              <option value=\"guitar\">Guitar</option>\n              <option value=\"piano\">Piano</option>\n              <option value=\"bassGuitar\">Bass Guitar</option>\n              <option value=\"bassUkulele\">Bass Ukulele</option>\n              <option value=\"baritoneUkulele\">Baritone Ukulele</option>\n            </select>\n          </div>\n        </div>\n        <div className=\"chord-container\">\n          {chords.map(chord => (\n            <div key={chord} className=\"chord-item\" onClick={() => onPinChord(chord)}>\n              <ChordChart\n                chord={chord}\n                instrument={instrument}\n              />\n            </div>\n          ))}\n        </div>\n      </div>\n      \n      {/* Lyrics section */}\n      <div className=\"lyrics-section\">\n        <div className=\"lyrics-container\">\n          <div style={{ display: 'flex', alignItems: 'flex-end', gap: '1rem', justifyContent: 'space-between' }}>\n            <div style={{ display: 'flex', alignItems: 'flex-end', gap: '1rem' }}>\n              <h3 style={{ margin: 0 }}>{song.title}</h3>\n              <i style={{ margin: 0 }}>{artist.name}</i>\n            </div>\n            {editingEnabled && !isEditingWholeSong && (\n              <div style={{ display: 'flex', gap: '0.5rem' }}>\n                <button \n                  className=\"edit-whole-song-btn\"\n                  onClick={handleEditWholeSong}\n                  style={{ \n                    padding: '0.5em 1em', \n                    fontSize: '0.9em',\n                    backgroundColor: '#4285f4',\n                    color: 'white',\n                    border: '1px solid #3367d6',\n                    borderRadius: '4px',\n                    cursor: 'pointer',\n                    display: 'flex',\n                    alignItems: 'center',\n                    gap: '0.5em',\n                    transition: 'background-color 0.2s ease'\n                  }}\n                  onMouseEnter={(e) => e.target.style.backgroundColor = '#3367d6'}\n                  onMouseLeave={(e) => e.target.style.backgroundColor = '#4285f4'}\n                >\n                  <FaEdit /> Edit Whole Song\n                </button>\n                <Popconfirm\n                  title={renderDeletePopconfirmTitle()}\n                  description={renderDeletePopconfirmContent()}\n                  onConfirm={handleDeleteConfirm}\n                  onOpenChange={handlePopconfirmOpen}\n                  okText={\n                    deleteCountdown > 0 ? (\n                      <div style={{ display: 'flex', alignItems: 'center', gap: '8px', position: 'relative' }}>\n                        <Box style={{ position: 'relative', display: 'inline-flex', alignItems: 'center' }}>\n                          <CircularProgress\n                            variant=\"determinate\"\n                            value={((3.0 - deleteCountdown) / 3.0) * 100}\n                            size={20}\n                            thickness={8}\n                            style={{ color: '#dc3545' }}\n                          />\n                          <Box\n                            style={{\n                              position: 'absolute',\n                              top: '50%',\n                              left: '50%',\n                              transform: 'translate(-50%, -50%)',\n                              color: '#dc3545',\n                              fontWeight: 'bold',\n                              fontSize: '10px'\n                            }}\n                          >\n                            {(deleteCountdown+1).toFixed()}\n                          </Box>\n                        </Box>\n                        Please wait...\n                      </div>\n                    ) : isDeletingSong ? (\n                      <div style={{ display: 'flex', alignItems: 'center', gap: '8px' }}>\n                        <Spin size=\"small\" />\n                        Deleting...\n                      </div>\n                    ) : (\n                      \"Delete\"\n                    )\n                  }\n                  cancelText={isDeletingSong ? null : \"Cancel\"}\n                  okType=\"danger\"\n                  showCancel={!isDeletingSong}\n                  okButtonProps={{\n                    disabled: deleteCountdown > 0 || isDeletingSong\n                  }}\n                  placement=\"bottomRight\"\n                >\n                  <button \n                    className=\"delete-song-btn\"\n                    style={{ \n                      padding: '0.5em 1em', \n                      fontSize: '0.9em',\n                      backgroundColor: '#dc3545',\n                      color: 'white',\n                      border: '1px solid #c82333',\n                      borderRadius: '4px',\n                      cursor: 'pointer',\n                      display: 'flex',\n                      alignItems: 'center',\n                      gap: '0.5em',\n                      transition: 'background-color 0.2s ease'\n                    }}\n                    onMouseEnter={(e) => e.target.style.backgroundColor = '#c82333'}\n                    onMouseLeave={(e) => e.target.style.backgroundColor = '#dc3545'}\n                  >\n                    <FaTrash /> Delete Song\n                  </button>\n                </Popconfirm>\n              </div>\n            )}\n            {isEditingWholeSong && (\n              <button \n                onClick={() => {\n                  try {\n                    const converted = convertLyrics(wholeSongText);\n                    setWholeSongText(converted);\n                    message.success('Lyrics converted successfully!');\n                  } catch (error) {\n                    console.error('Error converting lyrics:', error);\n                    message.error('Failed to convert lyrics format. Please check your input.');\n                  }\n                }}\n                style={{ \n                  padding: '0.5em 1em', \n                  fontSize: '0.9em',\n                  backgroundColor: '#5C6BC0',\n                  color: 'white',\n                  border: '1px solid #3F51B5',\n                  borderRadius: '4px',\n                  cursor: 'pointer',\n                  display: 'flex',\n                  alignItems: 'center',\n                  gap: '0.5em',\n                  marginLeft: '10px',\n                  transition: 'background-color 0.2s ease'\n                }}\n                onMouseEnter={(e) => e.target.style.backgroundColor = '#3F51B5'}\n                onMouseLeave={(e) => e.target.style.backgroundColor = '#5C6BC0'}\n              >\n                <FaClipboard /> Convert from Clipboard Format\n              </button>\n            )}\n          </div>\n          \n          {isEditingWholeSong ? (\n            <div className=\"whole-song-editor\" style={{ marginTop: '1rem' }}>\n              <textarea\n                value={wholeSongText}\n                onChange={(e) => setWholeSongText(e.target.value)}\n                rows={15}\n                style={{\n                  width: '100%',\n                  fontFamily: 'monospace',\n                  fontSize: '14px',\n                  padding: '10px',\n                  border: '1px solid #ccc',\n                  borderRadius: '4px'\n                }}\n                placeholder=\"Enter lyrics with [Chord] notation...\"\n              />\n              <div style={{ marginTop: '10px', display: 'flex', gap: '10px' }}>\n                <button \n                  onClick={handleSaveWholeSong}\n                  disabled={isSavingWholeSong}\n                  style={{ \n                    padding: '0.5em 1em',\n                    backgroundColor: isSavingWholeSong ? '#ccc' : '#4CAF50',\n                    color: 'white',\n                    border: 'none',\n                    borderRadius: '4px',\n                    cursor: isSavingWholeSong ? 'not-allowed' : 'pointer',\n                    display: 'flex',\n                    alignItems: 'center',\n                    gap: '0.5em'\n                  }}\n                >\n                  {isSavingWholeSong && <Spin size=\"small\" />}\n                  {isSavingWholeSong ? 'Saving...' : 'Save'}\n                </button>\n                <button \n                  onClick={handleCancelWholeSong}\n                  style={{ \n                    padding: '0.5em 1em',\n                    backgroundColor: '#f44336',\n                    color: 'white',\n                    border: 'none',\n                    borderRadius: '4px',\n                    cursor: 'pointer'\n                  }}\n                >\n                  Cancel\n                </button>\n              </div>\n            </div>\n          ) : (\n            <DndContext \n              sensors={sensors}\n              collisionDetection={closestCenter}\n              onDragEnd={handleDragEnd}\n            >\n              <SortableContext \n                items={(optimisticLyrics || lyricsArray).map((_, index) => index.toString())}\n                strategy={verticalListSortingStrategy}\n              >\n                {(optimisticLyrics || lyricsArray) && (optimisticLyrics || lyricsArray).map((line, index) => (\n                  <div key={index}>\n                    <SortableLyricLine\n                      id={index.toString()}\n                      line={line}\n                      index={index}\n                      editingLineIndex={editingLineIndex}\n                      editingEnabled={editingEnabled}\n                      hoveredLineIndex={hoveredLineIndex}\n                      setHoveredLineIndex={setHoveredLineIndex}\n                      handleEditLine={handleEditLine}\n                      handleInsertAfter={handleInsertAfter}\n                      handleDeleteLine={handleDeleteLine}\n                      handleSaveLine={handleSaveLine}\n                      handleCancelEdit={handleCancelEdit}\n                      renderLyricLine={renderLyricLine}\n                      isThisLinePending={pendingLineIndex === index}\n                      isDragDisabled={pendingDragOperation !== null || pendingDeleteLines.has(index) || pendingSaves.has(index)}\n                      isPendingDelete={pendingDeleteLines.has(index)}\n                      isPendingSave={pendingSaves.has(index)}\n                      isAddingLine={isAddingLine}\n                    />\n                    {/* Show line editor when inserting after this line */}\n                    {isAddingLine && insertAfterIndex === index && editingEnabled && (\n                      <LyricLineEditor\n                        line=\"\"\n                        onSave={(newLine) => handleSaveLine(newLine, index + 1)}\n                        onCancel={handleCancelEdit}\n                      />\n                    )}\n                  </div>\n                ))}\n              </SortableContext>\n              \n              {/* Add a button to add line at the end when the song is empty */}\n              {editingEnabled && lyricsArray.length === 0 && !isAddingLine && (\n                <button \n                  className=\"add-lyric-button\" \n                  onClick={() => handleInsertAfter(-1)}\n                  style={{\n                    padding: '10px 20px',\n                    border: '2px dashed #ccc',\n                    backgroundColor: 'transparent',\n                    borderRadius: '8px',\n                    cursor: 'pointer',\n                    fontSize: '16px',\n                    color: '#666',\n                    display: 'flex',\n                    alignItems: 'center',\n                    gap: '8px',\n                    margin: '20px 0',\n                    width: '100%',\n                    justifyContent: 'center'\n                  }}\n                >\n                  <FaPlus /> Add First Line\n                </button>\n              )}\n              \n              {/* Add line editor for empty song case */}\n              {isAddingLine && insertAfterIndex === -1 && editingEnabled && (\n                <LyricLineEditor\n                  line=\"\"\n                  onSave={(newLine) => handleSaveLine(newLine, 0)}\n                  onCancel={handleCancelEdit}\n                />\n              )}\n            </DndContext>\n          )}\n        </div>\n      </div>\n    </div>\n  );\n};\n\n// Wrap component with App provider for message API\nconst SongDetailWithProvider = (props) => (\n  <App>\n    <SongDetail {...props} />\n  </App>\n);\n\nexport default SongDetailWithProvider;\n","/**\n * Converts lyrics from a clipboard format (where chords are on separate lines)\n * to an inline format with chords in square brackets.\n * @param {string} input - The input lyrics text\n * @returns {string} The converted lyrics with inline chord notation\n */\nfunction convertLyrics(input) {\n  // First, remove any existing [tag] notation from the entire input\n  let cleanedInput = input.replace(/\\[.*?\\]/g, '');\n  \n  const lines = cleanedInput.split('\\n');\n  const convertedLines = [];\n  \n  let i = 0;\n  while (i < lines.length) {\n    let line = lines[i].trim();\n    \n    // Skip section headers, replace with single blank line\n    if (/^\\[.*?(?::.+)?\\]$/.test(line)) {\n      if (convertedLines.length === 0 || convertedLines[convertedLines.length - 1] !== '') {\n        convertedLines.push('');\n      }\n      i++;\n      continue;\n    }\n    \n    // Skip empty lines, maintaining only single blank lines between sections\n    if (!line) {\n      if (convertedLines.length === 0 || convertedLines[convertedLines.length - 1] !== '') {\n        convertedLines.push('');\n      }\n      i++;\n      continue;\n    }\n\n    // Replace N.C. (No Chord) with 4 space characters\n    line = line.replace(/N\\.C\\./g, '    ');\n\n    // Check if this is a chord line\n    // Extract actual chord names and see if line consists only of chords and spaces\n    // Comprehensive pattern for chord recognition including extensions and slashes\n    const actualChordPattern = /[A-G][#b]?(?:maj|min|m|sus|aug|dim|add)?[0-9]*(?:[#b][0-9]+)*(?:\\/[A-G][#b]?)?/g;\n    const chordMatches = line.match(actualChordPattern) || [];\n    const lineWithoutChords = line.replace(actualChordPattern, '').trim();\n    // A chord line should have chords and only whitespace left after removing chords\n    const isChordLine = chordMatches.length > 0 && (lineWithoutChords === '' || /^\\s*$/.test(lineWithoutChords));\n\n    if (isChordLine) {\n      const chordPattern = /[A-G][#b]?(?:maj|min|m|sus|aug|dim|add)?[0-9]*(?:[#b][0-9]+)*(?:\\/[A-G][#b]?)?/g;\n      const chordPositions = [];\n      let match;\n      \n      // If the line contains only a single chord (after removing spaces)\n      const trimmedLine = line.replace(/\\s+/g, ' ').trim();\n      const singleChordMatch = trimmedLine.match(/^[A-G][#b]?(?:maj|min|m|sus|aug|dim|add)?[0-9]*(?:[#b][0-9]+)*(?:\\/[A-G][#b]?)?$/);\n      if (singleChordMatch) {\n        // Look ahead to the next non-empty line\n        let j = i + 1;\n        while (j < lines.length && !lines[j].trim()) {\n          j++;\n        }\n        if (j < lines.length) {\n          // Combine the chord with the next line\n          convertedLines.push(`[${singleChordMatch[0]}]${lines[j].trim()}`);\n          i = j + 1;\n          continue;\n        }\n      }\n      \n      // Multiple chords on one line - use original line to preserve spacing\n      while ((match = chordPattern.exec(line)) !== null) {\n        chordPositions.push({\n          chord: match[0],\n          position: match.index\n        });\n      }\n\n      // Look ahead to the next non-empty line\n      let j = i + 1;\n      while (j < lines.length && !lines[j].trim()) {\n        j++;\n      }\n\n      if (j < lines.length) {\n        const lyricLine = lines[j].trim();\n        const chars = lyricLine.split('');\n        const insertions = [];\n        \n        chordPositions.forEach(({chord, position}) => {\n          let insertPos = position;\n          while (insertPos < lyricLine.length && /\\s/.test(lyricLine[insertPos])) {\n            insertPos++;\n          }\n          insertions.push({\n            pos: insertPos,\n            text: `[${chord}]`\n          });\n        });\n\n        insertions.sort((a, b) => b.pos - a.pos);\n        insertions.forEach(({pos, text}) => {\n          chars.splice(pos, 0, text);\n        });\n        convertedLines.push(chars.join(''));\n        i = j + 1;\n      } else {\n        // No lyrics line found, just output the chord\n        convertedLines.push(`[${line.trim()}]`);\n        i++;\n      }\n    } else {\n      // Regular lyric line without chords\n      convertedLines.push(line);\n      i++;\n    }\n  }\n\n  // Clean up consecutive blank lines at start and end\n  while (convertedLines[0] === '') convertedLines.shift();\n  while (convertedLines[convertedLines.length - 1] === '') convertedLines.pop();\n\n  return convertedLines.join('\\n');\n}\n\nexport { convertLyrics };\n","import React, { useMemo } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport FolderTree from 'react-folder-tree';\nimport 'react-folder-tree/dist/style.css';\nimport {\n  addSong,\n  addAlbum, \n  addArtist,\n  updateSong,\n  updateArtist,\n  updateAlbum,\n  deleteSong,\n  deleteArtist,\n  deleteAlbum,\n  selectIsGoogleDriveConnected\n} from '../../../store/songsSlice';\n\nfunction SongListTest({ library, selectedSong, editingEnabled, onSelectSong }) {\n  const dispatch = useDispatch();\n  const isGoogleDriveConnected = useSelector(selectIsGoogleDriveConnected);\n\n  // Transform library data to react-folder-tree format\n  const treeData = useMemo(() => {\n    if (!library || !library.artists) return { name: 'Music Library', isOpen: true, children: [] };\n    \n    const tree = {\n      name: 'Music Library',\n      isOpen: true,\n      children: []\n    };\n\n    library.artists.forEach(artist => {\n      const artistNode = {\n        name: artist.name,\n        isOpen: true,\n        type: 'artist',\n        children: []\n      };\n\n      if (artist.albums) {\n        artist.albums.forEach(album => {\n          const albumNode = {\n            name: album.title,\n            isOpen: true,\n            type: 'album',\n            artistName: artist.name,\n            children: []\n          };\n\n          if (album.songs) {\n            album.songs.forEach(song => {\n              // Check if this song is currently selected\n              const isSelected = selectedSong && \n                selectedSong.title === song.title && \n                selectedSong.artist?.name === artist.name && \n                selectedSong.album?.title === album.title;\n              \n              albumNode.children.push({\n                name: song.title,\n                type: 'song',\n                artistName: artist.name,\n                albumTitle: album.title,\n                songData: song,\n                isSelected: isSelected\n              });\n            });\n          }\n\n          artistNode.children.push(albumNode);\n        });\n      }\n\n      tree.children.push(artistNode);\n    });\n\n    return tree;\n  }, [library, selectedSong]);\n\n  const handleTreeStateChange = (newTreeState, event) => {\n    console.log('Tree state changed:', { newTreeState, event });\n  };\n\n  const handleNameClick = ({ defaultOnClick, nodeData }) => {\n    console.log('Name clicked:', { nodeData });\n    \n    // Handle song selection - only select if this is actually a song node\n    if (nodeData && nodeData.type === 'song' && onSelectSong) {\n      console.log('Selecting song:', nodeData.songData.title);\n      onSelectSong(nodeData.songData, nodeData.artistName, nodeData.albumTitle);\n    } else {\n      // For non-song nodes, use default behavior (expand/collapse)\n      defaultOnClick();\n    }\n  };\n\n  const handleNameChange = async (prevName, name, nodeData) => {\n    if (!editingEnabled || !name.trim()) return;\n\n    try {\n      if (nodeData.type === 'artist') {\n        await dispatch(updateArtist({\n          oldArtistName: prevName,\n          newArtistName: name.trim(),\n          isGoogleDriveConnected\n        })).unwrap();\n      } else if (nodeData.type === 'album') {\n        await dispatch(updateAlbum({\n          artistName: nodeData.artistName,\n          oldAlbumTitle: prevName,\n          newAlbumTitle: name.trim(),\n          isGoogleDriveConnected\n        })).unwrap();\n      } else if (nodeData.type === 'song') {\n        await dispatch(updateSong({\n          artistName: nodeData.artistName,\n          albumTitle: nodeData.albumTitle,\n          songTitle: prevName,\n          updatedSongData: { title: name.trim() },\n          isGoogleDriveConnected\n        })).unwrap();\n      }\n    } catch (error) {\n      console.error('Failed to update:', error);\n    }\n  };\n\n  const handleAddNode = async (name, parentNodeData) => {\n    if (!editingEnabled || !name.trim()) return;\n\n    try {\n      if (!parentNodeData) {\n        // Adding new artist at root level\n        await dispatch(addArtist({\n          artistName: name.trim(),\n          isGoogleDriveConnected\n        })).unwrap();\n      } else if (parentNodeData.type === 'artist') {\n        // Adding new album to artist\n        await dispatch(addAlbum({\n          artistName: parentNodeData.name,\n          albumTitle: name.trim(),\n          isGoogleDriveConnected\n        })).unwrap();\n      } else if (parentNodeData.type === 'album') {\n        // Adding new song to album\n        await dispatch(addSong({\n          artistName: parentNodeData.artistName,\n          albumTitle: parentNodeData.name,\n          songData: {\n            title: name.trim(),\n            lyrics: '',\n            notes: ''\n          },\n          isGoogleDriveConnected\n        })).unwrap();\n      }\n    } catch (error) {\n      console.error('Failed to add:', error);\n    }\n  };\n\n  const handleDeleteNode = async (nodeData) => {\n    if (!editingEnabled) return;\n\n    try {\n      if (nodeData.type === 'artist') {\n        await dispatch(deleteArtist({\n          artistName: nodeData.name,\n          isGoogleDriveConnected\n        })).unwrap();\n      } else if (nodeData.type === 'album') {\n        await dispatch(deleteAlbum({\n          artistName: nodeData.artistName,\n          albumTitle: nodeData.name,\n          isGoogleDriveConnected\n        })).unwrap();\n      } else if (nodeData.type === 'song') {\n        await dispatch(deleteSong({\n          artistName: nodeData.artistName,\n          albumTitle: nodeData.albumTitle,\n          songTitle: nodeData.name,\n          isGoogleDriveConnected\n        })).unwrap();\n      }\n    } catch (error) {\n      console.error('Failed to delete:', error);\n    }\n  };\n\n  return (\n    <div>\n      <h3>Song Library</h3>\n      <div style={{ \n        border: '1px solid #ddd', \n        borderRadius: '4px', \n        padding: '10px',\n        maxHeight: '500px',\n        overflowY: 'auto'\n      }}>\n        <style>{`\n          .FolderTree .TreeNode[data-selected=\"true\"] {\n            background-color: #e6f7ff !important;\n            border-left: 3px solid #1890ff !important;\n            padding-left: 7px !important;\n          }\n          .FolderTree .TreeNode[data-selected=\"true\"] .EditableName .displayName {\n            color: #1890ff !important;\n            font-weight: 500 !important;\n          }\n        `}</style>\n        <FolderTree\n          data={treeData}\n          onChange={handleTreeStateChange}\n          onNameClick={handleNameClick}\n          onNameChange={editingEnabled ? handleNameChange : undefined}\n          onAddNode={editingEnabled ? handleAddNode : undefined}\n          onDeleteNode={editingEnabled ? handleDeleteNode : undefined}\n          showCheckbox={false}\n          readOnly={!editingEnabled}\n        />\n      </div>\n    </div>\n  );\n}\n\nexport default SongListTest;\n","import React, { useState, useEffect } from 'react';\nimport { useGoogleLogin } from '@react-oauth/google';\nimport './GoogleSignInButton.css';\n\n/* global google */\n\nconst GoogleSignInButton = ({ \n  onSuccess, \n  onError, \n  disabled = false, \n  isSignedIn = false, \n  onSignOut,\n  loading = false,\n  userInfo = null // { name, picture, email }\n}) => {\n  const [isLoading, setIsLoading] = useState(loading);\n\n  // Configure popup window size for Google OAuth\n  useEffect(() => {\n    const originalOpen = window.open;\n    \n    window.open = function(...args) {\n      const [url, name, features] = args;\n      \n      // Check if this is a Google OAuth popup\n      if (typeof url === 'string' && (\n        url.includes('accounts.google.com') || \n        url.includes('oauth') ||\n        url.includes('googleapis.com') ||\n        name?.includes('oauth') ||\n        features?.includes('popup')\n      )) {\n        const width = 600;\n        const height = 700;\n        const left = Math.round((window.screen.width - width) / 2);\n        const top = Math.round((window.screen.height - height) / 2);\n        \n        const customFeatures = `width=${width},height=${height},left=${left},top=${top},scrollbars=yes,resizable=yes,toolbar=no,menubar=no,location=no,status=no`;\n        \n        console.log('Opening Google OAuth popup with custom dimensions:', { width, height, left, top });\n        return originalOpen.call(this, url, name || 'google_oauth', customFeatures);\n      }\n      \n      // Also resize any suspiciously small popups\n      if (features && features.includes('width=')) {\n        const widthMatch = features.match(/width=(\\d+)/);\n        if (widthMatch && parseInt(widthMatch[1]) < 400) {\n          const width = 600;\n          const height = 700;\n          const left = Math.round((window.screen.width - width) / 2);\n          const top = Math.round((window.screen.height - height) / 2);\n          \n          const customFeatures = `width=${width},height=${height},left=${left},top=${top},scrollbars=yes,resizable=yes,toolbar=no,menubar=no,location=no,status=no`;\n          \n          console.log('Resizing small popup to larger dimensions:', { width, height });\n          return originalOpen.call(this, url, name, customFeatures);\n        }\n      }\n      \n      return originalOpen.apply(this, args);\n    };\n\n    return () => {\n      window.open = originalOpen;\n    };\n  }, []);\n\n  const login = useGoogleLogin({\n    onSuccess: (tokenResponse) => {\n      console.log('Google login successful:', tokenResponse);\n      setIsLoading(false);\n      if (onSuccess) {\n        onSuccess(tokenResponse);\n      }\n    },\n    onError: (error) => {\n      console.error('Google login failed:', error);\n      setIsLoading(false);\n      if (onError) {\n        onError(error);\n      }\n    },\n    scope: 'https://www.googleapis.com/auth/drive.file',\n    flow: 'implicit', // Use implicit flow to get access token directly\n    // Try to configure popup dimensions\n    ux_mode: 'popup',\n    width: 600,\n    height: 700\n  });\n\n  const handleClick = () => {\n    if (isSignedIn && onSignOut) {\n      onSignOut();\n    } else {\n      setIsLoading(true);\n      console.log('About to trigger Google login...');\n      login();\n    }\n  };\n\n  const GoogleIcon = () => (\n    <svg\n      className=\"google-signin-icon\"\n      viewBox=\"0 0 24 24\"\n      width=\"18\"\n      height=\"18\"\n    >\n      <path\n        fill=\"currentColor\"\n        d=\"M22.56 12.25c0-.78-.07-1.53-.2-2.25H12v4.26h5.92c-.26 1.37-1.04 2.53-2.21 3.31v2.77h3.57c2.08-1.92 3.28-4.74 3.28-8.09z\"\n      />\n      <path\n        fill=\"currentColor\"\n        d=\"M12 23c2.97 0 5.46-.98 7.28-2.66l-3.57-2.77c-.98.66-2.23 1.06-3.71 1.06-2.86 0-5.29-1.93-6.16-4.53H2.18v2.84C3.99 20.53 7.7 23 12 23z\"\n      />\n      <path\n        fill=\"currentColor\"\n        d=\"M5.84 14.09c-.22-.66-.35-1.36-.35-2.09s.13-1.43.35-2.09V7.07H2.18C1.43 8.55 1 10.22 1 12s.43 3.45 1.18 4.93l2.85-2.22.81-.62z\"\n      />\n      <path\n        fill=\"currentColor\"\n        d=\"M12 5.38c1.62 0 3.06.56 4.21 1.64l3.15-3.15C17.45 2.09 14.97 1 12 1 7.7 1 3.99 3.47 2.18 7.07l3.66 2.84c.87-2.6 3.3-4.53 6.16-4.53z\"\n      />\n    </svg>\n  );\n\n  return (\n    <div className=\"google-signin-container\">\n      <button\n        className={`google-signin-button ${\n          isSignedIn ? 'google-signout-button' : ''\n        } ${disabled ? 'disabled' : ''} ${isLoading ? 'google-signin-loading' : ''}`}\n        onClick={handleClick}\n        disabled={disabled || isLoading}\n      >\n        {isSignedIn && userInfo ? (\n          <>\n            {userInfo.picture ? (\n              <img \n                src={userInfo.picture} \n                alt={userInfo.name ? userInfo.name.charAt(0).toUpperCase() : '👤'}\n                className=\"user-avatar\"\n                onError={(e) => {\n                  console.warn('Failed to load user avatar:', userInfo.picture);\n                  e.target.style.display = 'none';\n                  e.target.nextElementSibling.style.display = 'inline-flex';\n                }}\n              />\n            ) : null}\n            {!userInfo.picture && (\n              <div className=\"user-avatar-fallback\">\n                {userInfo.name ? userInfo.name.charAt(0).toUpperCase() : '👤'}\n              </div>\n            )}\n            <div className=\"user-info\">\n              <span className=\"user-name\">\n                {userInfo.name || userInfo.email}\n              </span>\n              <span className=\"logout-hint\">\n                Click to logout\n              </span>\n            </div>\n          </>\n        ) : (\n          <>\n            <GoogleIcon />\n            <span className=\"google-signin-text\">\n              {isLoading \n                ? 'Signing in' \n                : 'Sign in with Google'\n              }\n            </span>\n          </>\n        )}\n      </button>\n    </div>\n  );\n};\n\nexport default GoogleSignInButton;\n","import React, { useState, useEffect } from 'react';\nimport { Card, Button, Space, Typography, Alert, Collapse, Tag } from 'antd';\nimport { ClockCircleOutlined, ExperimentOutlined, WarningOutlined, InfoCircleOutlined } from '@ant-design/icons';\n\nconst { Title, Text, Paragraph } = Typography;\nconst { Panel } = Collapse;\n\nconst SessionTestingTools = ({ googleDriveService, enabled = false }) => {\n  // Initialize all hooks first (React requirement)\n  const [sessionInfo, setSessionInfo] = useState({});\n  const [logs, setLogs] = useState([]);\n  const [isExpiring, setIsExpiring] = useState(false);\n  const [countdown, setCountdown] = useState(0);\n\n  // Session storage keys (matching GoogleDriveServiceModern)\n  const SESSION_KEYS = {\n    ACCESS_TOKEN: 'googleDrive_accessToken',\n    USER_EMAIL: 'googleDrive_userEmail',\n    USER_NAME: 'googleDrive_userName',\n    USER_PICTURE: 'googleDrive_userPicture',\n    IS_SIGNED_IN: 'googleDrive_isSignedIn',\n    TOKEN_EXPIRY: 'googleDrive_tokenExpiry'\n  };\n\n  const addLog = (message, type = 'info') => {\n    const timestamp = new Date().toLocaleString();\n    const newLog = {\n      id: Date.now(),\n      timestamp,\n      message,\n      type\n    };\n    setLogs(prev => [newLog, ...prev.slice(0, 19)]); // Keep last 20 logs\n  };\n\n  const updateSessionInfo = () => {\n    const token = localStorage.getItem(SESSION_KEYS.ACCESS_TOKEN);\n    const expiry = localStorage.getItem(SESSION_KEYS.TOKEN_EXPIRY);\n    const email = localStorage.getItem(SESSION_KEYS.USER_EMAIL);\n    const isSignedIn = localStorage.getItem(SESSION_KEYS.IS_SIGNED_IN);\n\n    const info = {\n      hasToken: !!token,\n      tokenPreview: token ? token.substring(0, 20) + '...' : 'None',\n      email: email || 'None',\n      isSignedIn: isSignedIn === 'true',\n      expiry: expiry ? parseInt(expiry) : null,\n      isExpired: false,\n      timeRemaining: null\n    };\n\n    if (info.expiry) {\n      const now = Date.now();\n      info.isExpired = now > info.expiry;\n      info.timeRemaining = info.expiry - now;\n    }\n\n    setSessionInfo(info);\n  };\n\n  useEffect(() => {\n    if (enabled) {\n      updateSessionInfo();\n      const interval = setInterval(updateSessionInfo, 2000);\n      return () => clearInterval(interval);\n    }\n  }, [enabled]);\n\n  useEffect(() => {\n    if (!enabled) return;\n    \n    let countdownInterval;\n    if (isExpiring && countdown > 0) {\n      countdownInterval = setInterval(() => {\n        setCountdown(prev => {\n          if (prev <= 1) {\n            setIsExpiring(false);\n            addLog('💥 Session has expired!', 'error');\n            updateSessionInfo();\n            return 0;\n          }\n          addLog(`Session expires in ${prev - 1} seconds...`, 'warning');\n          return prev - 1;\n        });\n      }, 1000);\n    }\n    return () => {\n      if (countdownInterval) clearInterval(countdownInterval);\n    };\n  }, [isExpiring, countdown, enabled]);\n\n  // Don't render anything if not enabled\n  if (!enabled) {\n    return null;\n  }\n\n  const expireSessionNow = () => {\n    const pastTime = Date.now() - (60 * 60 * 1000); // 1 hour ago\n    localStorage.setItem(SESSION_KEYS.TOKEN_EXPIRY, pastTime.toString());\n    addLog('🕐 Session manually expired (set to 1 hour ago)', 'warning');\n    updateSessionInfo();\n  };\n\n  const expireSessionIn5Seconds = () => {\n    const futureTime = Date.now() + 5000; // 5 seconds from now\n    localStorage.setItem(SESSION_KEYS.TOKEN_EXPIRY, futureTime.toString());\n    setIsExpiring(true);\n    setCountdown(5);\n    addLog('⏱️ Session will expire in 5 seconds!', 'warning');\n    updateSessionInfo();\n  };\n\n  const extendSession = () => {\n    const futureTime = Date.now() + (60 * 60 * 1000); // 1 hour from now\n    localStorage.setItem(SESSION_KEYS.TOKEN_EXPIRY, futureTime.toString());\n    addLog('⏰ Session extended by 1 hour', 'success');\n    updateSessionInfo();\n  };\n\n  const clearSession = () => {\n    Object.values(SESSION_KEYS).forEach(key => {\n      localStorage.removeItem(key);\n    });\n    addLog('🗑️ Session cleared completely', 'info');\n    updateSessionInfo();\n  };\n\n  const testTokenValidity = async () => {\n    if (!googleDriveService) {\n      addLog('❌ Google Drive service not available', 'error');\n      return;\n    }\n\n    // First check if session is expired according to our stored expiry time\n    if (sessionInfo.isExpired) {\n      addLog('❌ Session is expired according to stored expiry time!', 'error');\n      addLog('This should trigger a re-authentication prompt when using the service.', 'warning');\n      return;\n    }\n\n    if (!sessionInfo.hasToken) {\n      addLog('No access token to test', 'warning');\n      return;\n    }\n\n    try {\n      addLog('Testing token with Google Drive API...', 'info');\n      \n      // Try to call a simple Google Drive API method\n      const result = await googleDriveService.testConnection();\n      if (result.success) {\n        addLog(`✓ Token is valid. Connected as: ${result.userEmail}`, 'success');\n      } else {\n        addLog(`Token test failed: ${result.error}`, 'error');\n      }\n    } catch (error) {\n      addLog(`Token test failed: ${error.message}`, 'error');\n      \n      // Check for specific 401 error (expired token)\n      if (error.message.includes('401') || error.message.includes('UNAUTHENTICATED')) {\n        addLog('❌ 401 UNAUTHENTICATED error detected!', 'error');\n        \n        if (error.message.includes('Expected OAuth 2 access token')) {\n          addLog('🎯 This is the exact error pattern we fixed!', 'error');\n          addLog('The service should now detect this and trigger re-authentication.', 'info');\n        }\n      }\n    }\n  };\n\n  const simulateUserAction = async () => {\n    addLog('🎭 Simulating user action that would trigger authentication check...', 'info');\n    \n    // Check if session is expired\n    if (sessionInfo.isExpired) {\n      addLog('❌ Session expired detected! In real app, this would:', 'error');\n      addLog('1. Clear the expired session', 'info');\n      addLog('2. Show login prompt to user', 'info');\n      addLog('3. After login, retry the original action', 'info');\n      \n      // Simulate what our service would do\n      addLog('Clearing expired session...', 'warning');\n      clearSession();\n      addLog('🔄 User would now see the Google Sign-In button', 'info');\n      return;\n    }\n    \n    // If not expired, try to test the service\n    await testTokenValidity();\n  };\n\n  const loadLibraryTest = async () => {\n    if (!googleDriveService) {\n      addLog('❌ Google Drive service not available', 'error');\n      return;\n    }\n\n    try {\n      addLog('Testing library loading...', 'info');\n      const result = await googleDriveService.loadLibrary();\n      if (result.success) {\n        addLog(`✓ Library loaded successfully`, 'success');\n      } else {\n        addLog(`Library loading failed: ${result.error}`, 'error');\n      }\n    } catch (error) {\n      addLog(`Library loading failed: ${error.message}`, 'error');\n      \n      if (error.message.includes('401') || error.message.includes('UNAUTHENTICATED')) {\n        addLog('❌ Authentication error during library load!', 'error');\n        addLog('In the real app, this would trigger automatic re-authentication.', 'info');\n      }\n    }\n  };\n\n  const clearLogs = () => {\n    setLogs([]);\n  };\n\n  const formatTimeRemaining = (timeMs) => {\n    if (!timeMs || timeMs <= 0) return 'Expired';\n    const minutes = Math.floor(timeMs / (1000 * 60));\n    const seconds = Math.floor((timeMs % (1000 * 60)) / 1000);\n    return `${minutes}m ${seconds}s`;\n  };\n\n  const getLogTypeColor = (type) => {\n    switch (type) {\n      case 'error': return '#ff4d4f';\n      case 'warning': return '#faad14';\n      case 'success': return '#52c41a';\n      default: return '#1890ff';\n    }\n  };\n\n  return (\n    <Card \n      title={\n        <Space>\n          <ExperimentOutlined />\n          <span>Session Testing Tools</span>\n          <Tag color=\"orange\">DEV ONLY</Tag>\n        </Space>\n      }\n      style={{ marginBottom: 16 }}\n    >\n      <Collapse ghost>\n        <Panel header=\"🔧 Session Testing Controls\" key=\"1\">\n          <Space direction=\"vertical\" style={{ width: '100%' }}>\n            \n            {/* Session Info */}\n            <Card size=\"small\" title=\"Current Session Status\">\n              <Space direction=\"vertical\" style={{ width: '100%' }}>\n                <Text>\n                  <strong>Token:</strong> {sessionInfo.tokenPreview}\n                </Text>\n                <Text>\n                  <strong>Email:</strong> {sessionInfo.email}\n                </Text>\n                <Text>\n                  <strong>Signed In:</strong> {sessionInfo.isSignedIn ? '✅ Yes' : '❌ No'}\n                </Text>\n                {sessionInfo.expiry && (\n                  <>\n                    <Text>\n                      <strong>Expiry:</strong> {new Date(sessionInfo.expiry).toLocaleString()}\n                    </Text>\n                    <Text>\n                      <strong>Status:</strong> {' '}\n                      {sessionInfo.isExpired ? (\n                        <Tag color=\"red\">❌ EXPIRED</Tag>\n                      ) : (\n                        <Tag color=\"green\">✅ Valid</Tag>\n                      )}\n                    </Text>\n                    {!sessionInfo.isExpired && (\n                      <Text>\n                        <strong>Time remaining:</strong> {formatTimeRemaining(sessionInfo.timeRemaining)}\n                      </Text>\n                    )}\n                  </>\n                )}\n                {isExpiring && countdown > 0 && (\n                  <Alert\n                    message={`Session expires in ${countdown} seconds!`}\n                    type=\"warning\"\n                    showIcon\n                    icon={<ClockCircleOutlined />}\n                  />\n                )}\n              </Space>\n            </Card>\n\n            {/* Session Manipulation Controls */}\n            <Card size=\"small\" title=\"Session Manipulation\">\n              <Space wrap>\n                <Button \n                  type=\"primary\" \n                  danger\n                  icon={<ClockCircleOutlined />}\n                  onClick={expireSessionNow}\n                >\n                  Expire Now\n                </Button>\n                <Button \n                  type=\"default\"\n                  icon={<WarningOutlined />}\n                  onClick={expireSessionIn5Seconds}\n                >\n                  Expire in 5s\n                </Button>\n                <Button \n                  type=\"default\"\n                  onClick={extendSession}\n                >\n                  Extend (+1h)\n                </Button>\n                <Button \n                  type=\"default\"\n                  onClick={clearSession}\n                >\n                  Clear Session\n                </Button>\n              </Space>\n            </Card>\n\n            {/* API Testing Controls */}\n            <Card size=\"small\" title=\"API Testing\">\n              <Space wrap>\n                <Button \n                  type=\"default\"\n                  icon={<InfoCircleOutlined />}\n                  onClick={testTokenValidity}\n                >\n                  Test Token\n                </Button>\n                <Button \n                  type=\"default\"\n                  onClick={loadLibraryTest}\n                >\n                  Test Library Load\n                </Button>\n                <Button \n                  type=\"primary\"\n                  onClick={simulateUserAction}\n                >\n                  Simulate User Action\n                </Button>\n              </Space>\n            </Card>\n\n            {/* Debug Log */}\n            <Card \n              size=\"small\" \n              title=\"Debug Log\"\n              extra={\n                <Button size=\"small\" onClick={clearLogs}>\n                  Clear\n                </Button>\n              }\n            >\n              <div style={{ maxHeight: 300, overflowY: 'auto' }}>\n                {logs.length === 0 ? (\n                  <Text type=\"secondary\">No logs yet...</Text>\n                ) : (\n                  logs.map(log => (\n                    <div \n                      key={log.id} \n                      style={{ \n                        marginBottom: 8, \n                        padding: 8, \n                        borderLeft: `3px solid ${getLogTypeColor(log.type)}`,\n                        backgroundColor: '#fafafa',\n                        fontSize: '12px'\n                      }}\n                    >\n                      <Text type=\"secondary\">[{log.timestamp}]</Text>{' '}\n                      <Text>{log.message}</Text>\n                    </div>\n                  ))\n                )}\n              </div>\n            </Card>\n\n            <Alert\n              message=\"Instructions\"\n              description={\n                <div>\n                  <Paragraph style={{ marginBottom: 8 }}>\n                    1. <strong>Expire Session:</strong> Use \"Expire Now\" or \"Expire in 5s\" to test expired session detection\n                  </Paragraph>\n                  <Paragraph style={{ marginBottom: 8 }}>\n                    2. <strong>Test API:</strong> Use \"Test Token\" to check if expired sessions trigger 401 errors\n                  </Paragraph>\n                  <Paragraph style={{ marginBottom: 0 }}>\n                    3. <strong>Simulate User Action:</strong> Tests the complete flow of expired session detection and cleanup\n                  </Paragraph>\n                </div>\n              }\n              type=\"info\"\n              showIcon\n            />\n          </Space>\n        </Panel>\n      </Collapse>\n    </Card>\n  );\n};\n\nexport default SessionTestingTools;\n","// Simplified SongTabsApp.js using TreeSelect and modal for adding songs with Redux state management\nimport React, { useEffect, useCallback } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { pinChord, loadChordFingerings } from '../../store/chordsSlice';\nimport { \n  loadLibraryFromDrive, \n  updateSong, \n  setSelectedSong, \n  setGoogleDriveConnection,\n  setUserInfo,\n  setEditingEnabled,\n  clearError,\n  loadMockLibrary\n} from '../../store/songsSlice';\nimport SongDetail from './components/SongDetail';\nimport SongListTest from './components/SongListTest';\nimport GoogleSignInButton from './components/GoogleSignInButton';\nimport SessionTestingTools from './components/SessionTestingTools';\nimport GoogleDriveServiceModern from './services/GoogleDriveServiceModern';\nimport './styles/SongTabsApp.css';\nimport { Switch, Button, Spin, App } from 'antd';\nimport { FaUnlock, FaLock } from 'react-icons/fa';\n\nconst SongTabsApp = () => {\n  const { message } = App.useApp();\n  \n  // Developer flag to enable session testing tools\n  // Set this to true when you need to test session expiry scenarios\n  // The testing tools will only appear in development mode when this flag is true\n  const ENABLE_SESSION_TESTING = false; // Change to true to enable testing tools\n  \n  // Redux state\n  const dispatch = useDispatch();\n  const {\n    library,\n    selectedSong,\n    isGoogleDriveConnected,\n    userInfo,\n    isLoading,\n    editingEnabled,\n    error\n  } = useSelector(state => state.songs);\n  \n  // Local component state for UI interactions only\n  // Note: Modal removed - using inline editing with RichTreeView\n\n  // Helper function to count total songs in library\n  const getTotalSongsCount = useCallback(() => {\n    if (!library || !library.artists) return 0;\n    return library.artists.reduce((total, artist) => {\n      return total + artist.albums.reduce((albumTotal, album) => {\n        return albumTotal + (album.songs ? album.songs.length : 0);\n      }, 0);\n    }, 0);\n  }, [library]);\n\n  // Redux-based handlers\n  const handleLoadMockLibrary = useCallback(() => {\n    dispatch(loadMockLibrary());\n  }, [dispatch]);\n\n  const handleLoadLibraryFromDrive = useCallback(async () => {\n    try {\n      await dispatch(loadLibraryFromDrive()).unwrap();\n      console.log('Library loaded from Google Drive');\n    } catch (error) {\n      console.error('Failed to load library from Google Drive:', error);\n      \n      // Check if this is an authentication error\n      if (isAuthError(error)) {\n        message.error('Your Google Drive session has expired. Please sign in again.');\n        dispatch(setGoogleDriveConnection(false));\n        dispatch(setUserInfo(null));\n      } else {\n        message.error('Failed to load library from Google Drive');\n      }\n      \n      // Fall back to mock library\n      dispatch(loadMockLibrary());\n    }\n  }, [dispatch, message]);\n\n  // Simplified song update handler using Redux\n  const handleSongUpdate = async (updatedSongData) => {\n    if (!selectedSong) return;\n    \n    try {\n      const artistName = selectedSong.artist.name;\n      const albumTitle = selectedSong.album.title; // Use consistent property name\n      const songTitle = selectedSong.title;\n      \n      await dispatch(updateSong({\n        artistName,\n        albumTitle,\n        songTitle,\n        updatedSongData,\n        isGoogleDriveConnected\n      })).unwrap();\n      \n      message.success('Song updated successfully');\n    } catch (error) {\n      console.error('Failed to update song:', error);\n      \n      // Check if this is an authentication error\n      if (isAuthError(error)) {\n        // Update UI state to reflect that user is no longer authenticated\n        dispatch(setGoogleDriveConnection(false));\n        dispatch(setUserInfo(null));\n        \n        message.error('Your Google Drive session has expired. Please sign in again to save changes.');\n      } else {\n        message.error('Failed to save song changes. Please try again.');\n      }\n    }\n  };\n\n  // Initialize Google Drive API\n  useEffect(() => {\n    const initGoogleDrive = async () => {\n      try {\n        const CLIENT_ID = process.env.REACT_APP_GOOGLE_CLIENT_ID;\n        if (!CLIENT_ID) {\n          throw new Error('Google Client ID not found in environment variables');\n        }\n\n        await GoogleDriveServiceModern.initialize(CLIENT_ID);\n        const signInStatus = GoogleDriveServiceModern.getSignInStatus();\n        \n        if (signInStatus.isSignedIn) {\n          dispatch(setGoogleDriveConnection(true));\n          dispatch(setUserInfo({\n            email: signInStatus.userEmail,\n            name: signInStatus.userName,\n            picture: signInStatus.userPicture\n          }));\n          console.log('Restored user session for:', signInStatus.userEmail);\n          await handleLoadLibraryFromDrive();\n        } else {\n          console.debug('No valid session found, using mock library');\n          handleLoadMockLibrary();\n        }\n      } catch (error) {\n        console.error('Failed to initialize Google Drive:', error);\n        handleLoadMockLibrary();\n      }\n    };\n\n    initGoogleDrive();\n  }, [dispatch, handleLoadLibraryFromDrive, handleLoadMockLibrary]);\n\n  // Google Drive handlers\n  const handleGoogleSignInSuccess = async (tokenResponse) => {\n    try {\n      await GoogleDriveServiceModern.handleOAuthToken(tokenResponse);\n      const signInStatus = GoogleDriveServiceModern.getSignInStatus();\n      \n      dispatch(setGoogleDriveConnection(true));\n      dispatch(setUserInfo({\n        email: signInStatus.userEmail,\n        name: signInStatus.userName,\n        picture: signInStatus.userPicture\n      }));\n      \n      await handleLoadLibraryFromDrive();\n    } catch (error) {\n      console.error('Google Sign-In failed:', error);\n      message.error('Failed to connect to Google Drive. Please try again.');\n    }\n  };\n\n  const handleGoogleSignInError = (error) => {\n    console.error('Google Sign-In error:', error);\n    message.error('Failed to sign in with Google. Please try again.');\n  };\n\n  const handleGoogleSignOut = async () => {\n    try {\n      await GoogleDriveServiceModern.signOut();\n      dispatch(setGoogleDriveConnection(false));\n      dispatch(setUserInfo(null));\n      handleLoadMockLibrary();\n    } catch (error) {\n      console.error('Failed to sign out:', error);\n    }\n  };\n\n  // Handle song selection from SongList\n  const handleSongSelect = useCallback((songData, artistName, albumTitle) => {\n    if (songData && artistName && albumTitle) {\n      // Create normalized song object for Redux\n      const normalizedSong = {\n        ...songData,\n        title: songData.title,\n        artist: { name: artistName },\n        album: { title: albumTitle }\n      };\n      dispatch(setSelectedSong(normalizedSong));\n      \n      // Load chord fingerings if they exist in the song data\n      if (songData.chordFingerings) {\n        dispatch(loadChordFingerings(songData.chordFingerings));\n      } else {\n        // Clear chord fingerings if song doesn't have any saved\n        dispatch(loadChordFingerings({}));\n      }\n    }\n  }, [dispatch]);\n\n  // Helper function to check if error is authentication-related\n  const isAuthError = (error) => {\n    if (!error) return false;\n    const message = error.message || error || '';\n    const authErrorPatterns = [\n      'User not signed in to Google Drive',\n      'Expected OAuth 2 access token',\n      'login cookie or other valid authentication credential',\n      'Invalid Credentials',\n      'Authentication failed',\n      'unauthorized_client',\n      'invalid_token',\n      'expired_token',\n      'access_denied',\n      'token_expired',\n      'Request had invalid authentication credentials'\n    ];\n    return authErrorPatterns.some(pattern => \n      message.toLowerCase().includes(pattern.toLowerCase())\n    );\n  };\n\n  // Handle chord pinning\n  const handlePinChord = (chord) => {\n    dispatch(pinChord(chord));\n  };\n\n  // Handle editing toggle\n  const handleEditingToggle = (enabled) => {\n    dispatch(setEditingEnabled(enabled));\n  };\n\n  return (\n    <div className=\"song-tabs-app\">\n      {/* Header with Edit Toggle, Library Count, and Sign-in Button */}\n      <div className=\"header-controls\" style={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', marginBottom: '1rem' }}>\n        {/* Edit Mode Toggle - Left side */}\n        <div className=\"edit-controls\">\n          <label className=\"edit-toggle\">\n            <Switch\n              checked={editingEnabled}\n              onChange={handleEditingToggle}\n              checkedChildren={<FaUnlock />}\n              unCheckedChildren={<FaLock />}\n            />\n            <span className=\"edit-label\">\n              {editingEnabled ? 'Editing Enabled' : 'Read Only'}\n            </span>\n          </label>\n        </div>\n\n        {/* Library Count - Center */}\n        <div className=\"library-status-header\">\n          {isLoading ? (\n            <div className=\"loading-indicator-header\">\n              <Spin size=\"small\" />\n              <span className=\"loading-text-header\">Loading songs...</span>\n            </div>\n          ) : (\n            <span className=\"library-count-header\">\n              {getTotalSongsCount()} {getTotalSongsCount() === 1 ? 'song' : 'songs'} in library\n            </span>\n          )}\n        </div>\n\n        {/* Google Drive Sign-in - Right side */}\n        <div className=\"google-drive-section\">\n          {isGoogleDriveConnected ? (\n            <GoogleSignInButton\n              isSignedIn={true}\n              onSignOut={handleGoogleSignOut}\n              disabled={isLoading}\n              userInfo={userInfo}\n            />\n          ) : (\n            <GoogleSignInButton\n              onSuccess={handleGoogleSignInSuccess}\n              onError={handleGoogleSignInError}\n              disabled={isLoading}\n            />\n          )}\n        </div>\n      </div>\n\n      {/* Main Content - 2 Column Layout */}\n      <div className=\"songs-content\">\n        <SongListTest \n          library={library}\n          onSelectSong={handleSongSelect}\n          selectedSong={selectedSong}\n          editingEnabled={editingEnabled}\n        />\n\n        {selectedSong ? (\n          <SongDetail\n            song={selectedSong}\n            artist={selectedSong.artist}\n            album={selectedSong.album}\n            editingEnabled={editingEnabled}\n            onUpdateSong={handleSongUpdate}\n            onPinChord={handlePinChord}\n          />\n        ) : (\n          <div className=\"empty-state\">\n            <p>Select a song to see its chord chart, or toggle the edit lock to add and edit songs in your Google Drive library.</p>\n            {!isGoogleDriveConnected && (\n              <p style={{ color: '#666', fontSize: '0.9em' }}>\n                Sign in to Google Drive to access your saved songs, or use the mock library to get started.\n              </p>\n            )}\n          </div>\n        )}\n      </div>\n\n      {/* Session Testing Tools - Development Only \n          To enable: Set ENABLE_SESSION_TESTING to true at the top of this component */}\n      {process.env.NODE_ENV === 'development' && (\n        <div style={{ marginTop: '2rem', borderTop: '1px solid #ddd', paddingTop: '1rem' }}>\n          <SessionTestingTools \n            googleDriveService={GoogleDriveServiceModern}\n            enabled={ENABLE_SESSION_TESTING}\n          />\n        </div>\n      )}\n\n      {/* Display Redux errors */}\n      {error && (\n        <div style={{ color: 'red', marginTop: '1rem' }}>\n          Error: {error}\n          <Button \n            size=\"small\" \n            onClick={() => dispatch(clearError())}\n            style={{ marginLeft: '0.5rem' }}\n          >\n            Dismiss\n          </Button>\n        </div>\n      )}\n    </div>\n  );\n};\n\n// Wrap component with App provider for message API\nconst SongTabsAppWithProvider = () => (\n  <App>\n    <SongTabsApp />\n  </App>\n);\n\nexport default SongTabsAppWithProvider;\n"],"names":["_ref","line","onSave","onCancel","editedLine","setEditedLine","useState","inputRef","useRef","useEffect","current","focus","handleSave","_jsxs","className","children","_jsx","ref","type","value","onChange","e","target","onKeyDown","key","placeholder","onClick","SortableLyricLine","index","id","editingLineIndex","editingEnabled","hoveredLineIndex","setHoveredLineIndex","handleEditLine","handleInsertAfter","handleDeleteLine","handleSaveLine","handleCancelEdit","renderLyricLine","isThisLinePending","isDragDisabled","isPendingDelete","isAddingLine","isPendingSave","attributes","listeners","setNodeRef","transform","transition","isDragging","useSortable","disabled","style","CSS","Transform","toString","opacity","position","backgroundColor","color","pointerEvents","onMouseEnter","onMouseLeave","LyricLineEditor","newLine","display","alignItems","gap","flex","padding","border","borderRadius","Spin","size","fontSize","stopPropagation","cursor","title","FaPencilAlt","FaPlus","FaTrash","_objectSpread","boxShadow","onMouseDown","undefined","currentTarget","onMouseUp","FaGripVertical","SongDetail","_ref2","song","onPinChord","onUpdateSong","artist","message","modal","App","useApp","setEditingLineIndex","setIsAddingLine","insertAfterIndex","setInsertAfterIndex","localTranspose","setLocalTranspose","dirty","setDirty","isEditingWholeSong","setIsEditingWholeSong","wholeSongText","setWholeSongText","pendingSaves","setPendingSaves","Set","pendingDragOperation","setPendingDragOperation","optimisticLyrics","setOptimisticLyrics","pendingLineIndex","setPendingLineIndex","pendingDeleteLines","setPendingDeleteLines","isPendingAdd","setIsPendingAdd","isPendingAnyOperation","setIsPendingAnyOperation","isSavingTranspose","setIsSavingTranspose","isSavingWholeSong","setIsSavingWholeSong","isDeletingSong","setIsDeletingSong","deleteCountdown","setDeleteCountdown","dispatch","useDispatch","instrument","useSelector","state","chords","currentInstrument","transpose","_state$chords$transpo","transposeBy","chordFingerings","isGoogleDriveConnected","songs","sensors","useSensors","useSensor","PointerSensor","KeyboardSensor","coordinateGetter","sortableKeyboardCoordinates","extractChords","lyrics","chordRegex","allChords","forEach","match","exec","includes","push","CHROMATIC","FLAT_EQUIV","transposeChord","chord","semitones","rootPart","bassPart","split","transposedRoot","transposedBass","concat","_","root","suffix","idx","indexOf","lyricsArray","Array","isArray","map","afterIndex","warning","async","updatedLyrics","targetIndex","length","splice","prev","then","success","newSet","delete","catch","error","console","has","handleDeleteSong","_song$album","deleteSong","artistName","name","albumTitle","album","songTitle","unwrap","clearSelectedSong","some","pattern","toLowerCase","isAuthError","setGoogleDriveConnection","setUserInfo","chordPositions","plainText","replace","adjustedChordPositions","item","adjustment","i","transposedChord","left","React","justifyContent","margin","handleTransposeDown","transposeSongDown","minWidth","textAlign","handleTransposeUp","transposeSongUp","transposedLyrics","updatedSong","marginLeft","flexWrap","htmlFor","marginRight","setInstrument","ChordChart","handleEditWholeSong","join","FaEdit","Popconfirm","marginTop","description","renderDeletePopconfirmContent","_song$album2","onConfirm","handleDeleteConfirm","onOpenChange","open","timer","setInterval","clearInterval","Math","max","okText","Box","CircularProgress","variant","thickness","top","fontWeight","toFixed","cancelText","okType","showCancel","okButtonProps","placement","converted","input","lines","convertedLines","trim","test","actualChordPattern","chordMatches","lineWithoutChords","chordPattern","singleChordMatch","j","lyricLine","chars","insertions","insertPos","pos","text","sort","a","b","shift","pop","convertLyrics","FaClipboard","rows","width","fontFamily","newLyrics","filter","handleCancelWholeSong","DndContext","collisionDetection","closestCenter","onDragEnd","active","over","event","oldIndex","findIndex","newIndex","arrayMove","SortableContext","items","strategy","verticalListSortingStrategy","props","library","selectedSong","onSelectSong","selectIsGoogleDriveConnected","treeData","useMemo","artists","isOpen","tree","artistNode","albums","albumNode","_selectedSong$artist","_selectedSong$album","isSelected","songData","maxHeight","overflowY","FolderTree","data","handleTreeStateChange","newTreeState","log","onNameClick","defaultOnClick","nodeData","onNameChange","prevName","updateArtist","oldArtistName","newArtistName","updateAlbum","oldAlbumTitle","newAlbumTitle","updateSong","updatedSongData","onAddNode","parentNodeData","addAlbum","addSong","notes","addArtist","onDeleteNode","deleteArtist","deleteAlbum","showCheckbox","readOnly","onSuccess","onError","isSignedIn","onSignOut","loading","userInfo","isLoading","setIsLoading","originalOpen","window","_len","arguments","args","_key","url","features","height","round","screen","customFeatures","call","this","widthMatch","parseInt","apply","login","useGoogleLogin","tokenResponse","scope","flow","ux_mode","GoogleIcon","viewBox","fill","d","handleClick","_Fragment","picture","src","alt","charAt","toUpperCase","warn","nextElementSibling","email","Title","Text","Paragraph","Typography","Panel","Collapse","SongTabsApp","getTotalSongsCount","useCallback","reduce","total","albumTotal","handleLoadMockLibrary","loadMockLibrary","handleLoadLibraryFromDrive","loadLibraryFromDrive","CLIENT_ID","process","Error","GoogleDriveServiceModern","initialize","signInStatus","getSignInStatus","userEmail","userName","userPicture","debug","initGoogleDrive","handleSongSelect","normalizedSong","setSelectedSong","loadChordFingerings","marginBottom","Switch","checked","enabled","setEditingEnabled","checkedChildren","FaUnlock","unCheckedChildren","FaLock","GoogleSignInButton","signOut","handleOAuthToken","SongListTest","pinChord","Button","clearError","SongTabsAppWithProvider"],"sourceRoot":""}