{"version":3,"mappings":";iDAMA,eAAsBA,EAAoBC,EAA8B,CACtE,KAAM,CAAE,oBAAAD,GAAwB,MAAAE,EAAA,oCAAAC,CAAA,OAAM,QAAO,qBAAuB,OAAAC,KAAA,+BAAAD,CAAA,2BACpE,OAAOE,EAAM,SAASL,EAAoBC,CAAM,CAAC,EAAE,QACrD,CAiBA,eAAsBK,GAAgC,CACpD,KAAM,CAAE,gBAAAA,GAAoB,MAAAJ,EAAA,gCAAAK,CAAA,OAAM,QAAO,qBAAuB,OAAAH,KAAA,2BAAAG,CAAA,2BAChE,OAAOF,EAAM,SAASC,GAAiB,EAAE,QAC3C","names":["loadFullLibraryById","fileId","__vitePreload","loadFullLibraryById2","n","store","loadFullLibrary","loadFullLibrary2"],"ignoreList":[],"sources":["../../../src/utils/libraryThunks.ts"],"sourcesContent":["import store from '../store';\nimport type { LibraryFileRef } from '../store/librarySlice';\n\n// Thin wrappers that dispatch librarySlice thunks and unwrap results.\n// Keep them small and typed for callers.\n\nexport async function loadFullLibraryById(fileId: string): Promise<any> {\n  const { loadFullLibraryById } = await import('../store/librarySlice');\n  return store.dispatch(loadFullLibraryById(fileId)).unwrap();\n}\n\nexport async function saveFullLibraryToFile(fileId: string, libraryData: any): Promise<any> {\n  const { saveFullLibraryToFile } = await import('../store/librarySlice');\n  return store.dispatch(saveFullLibraryToFile({ fileId, libraryData })).unwrap();\n}\n\nexport async function findLibraryFile(filename: string, folder: string): Promise<any> {\n  const { findLibraryFile } = await import('../store/librarySlice');\n  return store.dispatch(findLibraryFile({ filename, folder })).unwrap();\n}\n\nexport async function createOrUpdateLibraryFile(opts: any): Promise<any> {\n  const { createOrUpdateLibraryFile } = await import('../store/librarySlice');\n  return store.dispatch(createOrUpdateLibraryFile(opts)).unwrap();\n}\n\nexport async function loadFullLibrary(): Promise<any> {\n  const { loadFullLibrary } = await import('../store/librarySlice');\n  return store.dispatch(loadFullLibrary()).unwrap();\n}\n\nexport async function saveFullLibrary(libraryData: any): Promise<any> {\n  const { saveFullLibrary } = await import('../store/librarySlice');\n  return store.dispatch(saveFullLibrary(libraryData)).unwrap();\n}\n\nexport async function saveEntry(entry: any, type: string): Promise<any> {\n  const { saveEntry } = await import('../store/librarySlice');\n  return store.dispatch(saveEntry({ entry, type })).unwrap();\n}\n\nexport async function openEntry(id: string, type: string): Promise<any> {\n  const { openEntry } = await import('../store/librarySlice');\n  return store.dispatch(openEntry({ id, type })).unwrap();\n}\n"],"file":"static/js/libraryThunks-CT-Zflvb.js"}