{"version":3,"file":"WizardView-BRagLkUG.js","sources":["../../../src/data/garments.ts","../../../src/apps/knitting-designer/utils/panelDimensions.ts","../../../src/apps/knitting-designer/components/WizardView.tsx"],"sourcesContent":["import VisualMotif from '../models/VisualMotif';\n\n// Helper function to generate systematic garment sizes\n// Based on 10% scaling per size, with Men's Medium = Women's Large as base (1.0)\nconst generateGarmentSizes = () => {\n  const sizeOrder = ['XXS', 'XS', 'S', 'M', 'L', 'XL', 'XXL'];\n  const getSizeIndex = (size) => sizeOrder.indexOf(size) - 3; // M = index 0\n  const calculateSizeMultiplier = (sizeIndex) => Math.pow(1.1, sizeIndex);\n\n  const sizes = {};\n  \n  // Generate all combinations based on Men's M = Women's L equivalency\n  sizeOrder.forEach((mensSize: any) => {\n    sizeOrder.forEach((womensSize: any) => {\n      const mensSizeIndex = getSizeIndex(mensSize);\n      const womensSizeIndex = getSizeIndex(womensSize) - 1; // Offset by 1 for equivalency\n      \n      // Only include sizes where the calculations match\n      if (mensSizeIndex === womensSizeIndex) {\n        const multiplier = calculateSizeMultiplier(mensSizeIndex);\n        const sizeName = `men's ${mensSize.toLowerCase()} / women's ${womensSize.toLowerCase()}`;\n        sizes[sizeName] = Math.round(multiplier * 1000) / 1000; // Round to 3 decimal places\n      }\n    });\n  });\n  \n  return sizes;\n};\n\nconst standardGarmentSizes = generateGarmentSizes();\n\nconst garments = [\n    {\n        'permalink': 'cozy-raglan-sweater',\n        'title': 'Cozy Raglan V-Neck Sweater',\n        'description': 'A simple sweater with Raglan sleeves',\n        'sizes': standardGarmentSizes,\n        'shapes': {\n            'Front':\n            {\n                'height': 4,\n                'baseA': 25,\n                'baseB': 25,\n                'finishingSteps': ['Hang hem.'],\n                'successors': [{\n                    'height': 20,\n                    'baseA': 25,\n                    'baseB': 25,\n                    'successors': [\n                        { 'height': 0, 'baseA': 1, 'baseB': 1 },\n                        { 'height': 8, 'baseA': 10, 'baseB': 3 },\n                        { 'height': 0, 'baseA': 2, 'baseB': 2 },\n                        { 'height': 8, 'baseA': 10, 'baseB': 3 },\n                        { 'height': 0, 'baseA': 1, 'baseB': 1 }\n                    ]\n                }]\n            },\n            'Back': {\n                'height': 4,\n                'baseA': 25,\n                'baseB': 25,\n                'finishingSteps': ['Hang hem.'],\n                'successors': [{\n                    'height': 20,\n                    'baseA': 25,\n                    'baseB': 25,\n                    'successors': [\n                        { 'height': 0, 'baseA': 1, 'baseB': 1 },\n                        { 'height': 8, 'baseA': 23, 'baseB': 15 },\n                        { 'height': 0, 'baseA': 1, 'baseB': 1 }\n                    ]\n                }]\n            },\n            'Sleeves (make 2)': {\n                'height': 4,\n                'baseA': 10,\n                'baseB': 10,\n                'successors': [\n                    {\n                        'height': 14, 'baseA': 10, 'baseB': 20, 'successors': [\n                            { 'height': 7, 'baseA': 20, 'baseB': 3 }\n                        ]\n                    }\n                ]\n            }\n        },\n        'finishingSteps': [\n            'Lay out the panels and sleeves, right sides together, and knit the collar in whatever style you prefer.',\n            'Sew up the side seams and sleeve seams.',\n            'Weave in all ends.'\n        ]\n    }, {\n        'permalink': 'seam-top-hat',\n        'title': 'Seam-Top Hat',\n        'description': 'A simple hat with an elegant construction',\n        'sizes': {\n            'One Size': 1\n        },\n        'shapes': {\n            'Hat': {\n                'height': 4,\n                'baseA': 22,\n                'baseB': 22,\n                'finishingSteps': ['Hang hem.'],\n                'successors': [\n                    {\n                        'height': 10,\n                        'baseA': 22,\n                        'baseB': 22,\n                        'successors': [\n                            { 'height': 4, 'baseA': 5.5, 'baseB': 0.2 },\n                            { 'height': 4, 'baseA': 5.5, 'baseB': 0.2 },\n                            { 'height': 4, 'baseA': 5.5, 'baseB': 0.2 },\n                            { 'height': 4, 'baseA': 5.5, 'baseB': 0.2 }\n                        ]\n                    }\n                ]\n            }\n        },\n        'finishingSteps': ['Either use sew-as-you-go to join the top panels on the machine, or sew with a tapestry needle after binding off.', 'Sew up the back seam.', 'Add braided ear strings if desired.']\n    }, {\n        'permalink': 'drop-shoulder-crew-neck-sweater',\n        'title': 'Drop-Shoulder Crew Neck Sweater',\n        'description': 'A cozy drop-shoulder sweater with a classic crew neck',\n        'sizes': standardGarmentSizes,\n        'shapes': { // TODO: Shape the neckline/shoulders for this sweater\n            'Front': {\n                'height': 5,\n                'baseA': 5,\n                'baseB': 5,\n                'successors': [{\n                    'height': 5,\n                    'baseA': 5,\n                    'baseB': 5,\n                    'successors': [{\n                        'height': 5,\n                        'baseA': 5,\n                        'baseB': 5\n                    }]\n                }]\n            },\n            'Back': {\n                'height': 5,\n                'baseA': 30,\n                'baseB': 30,\n                'finishingSteps': ['Hang hem.'],\n                'successors': [{\n                    'height': 20,\n                    'baseA': 30,\n                    'baseB': 30,\n                    'successors': [\n                        { 'height': 0, 'baseA': 3, 'baseB': 3 },\n                        { 'height': 10, 'baseA': 10, 'baseB': 10 },\n                        { 'height': 0, 'baseA': 4, 'baseB': 4 },\n                        { 'height': 10, 'baseA': 10, 'baseB': 10 },\n                        { 'height': 0, 'baseA': 3, 'baseB': 3 }\n                    ]\n                }]\n            },\n            'Sleeves (make 2)': {\n                'height': 4,\n                'baseA': 10,\n                'baseB': 10,\n                'successors': [\n                    { 'height': 20, 'baseA': 10, 'baseB': 21 }\n                ]\n            }\n        }\n    },\n    // Test shapes: grouped small swatches and odd shapes collected for quick testing\n    {\n        permalink: 'test-shapes',\n        title: 'Test Shapes',\n        description: 'Collection of small swatches and odd shapes for testing (washcloth, baby blanket, scarf, gauge swatch, zero-top/bottom triangles).',\n        sizes: { 'One Size': 1 },\n        shapes: {\n            'Front': {\n                height: 3,\n                baseA: 10,\n                baseB: 10,\n                successors: [\n                    // washcloth\n                    { height: 8, baseA: 8, baseB: 8, successors: [] },\n                    // gauge swatch\n                    { height: 4, baseA: 4, baseB: 4, successors: [] }\n                ]\n            },\n            'Back': {\n                height: 3,\n                baseA: 10,\n                baseB: 10,\n                successors: [\n                    // baby blanket\n                    { height: 30, baseA: 24, baseB: 24, successors: [] },\n                    // triangle with top/baseB = 0 (point at top)\n                    { height: 10, baseA: 10, baseB: 0, successors: [] }\n                ]\n            },\n            'Sleeves (make 2)': {\n                height: 3,\n                baseA: 10,\n                baseB: 10,\n                successors: [\n                    // simple scarf\n                    { height: 60, baseA: 8, baseB: 8, successors: [] },\n                    // triangle with bottom/baseA = 0 (point at bottom)\n                    { height: 10, baseA: 0, baseB: 10, successors: [] }\n                ]\n            }\n        },\n        finishingSteps: ['Use these panels for gauge and motif testing.']\n    }\n];\n\nconst colorworkCharts = {\n    'Solid': [[0]],\n    'Stripes_2x2': [[0, 0, 1, 1]],\n    'Stripes_4x2': [[0, 0, 0, 0, 1, 1]],\n    'Stripes_4x4': [[0, 0, 0, 0, 1, 1, 1, 1]],\n    'Checkerboard': [\n        [0, 1],\n        [1, 0]\n    ],\n    'Checkerboard_4x4': [\n        [0, 0, 1, 1],\n        [0, 0, 1, 1],\n        [1, 1, 0, 0],\n        [1, 1, 0, 0]\n    ],\n    'Arguyle': [\n        [0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0],\n        [0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0],\n        [0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0],\n        [0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0],\n        [0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0],\n        [0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0],\n        [0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0],\n        [0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0],\n        [0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0],\n        [0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0],\n        [0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0],\n        [0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0],\n        [0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0],\n        [0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0],\n        [0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0],\n        [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],\n        [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],\n        [0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0],\n        [0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0],\n        [0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0],\n        [0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0],\n        [0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0],\n        [0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0],\n        [0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0],\n        [0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0],\n        [0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0],\n        [0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0],\n        [0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0],\n        [0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0],\n        [0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0],\n        [0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0],\n        [0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0]\n    ]\n};\n\nconst visualMotifs = {\n    /*\n        {\n            type: 'SOLID|STANDED|INTARSIA',\n            primaryMotif: 'Stripes_4x2',\n            secondaryMotifs: ['stripes_4x4'],\n            defaultColors: ['#ffffff'],\n            successor: null,\n            truncatedBy: 0,\n            horizontalRepeat: 5|undefined,\n            verticalRepeat 10|undefined,\n            height: 5|undefined, // if *motif* properties are defined, height is unused (infer from motifs+repeats)\n        },\n    */\n    blackAndWhiteStripes: new VisualMotif({\n        type: 'SOLID',\n        defaultColors: ['#ffffff'],\n        verticalRepeat: 10,\n        height: 4,\n        successor: {\n            type: 'SOLID',\n            defaultColors: ['#ffffff'],\n            height: 2\n        }\n    }),\n    redAndWhiteStripes: new VisualMotif({\n        type: 'SOLID',\n        defaultColors: ['#ff0000'],\n        verticalRepeat: 10,\n        height: 4,\n        successor: {\n            type: 'SOLID',\n            defaultColors: ['#ffffff'],\n            verticalRepeat: 10,\n            height: 4\n        }\n    }),\n    checkerboard: new VisualMotif({\n        type: 'STRANDED',\n        defaultColors: ['#ffffff', '#000000'],\n        primaryMotif: 'Checkerboard',\n        verticalRepeat: 4\n    }),\n    solidWhite: new VisualMotif({\n        type: 'SOLID',\n        defaultColors: ['#ffffff'],\n        verticalRepeat: 10,\n        height: 4\n    })\n\n};\n\n\nexport { garments, colorworkCharts, visualMotifs };","export type PanelBounds = {\n  minX: number;\n  maxX: number;\n  minY: number;\n  maxY: number;\n};\n\nexport type PanelDimensions = {\n  widthInches: number;\n  heightInches: number;\n  bounds: PanelBounds;\n};\n\nconst toNumber = (value: any): number => {\n  if (typeof value === 'number' && Number.isFinite(value)) {\n    return value;\n  }\n  const parsed = Number(value);\n  return Number.isFinite(parsed) ? parsed : 0;\n};\n\nconst clampNonNegative = (value: number): number => (value < 0 ? 0 : value);\n\nconst normalizeScale = (scale: number): number => {\n  const numeric = toNumber(scale);\n  return numeric === 0 ? 1 : Math.abs(numeric);\n};\n\nconst traverseShape = (\n  trap: any,\n  scale: number,\n  xOffset: number,\n  yOffset: number,\n  bounds: PanelBounds\n): void => {\n  if (!trap || typeof trap !== 'object') {\n    return;\n  }\n\n  const baseA = clampNonNegative(toNumber(trap.baseA));\n  const baseB = clampNonNegative(toNumber(trap.baseB));\n  const height = clampNonNegative(toNumber(trap.height));\n  const horizontalOffset = toNumber(trap.baseBHorizontalOffset);\n\n  const scaledBaseA = baseA * scale;\n  const scaledBaseB = baseB * scale;\n  const scaledHeight = height * scale;\n  const trapWidth = Math.max(scaledBaseA, scaledBaseB);\n\n  const topLeftX = xOffset + (trapWidth - scaledBaseB) / 2 + horizontalOffset * scale;\n  const topRightX = xOffset + (trapWidth + scaledBaseB) / 2 + horizontalOffset * scale;\n  const bottomLeftX = xOffset + (trapWidth - scaledBaseA) / 2;\n  const bottomRightX = xOffset + (trapWidth + scaledBaseA) / 2;\n  const topY = yOffset;\n  const bottomY = yOffset + scaledHeight;\n\n  bounds.minX = Math.min(bounds.minX, topLeftX, topRightX, bottomLeftX, bottomRightX);\n  bounds.maxX = Math.max(bounds.maxX, topLeftX, topRightX, bottomLeftX, bottomRightX);\n  bounds.minY = Math.min(bounds.minY, topY, bottomY);\n  bounds.maxY = Math.max(bounds.maxY, topY, bottomY);\n\n  const successors = Array.isArray(trap.successors)\n    ? trap.successors.filter((s: any) => s && typeof s === 'object')\n    : [];\n\n  if (!successors.length) {\n    return;\n  }\n\n  const successorWidths = successors.map((successor: any) => {\n    const succBaseA = clampNonNegative(toNumber(successor.baseA));\n    const succBaseB = clampNonNegative(toNumber(successor.baseB));\n    return Math.max(succBaseA, succBaseB) * scale;\n  });\n\n  const totalWidth = successorWidths.reduce((sum: number, w: number) => sum + w, 0);\n  let childOffset = xOffset + (trapWidth - totalWidth) / 2;\n\n  successors.forEach((successor: any, index: number) => {\n    const successorHeight = clampNonNegative(toNumber(successor.height)) * scale;\n    const successorWidth = successorWidths[index] || 0;\n    traverseShape(successor, scale, childOffset, topY - successorHeight, bounds);\n    childOffset += successorWidth;\n  });\n};\n\nexport const calculatePanelDimensions = (\n  shape: any,\n  scale = 1\n): PanelDimensions | null => {\n  if (!shape || typeof shape !== 'object') {\n    return null;\n  }\n\n  const safeScale = normalizeScale(scale || 1);\n\n  const bounds: PanelBounds = {\n    minX: Number.POSITIVE_INFINITY,\n    maxX: Number.NEGATIVE_INFINITY,\n    minY: Number.POSITIVE_INFINITY,\n    maxY: Number.NEGATIVE_INFINITY\n  };\n\n  traverseShape(shape, safeScale, 0, 0, bounds);\n\n  if (!Number.isFinite(bounds.minX) || !Number.isFinite(bounds.maxX) || !Number.isFinite(bounds.minY) || !Number.isFinite(bounds.maxY)) {\n    return null;\n  }\n\n  const widthInches = bounds.maxX - bounds.minX;\n  const heightInches = bounds.maxY - bounds.minY;\n\n  if (!Number.isFinite(widthInches) || !Number.isFinite(heightInches)) {\n    return null;\n  }\n\n  return {\n    widthInches,\n    heightInches,\n    bounds\n  };\n};\n\nexport default calculatePanelDimensions;\n","import React, { useState, useMemo, useRef, useEffect, useCallback } from 'react';\nimport { InputNumber, Form, Button, Input, Divider, Select, Collapse, Space, Typography, Card, message } from 'antd';\nimport { EditOutlined, EyeOutlined, CheckOutlined, CopyOutlined } from '@ant-design/icons';\nimport ColorworkPanelEditor from '../../../components/ColorworkPanelEditor';\nimport { PanelDiagram } from '../../../components/PanelDiagram';\nimport { ColorworkPanelDiagram } from '../../../components/ColorworkPanelDiagram';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { updatePatternData, selectPatternData, nextStep, previousStep, selectCurrentStep, copyPanelPatternLayers } from '../../../store/knittingDesignSlice';\nimport { garments } from '../../../data/garments';\nimport { loadFullLibrary, setFullLibrary, clearEntries } from '../../../store/librarySlice';\nimport { useDriveAuth } from '../../colorwork-designer/context/DriveAuthContext';\nimport { calculatePanelDimensions } from '../utils/panelDimensions';\n\nconst WizardView: React.FC = () => {\n  const dispatch = useDispatch();\n  const patternData: any = useSelector(selectPatternData);\n  const currentStep: number = useSelector(selectCurrentStep) || 0;\n  const [name, setName] = useState<string>(patternData?.name || '');\n  \n  // State for colorwork editing - NEW: per-instance workflow\n  const [showColorworkSection, setShowColorworkSection] = useState(false);\n  const [currentColorworkPanelIndex, setCurrentColorworkPanelIndex] = useState(0);\n  const [coloredPanels, setColoredPanels] = useState<Set<string>>(new Set());\n  \n  // New state for per-instance colorwork editing\n  const [panelInstances, setPanelInstances] = useState<Array<{ key: string; instanceId: string; panelName: string }>>([]);\n  const [currentInstanceIndex, setCurrentInstanceIndex] = useState(0);\n  \n  // Get authentication state\n  const { isSignedIn } = useDriveAuth();\n  \n  // Get library panels from global state\n  const libraryData: any = useSelector((state: any) => state.library?.fullLibrary);\n\n  // Load library when authentication state changes\n  useEffect(() => {\n    if (isSignedIn) {\n      dispatch(loadFullLibrary() as any);\n    } else {\n      // Clear library data when logged out\n      dispatch(setFullLibrary(null));\n      dispatch(clearEntries());\n    }\n  }, [isSignedIn, dispatch]);\n\n  // Build a flat list of panels from garments with unique keys\n  const panelList = useMemo(() => {\n    const out: Array<{ key: string; garmentTitle: string; garmentPermalink: string; panelName: string }> = [];\n    \n    // Add panels from built-in garments\n    (garments || []).forEach((g: any) => {\n      const shapes = g.shapes || {};\n      Object.keys(shapes).forEach((panelName) => {\n        out.push({ key: `${g.permalink}::${panelName}`, garmentTitle: g.title, garmentPermalink: g.permalink, panelName });\n      });\n    });\n    \n    // Add panels from user's library\n    if (libraryData && libraryData.panels) {\n      Object.keys(libraryData.panels).forEach((panelId) => {\n        const panel = libraryData.panels[panelId];\n        const panelName = panel.name || panelId;\n        // Use 'library' as permalink to distinguish from garments\n        out.push({ \n          key: `library::${panelId}`, \n          garmentTitle: 'My Library', \n          garmentPermalink: 'library', \n          panelName \n        });\n      });\n    }\n    \n    return out;\n  }, [libraryData]);\n\n  // Initialize counts from patternData.panels.panelsNeeded or defaults to 0\n  const initialCounts: Record<string, number> = (patternData && patternData.panels && patternData.panels.panelsNeeded) || {};\n  const [panelCounts, setPanelCounts] = useState<Record<string, number>>(() => ({ ...initialCounts }));\n\n  const setCount = (key: string, value: number | null) => {\n    const v = value == null ? 0 : value;\n    const next = { ...panelCounts, [key]: v };\n    setPanelCounts(next);\n    // Persist to redux under section 'panels'\n    dispatch(updatePatternData({ section: 'panels', data: { panelsNeeded: next } }) as any);\n  };\n\n  // Selected panel for colorwork editing (key from panelList: `${permalink}::${panelName}`)\n  // Initialize from redux if a previewPanelKey was persisted under patternData.panels\n  const [selectedPanelKey, setSelectedPanelKey] = useState<string | null>(patternData?.panels?.previewPanelKey || null);\n\n  const resolveLibraryPanel = useCallback((panels: any, panelId: string) => {\n    if (!panels) return null;\n    if (Array.isArray(panels)) {\n      return panels.find((panel: any) => panel && (panel.id === panelId || panel.name === panelId));\n    }\n    if (typeof panels === 'object') {\n      if (panels[panelId]) return panels[panelId];\n      const asArray = Object.values(panels);\n      return asArray.find((panel: any) => panel && (panel.id === panelId || panel.name === panelId)) || null;\n    }\n    return null;\n  }, []);\n\n  const getPanelShape = useCallback((panelKey: string | null) => {\n    if (!panelKey) return null;\n    const [permalink, rawPanelId = ''] = panelKey.split('::');\n\n    if (permalink === 'library') {\n      const panelData = resolveLibraryPanel(libraryData?.panels, rawPanelId);\n      if (!panelData) return null;\n      return panelData.shapes || panelData.shape || panelData.panelShape || null;\n    }\n\n    const garment = garments.find((g: any) => g.permalink === permalink);\n    const garmentShapes = garment?.shapes || {};\n    return garmentShapes ? (garmentShapes as any)[rawPanelId as any] : null;\n  }, [libraryData?.panels, resolveLibraryPanel]);\n\n  // Compute currently selected panel keys (where count > 0)\n  const selectedPanels = useMemo(() => {\n    return Object.keys(panelCounts).filter(k => (panelCounts[k] || 0) > 0);\n  }, [panelCounts]);\n\n  const getPanelLabelForKey = useCallback((panelKey: string) => {\n    if (!panelKey) return '';\n    const match = panelList.find(p => p.key === panelKey);\n    if (match) {\n      return `${match.garmentTitle} — ${match.panelName}`;\n    }\n    const [, panelName = 'Panel'] = panelKey.split('::');\n    return panelName;\n  }, [panelList]);\n\n  // Helper functions for sequential colorwork editing\n  // Helper functions for instance-based colorwork editing\n  const getCurrentColorworkInstance = useCallback(() => {\n    return panelInstances[currentInstanceIndex] || null;\n  }, [panelInstances, currentInstanceIndex]);\n\n  const getCurrentColorworkPanel = useCallback(() => {\n    return selectedPanels[currentColorworkPanelIndex] || null;\n  }, [selectedPanels, currentColorworkPanelIndex]);\n\n  const goToNextInstance = useCallback(() => {\n    if (currentInstanceIndex < panelInstances.length - 1) {\n      setCurrentInstanceIndex(prev => prev + 1);\n    }\n  }, [currentInstanceIndex, panelInstances.length]);\n\n  const goToPreviousInstance = useCallback(() => {\n    if (currentInstanceIndex > 0) {\n      setCurrentInstanceIndex(prev => prev - 1);\n    }\n  }, [currentInstanceIndex]);\n\n  const goToNextPanel = useCallback(() => {\n    if (currentColorworkPanelIndex < selectedPanels.length - 1) {\n      setCurrentColorworkPanelIndex(prev => prev + 1);\n    }\n  }, [currentColorworkPanelIndex, selectedPanels.length]);\n\n  const goToPreviousPanel = useCallback(() => {\n    if (currentColorworkPanelIndex > 0) {\n      setCurrentColorworkPanelIndex(prev => prev - 1);\n    }\n  }, [currentColorworkPanelIndex]);\n\n  // Generate panel instances for per-instance colorwork editing\n  const generatePanelInstances = useCallback(() => {\n    const instances: Array<{ key: string; instanceId: string; panelName: string }> = [];\n    selectedPanels.forEach(panelKey => {\n      const count = panelCounts[panelKey] || 0;\n      const panel = panelList.find(p => p.key === panelKey);\n      if (panel && count > 0) {\n        for (let i = 1; i <= count; i++) {\n          instances.push({\n            key: panelKey,\n            instanceId: `${panelKey}::instance-${i}`,\n            panelName: `${panel.panelName} #${i}`\n          });\n        }\n      }\n    });\n    return instances;\n  }, [selectedPanels, panelCounts, panelList]);\n\n  const toggleColorworkFlow = useCallback(() => {\n    if (showColorworkSection) {\n      setShowColorworkSection(false);\n    } else {\n      // Generate instances for per-instance colorwork editing\n      const instances = generatePanelInstances();\n      setPanelInstances(instances);\n      setCurrentInstanceIndex(0);\n      setCurrentColorworkPanelIndex(0);\n      setShowColorworkSection(true);\n      // Scroll to colorwork section after a brief delay to let it render\n      setTimeout(() => {\n        const colorworkSection = document.querySelector('[data-colorwork-section]');\n        if (colorworkSection) {\n          colorworkSection.scrollIntoView({ behavior: 'smooth', block: 'start' });\n        }\n      }, 100);\n    }\n  }, [showColorworkSection, generatePanelInstances]);\n\n  const markPanelAsColored = useCallback((panelKey: string) => {\n    setColoredPanels(prev => new Set([...prev, panelKey]));\n  }, []);\n\n  const copyColorworkToCurrentPanel = useCallback((sourcePanelKey: string) => {\n    const currentPanel = getCurrentColorworkPanel();\n    if (!currentPanel || sourcePanelKey === currentPanel) return;\n    \n    // Copy pattern layers using Redux action\n    dispatch(copyPanelPatternLayers({ \n      sourcePanelKey, \n      targetPanelKey: currentPanel \n    }) as any);\n    \n    // Mark current panel as colored after copying\n    markPanelAsColored(currentPanel);\n    \n    // Show success message\n    const sourceLabel = getPanelLabelForKey(sourcePanelKey).split(' — ')[1] || getPanelLabelForKey(sourcePanelKey);\n    const targetLabel = getPanelLabelForKey(currentPanel).split(' — ')[1] || getPanelLabelForKey(currentPanel);\n    message.success(`Copied colorwork from ${sourceLabel} to ${targetLabel}`);\n  }, [dispatch, getCurrentColorworkPanel, markPanelAsColored, getPanelLabelForKey]);\n\n  const handlePreviewKeyChange = useCallback((nextKey: string | null) => {\n    setSelectedPanelKey(nextKey);\n    dispatch(updatePatternData({ section: 'panels', data: { previewPanelKey: nextKey } }) as any);\n  }, [dispatch]);\n\n  // Ensure selectedPanelKey stays valid when selection changes\n  useEffect(() => {\n    // If the user has a persisted preview selection in redux and it's still available, respect it.\n    const persisted = patternData?.panels?.previewPanelKey;\n    if (persisted && selectedPanels.includes(persisted)) {\n      if (selectedPanelKey !== persisted) setSelectedPanelKey(persisted);\n      return;\n    }\n\n    if (!selectedPanelKey && selectedPanels.length > 0) {\n      const pick = selectedPanels[0];\n      setSelectedPanelKey(pick);\n      // Persist a default preview selection so the choice survives navigation/reloads\n      dispatch(updatePatternData({ section: 'panels', data: { previewPanelKey: pick } }) as any);\n    }\n    if (selectedPanelKey && !selectedPanels.includes(selectedPanelKey)) {\n      // selected panel was removed, pick another or null and persist\n      const pick = selectedPanels[0] || null;\n      setSelectedPanelKey(pick);\n      dispatch(updatePatternData({ section: 'panels', data: { previewPanelKey: pick } }) as any);\n    }\n  }, [selectedPanels, selectedPanelKey, patternData?.panels?.previewPanelKey]);\n\n  // Collapsible state handled by AntD Collapse; 'more' toggle controls whether to show all garments\n  const [showAllGarments, setShowAllGarments] = useState<boolean>(true);\n  const [activeCollapseKeys, setActiveCollapseKeys] = useState<string[]>([]);\n\n  // Keep track of previous step so we only initialize collapse keys on step transitions\n  const prevStepRef = useRef<number | null>(null);\n  useEffect(() => {\n    const allTitles = Array.from(new Set(panelList.map(p => p.garmentTitle)));\n\n    // Only run when currentStep or panelList change. Do NOT depend on panelCounts/selectedPanels\n    // so that editing inputs inside a panel doesn't collapse it.\n    if (prevStepRef.current === null || prevStepRef.current !== currentStep) {\n      if (currentStep >= 1) {\n        // On panel selection step, expand only garments that currently have selections\n        const selectedGarmentTitles = Array.from(new Set(Object.keys(panelCounts)\n          .filter(k => (panelCounts[k] || 0) > 0)\n          .map(k => {\n            const found = panelList.find(p => p.key === k);\n            return found ? found.garmentTitle : null;\n          }).filter(Boolean) as string[]));\n        setActiveCollapseKeys(selectedGarmentTitles);\n        setShowAllGarments(false);\n      } else {\n        // On setup step, keep all garment panels collapsed by default\n        setActiveCollapseKeys([]);\n        setShowAllGarments(true);\n      }\n      prevStepRef.current = currentStep;\n    }\n  }, [panelList, currentStep, panelCounts]);\n\n  // Refs for each step so we can autoscroll when a new step appears\n  const stepRefs = useRef<Array<HTMLDivElement | null>>([]);\n\n  // When currentStep changes, scroll the bottom-most rendered step into view\n  useEffect(() => {\n    // Scroll to the currently-visible last step\n    const ref = stepRefs.current[currentStep];\n    if (ref && typeof ref.scrollIntoView === 'function') {\n      // center the new section in view\n      ref.scrollIntoView({ behavior: 'smooth', block: 'center' });\n    }\n  }, [currentStep]);\n\n  // Persist full gauge (including derived per-4-inch values and scaleFactor) to redux\n  const persistGauge = (nextFields: Partial<{ stitchesPerInch: number; rowsPerInch: number; scaleFactor: number }>) => {\n    const current = (patternData && patternData.gauge) || {};\n    const merged = { ...current, ...nextFields } as { stitchesPerInch?: number; rowsPerInch?: number; scaleFactor?: number };\n    const scale = typeof merged.scaleFactor === 'number' ? merged.scaleFactor : (merged.scaleFactor ?? 1);\n    const sPerInch = typeof merged.stitchesPerInch === 'number' ? merged.stitchesPerInch : (current.stitchesPerInch || 0);\n    const rPerInch = typeof merged.rowsPerInch === 'number' ? merged.rowsPerInch : (current.rowsPerInch || 0);\n    // Store base gauge (without scale applied) - scale is applied separately when rendering\n    const stitchesPerFourInches = sPerInch * 4;\n    const rowsPerFourInches = rPerInch * 4;\n\n    const toPersist = {\n      stitchesPerInch: sPerInch,\n      rowsPerInch: rPerInch,\n      scaleFactor: scale,\n      stitchesPerFourInches,\n      rowsPerFourInches\n    };\n\n    dispatch(updatePatternData({ section: 'gauge', data: toPersist }) as any);\n  };\n\n  const onGaugeChange = (field: 'stitchesPerInch' | 'rowsPerInch', value: number | null) => {\n    if (value == null) return;\n    // User enters per-4-inches, divide by 4 to get per-inch for storage\n    const perInchValue = value / 4;\n    persistGauge({ [field]: perInchValue } as any);\n  };\n\n  const onScaleChange = (value: number | null) => {\n    if (value == null) return;\n    persistGauge({ scaleFactor: value });\n  };\n\n  const onNameChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    const v = e.target.value;\n    setName(v);\n    dispatch(updatePatternData({ section: 'meta', data: { name: v } }) as any);\n  };\n\n  // Wrap navigation so we can jump and then scroll\n  const goNext = () => {\n    dispatch(nextStep() as any);\n    // scrolling is handled by effect when currentStep updates from redux\n  };\n  const goPrev = () => dispatch(previousStep() as any);\n\n  return (\n    <div style={{ padding: 12 }}>\n      {/* Step progress indicator */}\n      <div style={{ marginBottom: 16, padding: 12, backgroundColor: '#fafafa', borderRadius: 6, border: '1px solid #e8e8e8' }}>\n        <div style={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center' }}>\n          <Typography.Title level={3} style={{ margin: 0 }}>\n            Knitting Pattern Designer\n          </Typography.Title>\n          <div style={{ fontSize: 14, color: '#666' }}>\n            Step {currentStep + 1} of 2: {currentStep === 0 ? 'Pattern Setup' : 'Panel Selection & Colorwork'}\n          </div>\n        </div>\n      </div>\n\n      {/* Render all steps up to and including currentStep so previous steps remain editable */}\n      <div style={{ display: 'flex', flexDirection: 'column', gap: 12 }}>\n        {/* Step 0: Pattern name & gauge (moved up) */}\n        {currentStep >= 0 && (\n          <div\n            ref={el => { stepRefs.current[0] = el; return; }}\n            key=\"step-0\"\n            style={{ padding: 12, borderRadius: 6, background: '#fff' }}\n          >\n            <div style={{ display: 'flex', gap: 12, alignItems: 'flex-start', flexWrap: 'wrap' }}>\n              {/* Title expands to fill available space */}\n              <div style={{ flex: '1 1 320px', minWidth: 220 }}>\n                <label style={{ display: 'block', fontWeight: 700, marginBottom: 6 }}>Pattern name</label>\n                <Input value={name} onChange={onNameChange} />\n              </div>\n\n              {/* Gauge block has fixed preferred width but can wrap under when narrow */}\n              <div style={{ flex: '0 0 280px', minWidth: 200, display: 'flex', gap: 8, alignItems: 'center' }}>\n                <div style={{ display: 'flex', flexDirection: 'column', gap: 6 }}>\n                  <label style={{ fontSize: 13 }}>Stitches per 4\":</label>\n                  <InputNumber min={1} value={patternData?.gauge?.stitchesPerFourInches} onChange={(v: number | null) => onGaugeChange('stitchesPerInch', v)} />\n                </div>\n                <div style={{ display: 'flex', flexDirection: 'column', gap: 6 }}>\n                  <label style={{ fontSize: 13 }}>Rows per 4\":</label>\n                  <InputNumber min={1} value={patternData?.gauge?.rowsPerFourInches} onChange={(v: number | null) => onGaugeChange('rowsPerInch', v)} />\n                </div>\n              </div>\n\n              {/* Scale factor */}\n              <div style={{ flex: '0 0 120px', minWidth: 100, display: 'flex', gap: 8, alignItems: 'center' }}>\n                <div style={{ display: 'flex', flexDirection: 'column', gap: 6 }}>\n                  <label style={{ fontSize: 13 }}>Scale</label>\n                  <InputNumber min={0.1} step={0.1} value={patternData?.gauge?.scaleFactor ?? 1} onChange={(v: number | null) => onScaleChange(v)} />\n                </div>\n              </div>\n            </div>\n          </div>\n        )}\n\n        {/* Step 1: Select panels with previews and colorwork editing */}\n        {currentStep >= 1 && (\n          <div\n            ref={el => { stepRefs.current[1] = el; return; }}\n            key=\"step-1\"\n            style={{ padding: 12, borderRadius: 6, background: '#fff', marginTop: 4 }}\n          >\n            <Typography.Title level={4} style={{ margin: '0 0 16px 0' }}>\n              Select Panels for Your Project\n            </Typography.Title>\n            \n            {/* Panel selection with new UX */}\n            <div style={{ display: 'flex', flexDirection: 'column', gap: 16 }}>\n              {(() => {\n                const groups: Record<string, Array<{ key: string; panelName: string }>> = {};\n                panelList.forEach(p => {\n                  if (!groups[p.garmentTitle]) groups[p.garmentTitle] = [];\n                  groups[p.garmentTitle].push({ key: p.key, panelName: p.panelName });\n                });\n\n                const garmentTitles = Object.keys(groups);\n\n                return (\n                  <div>\n                    {/* Selected panels section - always visible if any panels selected */}\n                    {selectedPanels.length > 0 && (\n                      <div style={{ marginBottom: 24 }}>\n                        <Typography.Title level={5} style={{ margin: '0 0 12px 0', color: '#1890ff' }}>\n                          Selected Panels ({selectedPanels.length} types, {Object.values(panelCounts).reduce((sum, count) => sum + (count || 0), 0)} total pieces)\n                        </Typography.Title>\n                        <div style={{ display: 'grid', gridTemplateColumns: 'repeat(auto-fill, minmax(280px, 1fr))', gap: 16 }}>\n                          {selectedPanels.map(key => {\n                            const panel = panelList.find(p => p.key === key);\n                            if (!panel) return null;\n                            const { panelName } = panel;\n                            const shape = getPanelShape(key);\n                            \n                            return (\n                              <Card\n                                key={key}\n                                style={{ \n                                  borderColor: '#1890ff',\n                                  boxShadow: '0 2px 8px rgba(24, 144, 255, 0.2)' \n                                }}\n                                bodyStyle={{ padding: 12 }}\n                              >\n                                {/* Panel header with name and quantity */}\n                                <div style={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', marginBottom: 12 }}>\n                                  <Typography.Text strong>{panelName}</Typography.Text>\n                                  <div style={{ display: 'flex', alignItems: 'center', gap: 8 }}>\n                                    <Typography.Text style={{ fontSize: 12, color: '#666' }}>Qty:</Typography.Text>\n                                    <InputNumber\n                                      size=\"small\"\n                                      min={0}\n                                      max={10}\n                                      value={panelCounts[key] || 0}\n                                      onChange={(v: number | null) => setCount(key, v)}\n                                      style={{ width: 60 }}\n                                    />\n                                  </div>\n                                </div>\n\n                                {/* Panel preview diagram */}\n                                <div style={{ display: 'flex', justifyContent: 'center', marginBottom: 12, minHeight: 120 }}>\n                                  {shape ? (\n                                    <PanelDiagram \n                                      shape={shape} \n                                      label=\"\" \n                                      size={100} \n                                      padding={8}\n                                    />\n                                  ) : (\n                                    <div style={{ \n                                      width: 100, \n                                      height: 100, \n                                      backgroundColor: '#f5f5f5', \n                                      display: 'flex', \n                                      alignItems: 'center', \n                                      justifyContent: 'center',\n                                      borderRadius: 4,\n                                      color: '#999'\n                                    }}>\n                                      No Preview\n                                    </div>\n                                  )}\n                                </div>\n\n                                {/* Panel dimensions and gauge info */}\n                                {shape && patternData?.gauge && (\n                                  <div style={{ fontSize: 11, color: '#666', marginBottom: 8, textAlign: 'center' }}>\n                                    {(() => {\n                                      try {\n                                        const gauge = patternData.gauge || {};\n                                        const scalingFactor = typeof gauge.scaleFactor === 'number' ? gauge.scaleFactor : 1;\n                                        const dimensions = calculatePanelDimensions(shape, scalingFactor);\n                                        if (!dimensions) return null;\n\n                                        const stitchesPerInch = gauge.stitchesPerInch || 0;\n                                        const rowsPerInch = gauge.rowsPerInch || 0;\n                                        \n                                        if (!stitchesPerInch || !rowsPerInch) return null;\n\n                                        const totalStitches = Math.round(dimensions.widthInches * stitchesPerInch);\n                                        const totalRows = Math.round(dimensions.heightInches * rowsPerInch);\n\n                                        return `${totalStitches} × ${totalRows} stitches (${dimensions.widthInches.toFixed(1)}\" × ${dimensions.heightInches.toFixed(1)}\")`;\n                                      } catch (error) {\n                                        return null;\n                                      }\n                                    })()}\n                                  </div>\n                                )}\n\n                                {/* Colorwork status indicator */}\n                                {(() => {\n                                  const panelInstanceCount = panelCounts[key] || 0;\n                                  const completedInstanceCount = panelInstances.filter(inst => \n                                    inst.key === key && coloredPanels.has(inst.instanceId)\n                                  ).length;\n                                  const allInstancesCompleted = panelInstanceCount > 0 && completedInstanceCount === panelInstanceCount;\n                                  const hasPartialProgress = completedInstanceCount > 0;\n\n                                  return (\n                                    <div style={{ \n                                      textAlign: 'center', \n                                      padding: '4px 8px', \n                                      borderRadius: 4, \n                                      fontSize: 12,\n                                      backgroundColor: allInstancesCompleted ? '#f6ffed' : hasPartialProgress ? '#fff7e6' : '#fff7e6',\n                                      border: `1px solid ${allInstancesCompleted ? '#b7eb8f' : hasPartialProgress ? '#ffd591' : '#ffd591'}`,\n                                      color: allInstancesCompleted ? '#389e0d' : hasPartialProgress ? '#d48806' : '#d48806'\n                                    }}>\n                                      {showColorworkSection \n                                        ? `${completedInstanceCount} of ${panelInstanceCount} instances colored`\n                                        : allInstancesCompleted \n                                          ? '✓ All Instances Colored' \n                                          : hasPartialProgress \n                                            ? `${completedInstanceCount}/${panelInstanceCount} Colored`\n                                            : 'Needs Colorwork'\n                                      }\n                                    </div>\n                                  );\n                                })()}\n                              </Card>\n                            );\n                          })}\n                        </div>\n                      </div>\n                    )}\n\n                    {/* Add panels section with group selector */}\n                    <div>\n                      <div style={{ display: 'flex', alignItems: 'center', gap: 12, marginBottom: 16 }}>\n                        <Typography.Title level={5} style={{ margin: 0 }}>\n                          Add Panels from:\n                        </Typography.Title>\n                        <Select\n                          placeholder=\"Choose a group...\"\n                          value={activeCollapseKeys[0] || undefined}\n                          onChange={(value: string) => setActiveCollapseKeys([value])}\n                          style={{ minWidth: 200 }}\n                          allowClear\n                        >\n                          {garmentTitles.map(title => (\n                            <Select.Option key={title} value={title}>\n                              {title}\n                            </Select.Option>\n                          ))}\n                        </Select>\n                      </div>\n\n                      {/* Show panels from selected group */}\n                      {activeCollapseKeys.length > 0 && (\n                        <div style={{ display: 'grid', gridTemplateColumns: 'repeat(auto-fill, minmax(280px, 1fr))', gap: 16 }}>\n                          {groups[activeCollapseKeys[0]]?.map(({ key, panelName }) => {\n                            const isSelected = (panelCounts[key] || 0) > 0;\n                            // Skip if already selected (shown in selected section above)\n                            if (isSelected) return null;\n                            \n                            const shape = getPanelShape(key);\n                            \n                            return (\n                              <Card\n                                key={key}\n                                style={{ \n                                  borderColor: undefined,\n                                  cursor: 'pointer',\n                                  transition: 'all 0.2s'\n                                }}\n                                bodyStyle={{ padding: 12 }}\n                                hoverable\n                                onClick={() => setCount(key, 1)}\n                              >\n                                {/* Panel header with name and add button */}\n                                <div style={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', marginBottom: 12 }}>\n                                  <Typography.Text strong>{panelName}</Typography.Text>\n                                  <Button size=\"small\" type=\"primary\" ghost onClick={(e) => { e.stopPropagation(); setCount(key, 1); }}>\n                                    Add\n                                  </Button>\n                                </div>\n\n                                {/* Panel preview diagram */}\n                                <div style={{ display: 'flex', justifyContent: 'center', marginBottom: 12, minHeight: 120 }}>\n                                  {shape ? (\n                                    <PanelDiagram \n                                      shape={shape} \n                                      label=\"\" \n                                      size={100} \n                                      padding={8}\n                                    />\n                                  ) : (\n                                    <div style={{ \n                                      width: 100, \n                                      height: 100, \n                                      backgroundColor: '#f5f5f5', \n                                      display: 'flex', \n                                      alignItems: 'center', \n                                      justifyContent: 'center',\n                                      borderRadius: 4,\n                                      color: '#999'\n                                    }}>\n                                      No Preview\n                                    </div>\n                                  )}\n                                </div>\n\n                                {/* Panel dimensions and gauge info */}\n                                {shape && patternData?.gauge && (\n                                  <div style={{ fontSize: 11, color: '#666', textAlign: 'center' }}>\n                                    {(() => {\n                                      try {\n                                        const gauge = patternData.gauge || {};\n                                        const scalingFactor = typeof gauge.scaleFactor === 'number' ? gauge.scaleFactor : 1;\n                                        const dimensions = calculatePanelDimensions(shape, scalingFactor);\n                                        if (!dimensions) return null;\n\n                                        const stitchesPerInch = gauge.stitchesPerInch || 0;\n                                        const rowsPerInch = gauge.rowsPerInch || 0;\n                                        \n                                        if (!stitchesPerInch || !rowsPerInch) return null;\n\n                                        const totalStitches = Math.round(dimensions.widthInches * stitchesPerInch);\n                                        const totalRows = Math.round(dimensions.heightInches * rowsPerInch);\n\n                                        return `${totalStitches} × ${totalRows} stitches (${dimensions.widthInches.toFixed(1)}\" × ${dimensions.heightInches.toFixed(1)}\")`;\n                                      } catch (error) {\n                                        return null;\n                                      }\n                                    })()}\n                                  </div>\n                                )}\n                              </Card>\n                            );\n                          })}\n                        </div>\n                      )}\n                    </div>\n                  </div>\n                );\n              })()}\n            </div>\n            \n            {/* Selected panels summary and colorwork action */}\n            {selectedPanels.length > 0 && (\n              <div style={{ marginTop: 16, padding: 12, backgroundColor: '#f0f8ff', borderRadius: 4, border: '1px solid #d6f7ff' }}>\n                <div style={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', flexWrap: 'wrap', gap: 12 }}>\n                  <div>\n                    <Typography.Text style={{ fontSize: 13, color: '#1890ff' }}>\n                      <strong>Selected panels:</strong> {selectedPanels.length} panel type{selectedPanels.length !== 1 ? 's' : ''} \n                      {' '}({Object.values(panelCounts).reduce((sum, count) => sum + (count || 0), 0)} total pieces)\n                    </Typography.Text>\n                    <br />\n                    <Typography.Text style={{ fontSize: 12, color: '#666' }}>\n                      {showColorworkSection \n                        ? `Instance colorwork progress: ${coloredPanels.size} of ${panelInstances.length} instances completed`\n                        : `Colorwork progress: ${coloredPanels.size} of ${selectedPanels.length} panel types have colorwork`\n                      }\n                    </Typography.Text>\n                  </div>\n                  <Button\n                    type=\"primary\"\n                    icon={<EditOutlined />}\n                    onClick={toggleColorworkFlow}\n                  >\n                    {showColorworkSection \n                      ? 'Hide Colorwork Editor' \n                      : 'Edit Colorwork - Per Panel Instance'\n                    }\n                  </Button>\n                </div>\n              </div>\n            )}\n            \n            {/* Inline colorwork editing section */}\n            {showColorworkSection && selectedPanels.length > 0 && (\n              <div \n                data-colorwork-section \n                style={{ \n                  marginTop: 24,\n                  animation: 'fadeInUp 0.3s ease-out'\n                }}\n              >\n                <style>\n                  {`\n                    @keyframes fadeInUp {\n                      from {\n                        opacity: 0;\n                        transform: translateY(20px);\n                      }\n                      to {\n                        opacity: 1;\n                        transform: translateY(0);\n                      }\n                    }\n                  `}\n                </style>\n                <div style={{ \n                  padding: 16, \n                  backgroundColor: '#fff', \n                  borderRadius: 8, \n                  border: '2px solid #1890ff',\n                  boxShadow: '0 4px 12px rgba(24, 144, 255, 0.15)' \n                }}>\n                  {/* Colorwork section header */}\n                  <div style={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', marginBottom: 16 }}>\n                    <div>\n                      <Typography.Title level={4} style={{ margin: 0, color: '#1890ff' }}>\n                        {(() => {\n                          const currentInstance = getCurrentColorworkInstance();\n                          return currentInstance ? (\n                            <>Edit Colorwork - {currentInstance.panelName}</>\n                          ) : (\n                            'Edit Colorwork'\n                          );\n                        })()}\n                      </Typography.Title>\n                      <Typography.Text style={{ fontSize: 13, color: '#666' }}>\n                        Panel instance {currentInstanceIndex + 1} of {panelInstances.length}\n                      </Typography.Text>\n                    </div>\n                    <div style={{ display: 'flex', gap: 8 }}>\n                      <Button \n                        onClick={goToPreviousInstance}\n                        disabled={currentInstanceIndex === 0}\n                      >\n                        Previous Instance\n                      </Button>\n                      <Button \n                        type=\"primary\"\n                        onClick={() => {\n                          const currentInstance = getCurrentColorworkInstance();\n                          if (currentInstance) {\n                            // Mark this specific instance as colored\n                            markPanelAsColored(currentInstance.instanceId);\n                          }\n                          if (currentInstanceIndex < panelInstances.length - 1) {\n                            goToNextInstance();\n                          } else {\n                            // All instances completed\n                            setShowColorworkSection(false);\n                          }\n                        }}\n                      >\n                        {currentInstanceIndex === panelInstances.length - 1 ? 'Complete All Colorwork' : 'Save & Next Instance'}\n                      </Button>\n                      <Button \n                        type=\"text\" \n                        onClick={() => setShowColorworkSection(false)}\n                      >\n                        Close\n                      </Button>\n                    </div>\n                  </div>\n\n                  {/* Instance navigation and copy options */}\n                  <div style={{ marginBottom: 16, padding: 12, backgroundColor: '#fafafa', borderRadius: 6 }}>\n                    <div style={{ display: 'flex', flexWrap: 'wrap', gap: 8, alignItems: 'center' }}>\n                      <Typography.Text style={{ fontSize: 13, marginRight: 16, fontWeight: 500 }}>\n                        <strong>Panel Instances:</strong>\n                      </Typography.Text>\n                      {panelInstances.map((instance, index) => {\n                        const isColored = coloredPanels.has(instance.instanceId);\n                        const isCurrent = index === currentInstanceIndex;\n                        \n                        return (\n                          <div key={instance.instanceId} style={{ display: 'flex', flexDirection: 'column', alignItems: 'center', gap: 4 }}>\n                            <Button\n                              size=\"small\"\n                              type={isCurrent ? \"primary\" : \"default\"}\n                              onClick={() => setCurrentInstanceIndex(index)}\n                              style={{ \n                                fontSize: 11,\n                                minWidth: 80,\n                                backgroundColor: isCurrent ? undefined : isColored ? '#f6ffed' : undefined,\n                                borderColor: isCurrent ? undefined : isColored ? '#b7eb8f' : undefined,\n                              }}\n                            >\n                              {isCurrent ? '● ' : isColored ? '✓ ' : '○ '}\n                              {instance.panelName}\n                            </Button>\n                            {isColored && !isCurrent && (\n                              <Button\n                                size=\"small\"\n                                type=\"text\"\n                                icon={<CopyOutlined />}\n                                onClick={() => {\n                                  const currentInstance = getCurrentColorworkInstance();\n                                  if (currentInstance) {\n                                    // Copy colorwork from this instance to current instance\n                                    dispatch(copyPanelPatternLayers({ \n                                      sourcePanelKey: instance.instanceId, \n                                      targetPanelKey: currentInstance.instanceId \n                                    }) as any);\n                                    \n                                    // Mark current instance as colored after copying\n                                    markPanelAsColored(currentInstance.instanceId);\n                                    message.success(`Copied colorwork from ${instance.panelName} to ${currentInstance.panelName}`);\n                                  }\n                                }}\n                                style={{ fontSize: 10, height: 20, padding: '0 6px' }}\n                              >\n                                Copy\n                              </Button>\n                            )}\n                          </div>\n                        );\n                      })}\n                    </div>\n                  </div>\n\n                  {/* Colorwork editor for current instance */}\n                  {(() => {\n                    const currentInstance = getCurrentColorworkInstance();\n                    if (!currentInstance) return null;\n\n                    const shape = getPanelShape(currentInstance.key);\n                    \n                    // Pass gauge with scale factor to the editor\n                    const wizardGauge = patternData?.gauge || null;\n                    const stitchesPerFour = wizardGauge && typeof wizardGauge.stitchesPerFourInches === 'number'\n                      ? wizardGauge.stitchesPerFourInches\n                      : (wizardGauge && typeof wizardGauge.stitchesPerInch === 'number' ? wizardGauge.stitchesPerInch * 4 : undefined);\n                    const rowsPerFour = wizardGauge && typeof wizardGauge.rowsPerFourInches === 'number'\n                      ? wizardGauge.rowsPerFourInches\n                      : (wizardGauge && typeof wizardGauge.rowsPerInch === 'number' ? wizardGauge.rowsPerInch * 4 : undefined);\n                    const normalizedGauge = wizardGauge && typeof stitchesPerFour === 'number' && typeof rowsPerFour === 'number'\n                      ? {\n                          stitchesPerFourInches: stitchesPerFour,\n                          rowsPerFourInches: rowsPerFour,\n                          scalingFactor: typeof wizardGauge.scaleFactor === 'number' && wizardGauge.scaleFactor > 0 ? wizardGauge.scaleFactor : 1\n                        }\n                      : null;\n\n                    const initialPanel = {\n                      shape: shape || null,\n                      gauge: normalizedGauge\n                    };\n                    \n                    return <ColorworkPanelEditor \n                      key={`${currentInstance.instanceId}-${currentInstanceIndex}`} \n                      {...({ \n                        initialPanel, \n                        previewKey: currentInstance.instanceId,\n                        allSelectedPanelKeys: panelInstances.map(inst => inst.instanceId),\n                        getPanelLabel: (instanceId: string) => {\n                          const inst = panelInstances.find(i => i.instanceId === instanceId);\n                          return inst ? inst.panelName : instanceId;\n                        },\n                        onRequestPreviewKeyChange: (instanceId: string) => {\n                          const instanceIndex = panelInstances.findIndex(i => i.instanceId === instanceId);\n                          if (instanceIndex >= 0) {\n                            setCurrentInstanceIndex(instanceIndex);\n                          }\n                        } \n                      } as any)} \n                    />;\n                  })()}\n                </div>\n              </div>\n            )}\n          </div>\n        )}\n\n\n      </div>\n\n      <div style={{ marginTop: 16 }}>\n        <Button onClick={goPrev} disabled={currentStep === 0} style={{ marginRight: 8 }}>\n          Previous\n        </Button>\n        <Button \n          type=\"primary\" \n          onClick={goNext}\n          disabled={currentStep >= 1}\n        >\n          {currentStep >= 1 ? 'Complete' : 'Next'}\n        </Button>\n        \n        {selectedPanels.length > 0 && currentStep >= 1 && (\n          <Button \n            type=\"default\"\n            style={{ marginLeft: 8 }}\n            onClick={() => {\n              // Navigate to interactive knitting or pattern generation\n              console.log('Ready for knitting with panels:', selectedPanels);\n            }}\n          >\n            Start Knitting\n          </Button>\n        )}\n      </div>\n\n\n    </div>\n  );\n};\n\nexport default WizardView;\n"],"names":["generateGarmentSizes","sizeOrder","getSizeIndex","size","calculateSizeMultiplier","sizeIndex","sizes","mensSize","womensSize","mensSizeIndex","womensSizeIndex","multiplier","sizeName","standardGarmentSizes","garments","toNumber","value","parsed","clampNonNegative","normalizeScale","scale","numeric","traverseShape","trap","xOffset","yOffset","bounds","baseA","baseB","height","horizontalOffset","scaledBaseA","scaledBaseB","scaledHeight","trapWidth","topLeftX","topRightX","bottomLeftX","bottomRightX","topY","bottomY","successors","s","successorWidths","successor","succBaseA","succBaseB","totalWidth","sum","w","childOffset","index","successorHeight","successorWidth","calculatePanelDimensions","shape","safeScale","widthInches","heightInches","WizardView","dispatch","useDispatch","patternData","useSelector","selectPatternData","currentStep","selectCurrentStep","name","setName","useState","showColorworkSection","setShowColorworkSection","currentColorworkPanelIndex","setCurrentColorworkPanelIndex","coloredPanels","setColoredPanels","panelInstances","setPanelInstances","currentInstanceIndex","setCurrentInstanceIndex","isSignedIn","useDriveAuth","libraryData","state","useEffect","loadFullLibrary","setFullLibrary","clearEntries","panelList","useMemo","out","g","shapes","panelName","panelId","initialCounts","panelCounts","setPanelCounts","setCount","key","v","next","updatePatternData","selectedPanelKey","setSelectedPanelKey","resolveLibraryPanel","useCallback","panels","panel","getPanelShape","panelKey","permalink","rawPanelId","panelData","garmentShapes","selectedPanels","k","getPanelLabelForKey","match","p","getCurrentColorworkInstance","getCurrentColorworkPanel","goToNextInstance","prev","goToPreviousInstance","generatePanelInstances","instances","count","i","toggleColorworkFlow","colorworkSection","markPanelAsColored","sourcePanelKey","currentPanel","copyPanelPatternLayers","sourceLabel","targetLabel","message","nextKey","persisted","pick","showAllGarments","setShowAllGarments","activeCollapseKeys","setActiveCollapseKeys","prevStepRef","useRef","selectedGarmentTitles","found","stepRefs","ref","persistGauge","nextFields","current","merged","sPerInch","rPerInch","stitchesPerFourInches","rowsPerFourInches","onGaugeChange","field","perInchValue","onScaleChange","onNameChange","goNext","nextStep","goPrev","previousStep","jsx","jsxs","Typography","el","Input","InputNumber","groups","garmentTitles","Card","PanelDiagram","gauge","scalingFactor","dimensions","stitchesPerInch","rowsPerInch","totalStitches","totalRows","panelInstanceCount","completedInstanceCount","inst","allInstancesCompleted","hasPartialProgress","Select","title","Button","e","EditOutlined","currentInstance","Fragment","instance","isColored","isCurrent","CopyOutlined","wizardGauge","stitchesPerFour","rowsPerFour","normalizedGauge","initialPanel","ColorworkPanelEditor","instanceId","instanceIndex"],"mappings":"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"}