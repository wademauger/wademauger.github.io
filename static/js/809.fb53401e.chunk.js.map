{"version":3,"file":"static/js/809.fb53401e.chunk.js","mappings":"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","sources":["models/VisualMotif.js","data/garments.js","components/PanelDiagram.js","apps/knitting-design/components/PatternSetup.js","apps/knitting-design/components/CustomShapeStep.js","components/PatternDimensionVisualization.js","apps/knitting-design/components/SizingStep.js","apps/knitting-design/components/GaugeStep.js","components/KnitStitch.js","components/SwatchViewer.js","components/PatternEditor.js","components/KnitSwatch.js","apps/knitting-design/components/ColorworkStep.js","apps/knitting-design/components/PreviewStep.js","apps/knitting-design/components/InteractiveKnitting.js","apps/knitting-design/utils/stepColors.js","apps/knitting-design/KnittingDesignApp.js"],"sourcesContent":["class VisualMotif {\r\n    constructor(type, primaryMotif, secondaryMotifs = [], mainColor = \"\", contrastColors = [], successor = null, truncatedBy = 0, horizontalRepeat = 0, verticalRepeat = 0, height = 0) {\r\n        this.type = type;\r\n        this.primaryMotif = primaryMotif;\r\n        this.secondaryMotifs = secondaryMotifs;\r\n        this.mainColor = mainColor;\r\n        this.contrastColors = contrastColors;\r\n        this.successor = successor;\r\n        this.truncatedBy = truncatedBy;\r\n        this.horizontalRepeat = horizontalRepeat;\r\n        this.verticalRepeat = verticalRepeat;\r\n        this.height = height;\r\n    }\r\n\r\n    getChild(row) {\r\n        let currentMotif = this;\r\n        let accumulatedHeight = this.height;\r\n\r\n        while (currentMotif.successor && row >= accumulatedHeight) {\r\n            row -= accumulatedHeight;\r\n            currentMotif = currentMotif.successor;\r\n            accumulatedHeight = currentMotif.height;\r\n        }\r\n\r\n        if (row >= accumulatedHeight) {\r\n            return null;\r\n        }\r\n\r\n        const child = new VisualMotif(\r\n            currentMotif.type,\r\n            currentMotif.primaryMotif,\r\n            currentMotif.secondaryMotifs,\r\n            currentMotif.mainColor,\r\n            currentMotif.contrastColors,\r\n            currentMotif.successor,\r\n            currentMotif.truncatedBy,\r\n            currentMotif.horizontalRepeat,\r\n            currentMotif.verticalRepeat,\r\n            currentMotif.height\r\n        );\r\n        child.truncatedBy = row;\r\n        return child;\r\n    }\r\n}\r\n\r\nexport default VisualMotif;","import VisualMotif from '../models/VisualMotif';\n\n// Helper function to generate systematic garment sizes\n// Based on 10% scaling per size, with Men's Medium = Women's Large as base (1.0)\nconst generateGarmentSizes = () => {\n  const sizeOrder = ['XXS', 'XS', 'S', 'M', 'L', 'XL', 'XXL'];\n  const getSizeIndex = (size) => sizeOrder.indexOf(size) - 3; // M = index 0\n  const calculateSizeMultiplier = (sizeIndex) => Math.pow(1.1, sizeIndex);\n\n  const sizes = {};\n  \n  // Generate all combinations based on Men's M = Women's L equivalency\n  sizeOrder.forEach(mensSize => {\n    sizeOrder.forEach(womensSize => {\n      const mensSizeIndex = getSizeIndex(mensSize);\n      const womensSizeIndex = getSizeIndex(womensSize) - 1; // Offset by 1 for equivalency\n      \n      // Only include sizes where the calculations match\n      if (mensSizeIndex === womensSizeIndex) {\n        const multiplier = calculateSizeMultiplier(mensSizeIndex);\n        const sizeName = `men's ${mensSize.toLowerCase()} / women's ${womensSize.toLowerCase()}`;\n        sizes[sizeName] = Math.round(multiplier * 1000) / 1000; // Round to 3 decimal places\n      }\n    });\n  });\n  \n  return sizes;\n};\n\nconst standardGarmentSizes = generateGarmentSizes();\n\nconst garments = [\n    {\n        \"permalink\": \"cozy-raglan-sweater\",\n        \"title\": \"Cozy Raglan V-Neck Sweater\",\n        \"description\": \"A simple sweater with Raglan sleeves\",\n        \"sizes\": standardGarmentSizes,\n        \"shapes\": {\n            \"Front\":\n            {\n                \"height\": 4,\n                \"baseA\": 25,\n                \"baseB\": 25,\n                \"finishingSteps\": [\"Hang hem.\"],\n                \"successors\": [{\n                    \"height\": 20,\n                    \"baseA\": 25,\n                    \"baseB\": 25,\n                    \"successors\": [\n                        { \"height\": 0, \"baseA\": 1, \"baseB\": 1 },\n                        { \"height\": 8, \"baseA\": 10, \"baseB\": 3 },\n                        { \"height\": 0, \"baseA\": 2, \"baseB\": 2 },\n                        { \"height\": 8, \"baseA\": 10, \"baseB\": 3 },\n                        { \"height\": 0, \"baseA\": 1, \"baseB\": 1 },\n                    ]\n                }],\n            },\n            \"Back\": {\n                \"height\": 4,\n                \"baseA\": 25,\n                \"baseB\": 25,\n                \"finishingSteps\": [\"Hang hem.\"],\n                \"successors\": [{\n                    \"height\": 20,\n                    \"baseA\": 25,\n                    \"baseB\": 25,\n                    \"successors\": [\n                        { \"height\": 0, \"baseA\": 1, \"baseB\": 1 },\n                        { \"height\": 8, \"baseA\": 23, \"baseB\": 15 },\n                        { \"height\": 0, \"baseA\": 1, \"baseB\": 1 },\n                    ],\n                }],\n            },\n            \"Sleeves (make 2)\": {\n                \"height\": 4,\n                \"baseA\": 10,\n                \"baseB\": 10,\n                \"successors\": [\n                    {\n                        \"height\": 14, \"baseA\": 10, \"baseB\": 20, \"successors\": [\n                            { \"height\": 7, \"baseA\": 20, \"baseB\": 3 }\n                        ]\n                    },\n                ]\n            }\n        },\n        \"finishingSteps\": [\n            \"Lay out the panels and sleeves, right sides together, and knit the collar in whatever style you prefer.\",\n            \"Sew up the side seams and sleeve seams.\",\n            \"Weave in all ends.\",\n        ]\n    }, {\n        \"permalink\": \"seam-top-hat\",\n        \"title\": \"Seam-Top Hat\",\n        \"description\": \"A simple hat with an elegant construction\",\n        \"sizes\": {\n            \"One Size\": 1,\n        },\n        \"shapes\": {\n            \"Hat\": {\n                \"height\": 4,\n                \"baseA\": 22,\n                \"baseB\": 22,\n                \"finishingSteps\": [\"Hang hem.\"],\n                \"successors\": [\n                    {\n                        \"height\": 10,\n                        \"baseA\": 22,\n                        \"baseB\": 22,\n                        \"successors\": [\n                            { \"height\": 4, \"baseA\": 5.5, \"baseB\": 0.2 },\n                            { \"height\": 4, \"baseA\": 5.5, \"baseB\": 0.2 },\n                            { \"height\": 4, \"baseA\": 5.5, \"baseB\": 0.2 },\n                            { \"height\": 4, \"baseA\": 5.5, \"baseB\": 0.2 },\n                        ]\n                    }\n                ]\n            }\n        },\n        \"finishingSteps\": [\"Either use sew-as-you-go to join the top panels on the machine, or sew with a tapestry needle after binding off.\", \"Sew up the back seam.\", \"Add braided ear strings if desired.\"],\n    }, {\n        \"permalink\": \"drop-shoulder-crew-neck-sweater\",\n        \"title\": \"Drop-Shoulder Crew Neck Sweater\",\n        \"description\": \"A cozy drop-shoulder sweater with a classic crew neck\",\n        \"sizes\": standardGarmentSizes,\n        \"shapes\": { // TODO: Shape the neckline/shoulders for this sweater\n            \"Front\": {\n                \"height\": 5,\n                \"baseA\": 5,\n                \"baseB\": 5,\n                \"successors\": [{\n                    \"height\": 5,\n                    \"baseA\": 5,\n                    \"baseB\": 5,\n                    \"successors\": [{\n                        \"height\": 5,\n                        \"baseA\": 5,\n                        \"baseB\": 5,\n                    }]\n                }],\n            },\n            \"Back\": {\n                \"height\": 5,\n                \"baseA\": 30,\n                \"baseB\": 30,\n                \"finishingSteps\": [\"Hang hem.\"],\n                \"successors\": [{\n                    \"height\": 20,\n                    \"baseA\": 30,\n                    \"baseB\": 30,\n                    \"successors\": [\n                        { \"height\": 0, \"baseA\": 3, \"baseB\": 3 },\n                        { \"height\": 10, \"baseA\": 10, \"baseB\": 10 },\n                        { \"height\": 0, \"baseA\": 4, \"baseB\": 4 },\n                        { \"height\": 10, \"baseA\": 10, \"baseB\": 10 },\n                        { \"height\": 0, \"baseA\": 3, \"baseB\": 3 },\n                    ],\n                }],\n            },\n            \"Sleeves (make 2)\": {\n                \"height\": 4,\n                \"baseA\": 10,\n                \"baseB\": 10,\n                \"successors\": [\n                    { \"height\": 20, \"baseA\": 10, \"baseB\": 21 },\n                ]\n            }\n        }\n    }\n];\n\nconst colorworkCharts = {\n    \"Solid\": [[0]],\n    \"Stripes_2x2\": [[0, 0, 1, 1]],\n    \"Stripes_4x2\": [[0, 0, 0, 0, 1, 1]],\n    \"Stripes_4x4\": [[0, 0, 0, 0, 1, 1, 1, 1]],\n    \"Checkerboard\": [\n        [0, 1],\n        [1, 0],\n    ],\n    \"Checkerboard_4x4\": [\n        [0, 0, 1, 1],\n        [0, 0, 1, 1],\n        [1, 1, 0, 0],\n        [1, 1, 0, 0],\n    ],\n    \"Arguyle\": [\n        [0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0],\n        [0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0],\n        [0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0],\n        [0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0],\n        [0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0],\n        [0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0],\n        [0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0],\n        [0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0],\n        [0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0],\n        [0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0],\n        [0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0],\n        [0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0],\n        [0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0],\n        [0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0],\n        [0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0],\n        [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],\n        [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],\n        [0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0],\n        [0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0],\n        [0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0],\n        [0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0],\n        [0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0],\n        [0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0],\n        [0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0],\n        [0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0],\n        [0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0],\n        [0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0],\n        [0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0],\n        [0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0],\n        [0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0],\n        [0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0],\n        [0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0],\n    ],\n};\n\nconst visualMotifs = {\n    /*\n        {\n            type: 'SOLID|STANDED|INTARSIA',\n            primaryMotif: 'Stripes_4x2',\n            secondaryMotifs: ['stripes_4x4'],\n            defaultColors: ['#ffffff'],\n            successor: null,\n            truncatedBy: 0,\n            horizontalRepeat: 5|undefined,\n            verticalRepeat 10|undefined,\n            height: 5|undefined, // if *motif* properties are defined, height is unused (infer from motifs+repeats)\n        },\n    */\n    blackAndWhiteStripes: new VisualMotif({\n        type: 'SOLID',\n        defaultColors: ['#ffffff'],\n        verticalRepeat: 10,\n        height: 4,\n        successor: {\n            type: 'SOLID',\n            defaultColors: ['#ffffff'],\n            height: 2\n        },\n    }),\n    redAndWhiteStripes: new VisualMotif({\n        type: 'SOLID',\n        defaultColors: ['#ff0000'],\n        verticalRepeat: 10,\n        height: 4,\n        successor: {\n            type: 'SOLID',\n            defaultColors: ['#ffffff'],\n            verticalRepeat: 10,\n            height: 4\n        },\n    }),\n    checkerboard: new VisualMotif({\n        type: 'STRANDED',\n        defaultColors: ['#ffffff', '#000000'],\n        primaryMotif: 'Checkerboard',\n        verticalRepeat: 4,\n    }),\n    argyle: new VisualMotif({\n        type: 'INTARSIA',\n        defaultColors: ['#ffffff', '#000000'],\n        primaryMotif: 'Argyle',\n    }),\n    solidWhite: new VisualMotif({\n        type: 'SOLID',\n        defaultColors: ['#ffffff'],\n        verticalRepeat: 10,\n        height: 4,\n    }),\n\n};\n\n\nexport { garments, colorworkCharts, visualMotifs };","import { theme } from 'antd'; // Import theme from antd\r\n\r\nconst renderTrapezoid = (shape, scale, xOffset = 0, yOffset = 0, fillColor) => {\r\n    const width = Math.max(shape.baseA, shape.baseB) * scale;\r\n    const xTopLeft = xOffset + (width - shape.baseB * scale) / 2 + (shape.baseBHorizontalOffset || 0) * scale;\r\n    const xTopRight = xOffset + (width + shape.baseB * scale) / 2 + (shape.baseBHorizontalOffset || 0) * scale;\r\n    const xBottomLeft = xOffset + (width - shape.baseA * scale) / 2;\r\n    const xBottomRight = xOffset + (width + shape.baseA * scale) / 2;\r\n    const yTop = yOffset;\r\n    const yBottom = yOffset + shape.height * scale;\r\n    return (\r\n        <polygon\r\n            key={`${xOffset}-${yOffset}`}\r\n            points={`${xTopLeft},${yTop} ${xTopRight},${yTop} ${xBottomRight},${yBottom} ${xBottomLeft},${yBottom}`}\r\n            fill={fillColor}\r\n            stroke=\"#a1a8af\"\r\n            strokeWidth={3}\r\n            strokeLinejoin=\"round\"\r\n        />\r\n    );\r\n};\r\n\r\nconst renderHierarchy = (trap, scale, xOffset = 0, yOffset = 0, dimensions = { minX: 0, maxX: 0, minY: 0, maxY: 0 }, fillColor) => {\r\n    const elements = [];\r\n    const trapWidth = Math.max(trap.baseA, trap.baseB) * scale;\r\n\r\n    // Compute bounding box of the current trapezoid\r\n    const xTopLeft = xOffset + (trapWidth - trap.baseB * scale) / 2 + (trap.baseBHorizontalOffset || 0) * scale;\r\n    const xTopRight = xOffset + (trapWidth + trap.baseB * scale) / 2 + (trap.baseBHorizontalOffset || 0) * scale;\r\n    const xBottomLeft = xOffset + (trapWidth - trap.baseA * scale) / 2;\r\n    const xBottomRight = xOffset + (trapWidth + trap.baseA * scale) / 2;\r\n    const yTop = yOffset;\r\n    const yBottom = yOffset + trap.height * scale;\r\n\r\n    // Update dimensions\r\n    dimensions.minX = Math.min(dimensions.minX, xTopLeft, xTopRight, xBottomLeft, xBottomRight);\r\n    dimensions.maxX = Math.max(dimensions.maxX, xTopLeft, xTopRight, xBottomLeft, xBottomRight);\r\n    dimensions.minY = Math.min(dimensions.minY, yTop, yBottom);\r\n    dimensions.maxY = Math.max(dimensions.maxY, yTop, yBottom);\r\n\r\n    // Render the current trapezoid\r\n    elements.push(renderTrapezoid(trap, scale, xOffset, yOffset, fillColor));\r\n\r\n    if (trap.successors && trap.successors.length > 0) {\r\n        // Compute total width of all successors\r\n        const successorWidths = trap.successors.map(s => Math.max(s.baseA, s.baseB) * scale);\r\n        const totalSuccessorWidth = successorWidths.reduce((sum, w) => sum + w, 0);\r\n\r\n        // Compute initial offset to center the row\r\n        let childXOffset = xOffset + (trapWidth - totalSuccessorWidth) / 2;\r\n\r\n        // **Reverse the order of successors before rendering**\r\n        for (let i = trap.successors.length - 1; i >= 0; i--) {\r\n            const successor = trap.successors[i];\r\n            const successorWidth = successorWidths[i];\r\n\r\n            // Place each successor ABOVE the parent (but now in the correct order)\r\n            const childDimensions = { minX: dimensions.minX, maxX: dimensions.maxX, minY: dimensions.minY, maxY: dimensions.maxY };\r\n            elements.push(...renderHierarchy(successor, scale, childXOffset, yTop - successor.height * scale, childDimensions, fillColor));\r\n\r\n            // Update dimensions\r\n            dimensions.minX = childDimensions.minX;\r\n            dimensions.maxX = childDimensions.maxX;\r\n            dimensions.minY = childDimensions.minY;\r\n            dimensions.maxY = childDimensions.maxY;\r\n\r\n            // Move x-offset for the next successor\r\n            childXOffset += successorWidth;\r\n        }\r\n    }\r\n\r\n    return elements;\r\n};\r\n\r\nconst PanelDiagram = ({ shape, label = \"\", size = 200, padding = 10 }) => {\r\n    const { token } = theme.useToken(); // Get the theme token\r\n    const fillColor = token.colorPrimary; // Get the primary color from the theme\r\n\r\n    let dimensions = { minX: 0, maxX: 0, minY: 0, maxY: 0 };\r\n\r\n    // First pass: Compute bounding box *including negative coordinates*\r\n    renderHierarchy(shape, 1, 0, 0, dimensions, fillColor);\r\n\r\n    const width = dimensions.maxX - dimensions.minX;\r\n    const height = dimensions.maxY - dimensions.minY;\r\n\r\n    // Calculate scale factor\r\n    const availableWidth = size - 2 * padding;\r\n    const availableHeight = size - 2 * padding;\r\n    const scaleFactor = Math.min(availableWidth / width, availableHeight / height);\r\n\r\n    // Calculate scaled dimensions and translation\r\n    const scaledWidth = width * scaleFactor;\r\n    const scaledHeight = height * scaleFactor;\r\n\r\n    // Adjust translation to account for negative minX and minY ***\r\n    const translateX = (size - scaledWidth) / 2 - dimensions.minX * scaleFactor + padding;\r\n    const translateY = (size - scaledHeight) / 2 - dimensions.minY * scaleFactor + padding;\r\n\r\n    // Second pass: Render with the calculated scale.  This isn't strictly necessary, but is good practice.\r\n    dimensions = { minX: 0, maxX: 0, minY: 0, maxY: 0 };\r\n    const elements = renderHierarchy(shape, scaleFactor, 0, 0, dimensions, fillColor);\r\n\r\n    return (\r\n        <div style={{ width: size + padding * 2, height: size + padding * 3, float: 'left' }}>\r\n            <svg\r\n                width={size}\r\n                height={size}\r\n                viewBox={`0 0 ${size} ${size + 4}`}\r\n                preserveAspectRatio=\"none\" // Or \"xMidYMid meet\" if you want to maintain aspect ratio\r\n            >\r\n                <g transform={`translate(${translateX}, ${translateY})`}>\r\n                    {elements}\r\n                </g>\r\n            </svg>\r\n            {label}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport { PanelDiagram };","import React, { useEffect } from 'react';\nimport { Card, Radio, Button, Row, Col, Typography, Space } from 'antd';\nimport { garments } from '../../../data/garments';\nimport { PanelDiagram } from '../../../components/PanelDiagram';\n\n\nconst { Title, Text } = Typography;\n\nconst PatternSetup = ({ data, onChange, onNext, onJumpToStep }) => {\n  // Get garments from data and add custom option\n  const availableGarments = garments.map(garment => ({\n    id: garment.permalink,\n    name: garment.title,\n    description: garment.description,\n    shapes: garment.shapes,\n    sizes: garment.sizes,\n    finishingSteps: garment.finishingSteps\n  }));\n\n  // Add custom option as first item\n  const basePatterns = [\n    { \n      id: 'custom', \n      name: 'Create Custom Pattern', \n      description: 'Design your own pattern from scratch',\n      shapes: null\n    },\n    ...availableGarments\n  ];\n\n  // Auto-select custom pattern if none is selected\n  useEffect(() => {\n    if (!data.basePattern) {\n      const customPattern = basePatterns.find(p => p.id === 'custom');\n      onChange({ basePattern: customPattern });\n    }\n  }, [data.basePattern, onChange, basePatterns]);\n\n  const handlePatternSelect = (patternId) => {\n    const pattern = basePatterns.find(p => p.id === patternId);\n    onChange({ basePattern: pattern });\n  };\n\n  const handleNext = () => {\n    onNext();\n  };\n\n  return (\n    <div className=\"pattern-setup\">\n      <Row gutter={[24, 24]}>\n        <Col span={24}>\n          <Card>\n            <Title level={2}>Choose a Pattern</Title>\n            <Text type=\"secondary\">\n              Select a base pattern to start from. You'll be able to modify or customize any pattern in the next step.\n            </Text>\n          </Card>\n        </Col>\n\n        <Col span={24}>\n          <Card title=\"Available Patterns\">\n            <div style={{ maxHeight: '500px', overflowY: 'auto' }}>\n              <Radio.Group \n                value={data.basePattern?.id || 'custom'} \n                onChange={(e) => handlePatternSelect(e.target.value)}\n                style={{ width: '100%' }}\n              >\n                <Space direction=\"vertical\" size=\"middle\" style={{ width: '100%' }}>\n                  {basePatterns.map(pattern => (\n                    <Radio \n                      key={pattern.id} \n                      value={pattern.id}\n                      style={{ \n                        display: 'flex',\n                        alignItems: 'flex-start',\n                        padding: '16px',\n                        border: '1px solid #f0f0f0',\n                        borderRadius: '8px',\n                        marginBottom: '12px',\n                        width: '100%',\n                        backgroundColor: data.basePattern?.id === pattern.id ? '#f6ffed' : '#fff'\n                      }}\n                    >\n                      <div style={{ display: 'flex', width: '100%', alignItems: 'center' }}>\n                        {/* Pattern diagram on the left */}\n                        {pattern.shapes && (\n                          <div style={{ marginRight: '20px', flexShrink: 0 }}>\n                            <div style={{ display: 'flex', gap: '10px' }}>\n                              {Object.entries(pattern.shapes).slice(0, 3).map(([shapeName, shape]) => (\n                                <div key={shapeName} style={{ textAlign: 'center' }}>\n                                  <PanelDiagram \n                                    shape={shape} \n                                    label=\"\"\n                                    size={80}\n                                    padding={8}\n                                  />\n                                  <div style={{ fontSize: '11px', color: '#666', marginTop: '4px' }}>\n                                    {shapeName}\n                                  </div>\n                                </div>\n                              ))}\n                            </div>\n                          </div>\n                        )}\n                        \n                        {/* Pattern info on the right */}\n                        <div style={{ flex: 1 }}>\n                          <div style={{ fontWeight: 'bold', marginBottom: '6px', fontSize: '16px' }}>\n                            {pattern.name}\n                          </div>\n                          <div style={{ color: '#666', fontSize: '14px', marginBottom: '10px' }}>\n                            {pattern.description}\n                          </div>\n                          {pattern.sizes && (\n                            <div style={{ fontSize: '12px', color: '#999' }}>\n                              Available sizes: {Object.keys(pattern.sizes).join(', ')}\n                            </div>\n                          )}\n                          {pattern.id === 'custom' && (\n                            <div style={{ color: '#1890ff', fontSize: '13px', fontStyle: 'italic', fontWeight: 'bold' }}>\n                              Design your own shapes and construction\n                            </div>\n                          )}\n                        </div>\n                      </div>\n                    </Radio>\n                  ))}\n                </Space>\n              </Radio.Group>\n            </div>\n          </Card>\n        </Col>\n\n        <Col span={24}>\n          <div style={{ textAlign: 'right', marginTop: '24px' }}>\n            <Space>\n              <Button \n                size=\"large\"\n                type=\"primary\"\n                onClick={handleNext}\n                disabled={!data.basePattern}\n              >\n                Next: Pattern Editor\n              </Button>\n              <Button \n                size=\"large\"\n                onClick={() => {\n                  // Jump to step 2 (Sizing)\n                  if (data.basePattern && onJumpToStep) {\n                    onJumpToStep(2);\n                  }\n                }}\n                disabled={!data.basePattern}\n              >\n                Skip to Sizing\n              </Button>\n            </Space>\n          </div>\n        </Col>\n      </Row>\n    </div>\n  );\n};\n\nexport default PatternSetup;\n","import React, { useState } from 'react';\nimport { Card, Form, Input, InputNumber, Button, Row, Col, Typography, Space, Divider, Select, message, Modal } from 'antd';\nimport { PlusOutlined, DeleteOutlined, EyeOutlined, EditOutlined } from '@ant-design/icons';\nimport { PanelDiagram } from '../../../components/PanelDiagram';\n\n\nconst { Title, Text } = Typography;\nconst { Option } = Select;\nconst { TextArea } = Input;\n\nconst CustomShapeStep = ({ data, onChange, onNext, onBack }) => {\n  const [form] = Form.useForm();\n  const [shapes, setShapes] = useState({});\n  const [currentShape, setCurrentShape] = useState(null);\n  const [editingShape, setEditingShape] = useState(null);\n  const [previewShape, setPreviewShape] = useState(null);\n\n  // Initialize shapes from either custom shapes or base pattern shapes\n  React.useEffect(() => {\n    let initialShapes = {};\n    \n    if (data.customShapes && Object.keys(data.customShapes).length > 0) {\n      // Use existing custom shapes\n      initialShapes = data.customShapes;\n    } else if (data.basePattern && data.basePattern.shapes && data.basePattern.id !== 'custom') {\n      // Load shapes from the selected base pattern as starting points\n      initialShapes = { ...data.basePattern.shapes };\n    }\n    \n    setShapes(initialShapes);\n  }, [data.basePattern, data.customShapes]);\n\n  // Initialize with a basic panel template\n  const createNewShape = () => {\n    return {\n      height: 10,\n      baseA: 20,\n      baseB: 20,\n      baseBHorizontalOffset: 0,\n      successors: [],\n      finishingSteps: []\n    };\n  };\n\n  const handleAddShape = () => {\n    const shapeName = `Panel ${Object.keys(shapes).length + 1}`;\n    setEditingShape({ name: shapeName, shape: createNewShape() });\n  };\n\n  const handleEditShape = (shapeName) => {\n    setEditingShape({ name: shapeName, shape: { ...shapes[shapeName] } });\n  };\n\n  const handleSaveShape = (shapeData) => {\n    const newShapes = { ...shapes, [shapeData.name]: shapeData.shape };\n    setShapes(newShapes);\n    onChange({ \n      ...data, \n      customShapes: newShapes,\n      basePattern: {\n        id: 'custom',\n        name: 'Custom Pattern',\n        description: 'Custom designed pattern',\n        shapes: newShapes\n      }\n    });\n    setEditingShape(null);\n  };\n\n  const handleDeleteShape = (shapeName) => {\n    const newShapes = { ...shapes };\n    delete newShapes[shapeName];\n    setShapes(newShapes);\n    onChange({ ...data, customShapes: newShapes });\n  };\n\n  const handleNext = () => {\n    if (!data.name || data.name.trim() === '') {\n      message.warning('Please enter a pattern name');\n      return;\n    }\n    if (Object.keys(shapes).length === 0) {\n      message.warning('Please create or modify at least one panel to continue');\n      return;\n    }\n    onNext();\n  };\n\n  const isCustomPattern = data.basePattern?.id === 'custom';\n  const patternTitle = isCustomPattern ? 'Custom Pattern Design' : 'Pattern Editor';\n  const patternDescription = isCustomPattern \n    ? 'Give your pattern a name and description, then create custom panels for your pattern. Each panel represents a knitted piece like front, back, or sleeves.'\n    : 'Modify the selected pattern or add new panels. You can edit existing shapes or create entirely new ones.';\n\n  return (\n    <div className=\"custom-shape-step\">\n      <Row gutter={[24, 24]}>\n        <Col span={24}>\n          <Card>\n            <Title level={2}>{patternTitle}</Title>\n            <Text type=\"secondary\">\n              {patternDescription}\n            </Text>\n          </Card>\n        </Col>\n\n        <Col span={24}>\n          <Card title=\"Pattern Information\" style={{ marginBottom: '16px' }}>\n            <Row gutter={[24, 16]}>\n              <Col lg={12} md={24}>\n                <Form layout=\"vertical\">\n                  <Form.Item label=\"Pattern Name\" required>\n                    <Input \n                      value={data.name || data.basePattern?.name || ''} \n                      onChange={(e) => onChange({ ...data, name: e.target.value })}\n                      placeholder={isCustomPattern ? \"Enter your pattern name (e.g., My First Sweater)\" : \"Modify pattern name or keep original\"}\n                      size=\"large\"\n                    />\n                  </Form.Item>\n                </Form>\n              </Col>\n              <Col lg={12} md={24}>\n                <Form layout=\"vertical\">\n                  <Form.Item label=\"Description\">\n                    <TextArea \n                      value={data.description || data.basePattern?.description || ''} \n                      onChange={(e) => onChange({ ...data, description: e.target.value })}\n                      placeholder={isCustomPattern ? \"Describe your custom pattern...\" : \"Modify pattern description or add your own notes...\"}\n                      rows={4}\n                    />\n                  </Form.Item>\n                </Form>\n              </Col>\n            </Row>\n          </Card>\n        </Col>\n\n        <Col span={24}>\n          <Card \n            title={isCustomPattern ? \"Pattern Panels\" : \"Edit Pattern Panels\"} \n            extra={\n              <Button \n                type=\"primary\" \n                icon={<PlusOutlined />} \n                onClick={handleAddShape}\n              >\n                {isCustomPattern ? \"New Panel\" : \"Add Panel\"}\n              </Button>\n            }\n          >\n            {Object.keys(shapes).length === 0 ? (\n              <div style={{ textAlign: 'center', padding: '40px', color: '#666' }}>\n                <Text>\n                  {isCustomPattern \n                    ? 'No panels created yet. Click \"Add Panel\" to start designing your pattern.'\n                    : 'No panels available from the selected pattern. Click \"Add Panel\" to create new panels.'}\n                </Text>\n              </div>\n            ) : (\n              <Row gutter={[16, 16]}>\n                {Object.entries(shapes).map(([shapeName, shape]) => (\n                  <Col lg={6} md={8} sm={12} xs={24} key={shapeName}>\n                    <Card \n                      size=\"small\"\n                      title={shapeName}\n                      extra={\n                        <Space>\n                          <Button \n                            size=\"small\" \n                            icon={<EyeOutlined />} \n                            onClick={() => setPreviewShape({ name: shapeName, shape })}\n                          />\n                          <Button \n                            size=\"small\" \n                            icon={<EditOutlined />} \n                            onClick={() => handleEditShape(shapeName)}\n                          />\n                          <Button \n                            size=\"small\" \n                            icon={<DeleteOutlined />} \n                            danger\n                            onClick={() => handleDeleteShape(shapeName)}\n                          />\n                        </Space>\n                      }\n                    >\n                      <div style={{ textAlign: 'center' }}>\n                        <PanelDiagram \n                          shape={shape} \n                          label=\"\"\n                          size={120}\n                          padding={10}\n                        />\n                        <Text type=\"secondary\" style={{ fontSize: '12px' }}>\n                          {shape.height}h × {shape.baseA}w → {shape.baseB}w\n                        </Text>\n                      </div>\n                    </Card>\n                  </Col>\n                ))}\n              </Row>\n            )}\n          </Card>\n        </Col>\n\n        <Col span={24}>\n          <div style={{ display: 'flex', justifyContent: 'space-between', marginTop: '24px' }}>\n            <Button \n              size=\"large\" \n              onClick={onBack}\n            >\n              Back to Setup\n            </Button>\n            <Button \n              size=\"large\"\n              type=\"primary\"\n              onClick={handleNext}\n              disabled={Object.keys(shapes).length === 0}\n            >\n              Next: Sizing\n            </Button>\n          </div>\n        </Col>\n      </Row>\n\n      {/* Shape Editor Modal */}\n      <ShapeEditorModal\n        visible={!!editingShape}\n        shapeData={editingShape}\n        existingShapes={shapes}\n        onSave={handleSaveShape}\n        onCancel={() => setEditingShape(null)}\n      />\n\n      {/* Shape Preview Modal */}\n      <Modal\n        title={previewShape?.name}\n        open={!!previewShape}\n        onCancel={() => setPreviewShape(null)}\n        footer={null}\n        width={400}\n      >\n        {previewShape && (\n          <div style={{ textAlign: 'center' }}>\n            <PanelDiagram \n              shape={previewShape.shape} \n              label=\"\"\n              size={300}\n              padding={20}\n            />\n          </div>\n        )}\n      </Modal>\n    </div>\n  );\n};\n\n// Shape Editor Modal Component\nconst ShapeEditorModal = ({ visible, shapeData, onSave, onCancel, existingShapes = {} }) => {\n  const [form] = Form.useForm();\n  const [shape, setShape] = useState(null);\n  const [successors, setSuccessors] = useState([]);\n\n  React.useEffect(() => {\n    if (visible && shapeData) {\n      setShape({ ...shapeData.shape });\n      setSuccessors(shapeData.shape.successors || []);\n      form.setFieldsValue({\n        name: shapeData.name,\n        height: shapeData.shape.height,\n        baseA: shapeData.shape.baseA,\n        baseB: shapeData.shape.baseB,\n        baseBHorizontalOffset: shapeData.shape.baseBHorizontalOffset || 0\n      });\n    }\n  }, [visible, shapeData, form]);\n\n  const handleSave = () => {\n    form.validateFields().then(values => {\n      const updatedShape = {\n        ...shape,\n        height: values.height,\n        baseA: values.baseA,\n        baseB: values.baseB,\n        baseBHorizontalOffset: values.baseBHorizontalOffset,\n        successors: successors,\n        finishingSteps: shape.finishingSteps || []\n      };\n      onSave({ name: values.name, shape: updatedShape });\n    });\n  };\n\n  const handleFieldChange = (field, value) => {\n    const updatedShape = { ...shape, [field]: value };\n    setShape(updatedShape);\n  };\n\n  const handleAddSuccessor = (parentPath = []) => {\n    let newSuccessor;\n    \n    if (parentPath.length === 0) {\n      // Adding to root level - use base shape dimensions as parent\n      const parentHeight = shape.height || 10;\n      const parentBaseA = shape.baseA || 10;\n      const parentBaseB = shape.baseB || 10;\n      \n      newSuccessor = {\n        height: Math.max(1, Math.round(parentHeight / 2)),\n        baseA: Math.max(1, Math.round(parentBaseA / 2)),\n        baseB: Math.max(1, Math.round(parentBaseB / 2)),\n        baseBHorizontalOffset: 0,\n        successors: [],\n        finishingSteps: []\n      };\n      \n      setSuccessors([...successors, newSuccessor]);\n    } else {\n      // Adding to nested successor - need to deep clone the structure\n      const newSuccessors = JSON.parse(JSON.stringify(successors));\n      let current = newSuccessors;\n      \n      // Navigate to the parent, ensuring arrays are properly cloned\n      for (let i = 0; i < parentPath.length - 1; i++) {\n        const index = parentPath[i];\n        if (!current[index]) return; // Safety check\n        current = current[index].successors;\n      }\n      \n      // Get parent dimensions\n      const parentIndex = parentPath[parentPath.length - 1];\n      if (!current[parentIndex]) return; // Safety check\n      const parent = current[parentIndex];\n      \n      newSuccessor = {\n        height: Math.max(1, Math.round(parent.height / 2)),\n        baseA: Math.max(1, Math.round(parent.baseA / 2)),\n        baseB: Math.max(1, Math.round(parent.baseB / 2)),\n        baseBHorizontalOffset: 0,\n        successors: [],\n        finishingSteps: []\n      };\n      \n      // Add to the parent's successors\n      if (!current[parentIndex].successors) {\n        current[parentIndex].successors = [];\n      }\n      current[parentIndex].successors.push(newSuccessor);\n      \n      setSuccessors(newSuccessors);\n    }\n  };\n\n  const handleRemoveSuccessor = (path) => {\n    if (path.length === 1) {\n      // Removing from root level\n      const newSuccessors = successors.filter((_, i) => i !== path[0]);\n      setSuccessors(newSuccessors);\n    } else {\n      // Removing from nested level - deep clone the structure\n      const newSuccessors = JSON.parse(JSON.stringify(successors));\n      let current = newSuccessors;\n      \n      // Navigate to the parent\n      for (let i = 0; i < path.length - 1; i++) {\n        const index = path[i];\n        if (!current[index]) return; // Safety check\n        current = current[index].successors;\n      }\n      \n      // Remove from parent's successors\n      const indexToRemove = path[path.length - 1];\n      if (current && Array.isArray(current)) {\n        current.splice(indexToRemove, 1);\n        setSuccessors(newSuccessors);\n      }\n    }\n  };\n\n  const handleSuccessorChange = (path, field, value) => {\n    // Deep clone the structure\n    const newSuccessors = JSON.parse(JSON.stringify(successors));\n    let current = newSuccessors;\n    \n    // Navigate to the target successor\n    for (let i = 0; i < path.length - 1; i++) {\n      const index = path[i];\n      if (!current[index]) return; // Safety check\n      current = current[index].successors;\n    }\n    \n    // Update the field\n    const targetIndex = path[path.length - 1];\n    if (current && current[targetIndex]) {\n      current[targetIndex] = { ...current[targetIndex], [field]: value };\n      setSuccessors(newSuccessors);\n    }\n  };\n\n  // Recursive component to render successor hierarchy\n  const SuccessorItem = ({ successor, path, level = 0 }) => {\n    const pathString = path.join('-');\n    const indent = level * 20;\n    \n    return (\n      <div style={{ marginLeft: `${indent}px` }}>\n        <Card key={pathString} size=\"small\" style={{ backgroundColor: level === 0 ? '#f9f9f9' : '#f0f0f0', marginBottom: '8px' }}>\n          <Row gutter={[12, 12]} align=\"middle\">\n            <Col span={3}>\n              <Text strong style={{ fontSize: '12px' }}>\n                {level === 0 ? `Level ${path[0] + 1}` : `Child ${path[path.length - 1] + 1}`}\n              </Text>\n            </Col>\n            <Col span={4}>\n              <div>\n                <Text style={{ fontSize: '11px' }}>Height</Text>\n                <InputNumber\n                  size=\"small\"\n                  min={1}\n                  value={successor.height}\n                  onChange={(value) => handleSuccessorChange(path, 'height', value)}\n                  style={{ width: '100%' }}\n                />\n              </div>\n            </Col>\n            <Col span={4}>\n              <div>\n                <Text style={{ fontSize: '11px' }}>Bottom W</Text>\n                <InputNumber\n                  size=\"small\"\n                  min={0}\n                  value={successor.baseA}\n                  onChange={(value) => handleSuccessorChange(path, 'baseA', value)}\n                  style={{ width: '100%' }}\n                />\n              </div>\n            </Col>\n            <Col span={4}>\n              <div>\n                <Text style={{ fontSize: '11px' }}>Top W</Text>\n                <InputNumber\n                  size=\"small\"\n                  min={0}\n                  value={successor.baseB}\n                  onChange={(value) => handleSuccessorChange(path, 'baseB', value)}\n                  style={{ width: '100%' }}\n                />\n              </div>\n            </Col>\n            <Col span={4}>\n              <div>\n                <Text style={{ fontSize: '11px' }}>Offset</Text>\n                <InputNumber\n                  size=\"small\"\n                  value={successor.baseBHorizontalOffset || 0}\n                  onChange={(value) => handleSuccessorChange(path, 'baseBHorizontalOffset', value)}\n                  style={{ width: '100%' }}\n                />\n              </div>\n            </Col>\n            <Col span={5}>\n              <Space size=\"small\">\n                <Button\n                  type=\"dashed\"\n                  size=\"small\"\n                  icon={<PlusOutlined />}\n                  onClick={() => handleAddSuccessor(path)}\n                  title=\"Add child successor\"\n                  style={{ fontSize: '10px' }}\n                >\n                  Child\n                </Button>\n                <Button\n                  danger\n                  size=\"small\"\n                  icon={<DeleteOutlined />}\n                  onClick={() => handleRemoveSuccessor(path)}\n                  title=\"Remove this successor\"\n                  style={{ fontSize: '10px' }}\n                />\n              </Space>\n            </Col>\n          </Row>\n        </Card>\n        \n        {/* Render child successors recursively */}\n        {successor.successors && successor.successors.length > 0 && (\n          <div style={{ marginTop: '4px' }}>\n            {successor.successors.map((childSuccessor, childIndex) => (\n              <SuccessorItem\n                key={`${pathString}-${childIndex}`}\n                successor={childSuccessor}\n                path={[...path, childIndex]}\n                level={level + 1}\n              />\n            ))}\n          </div>\n        )}\n      </div>\n    );\n  };\n\n  if (!shape) return null;\n\n  return (\n    <Modal\n      title=\"Edit Panel\"\n      open={visible}\n      onOk={handleSave}\n      onCancel={onCancel}\n      width={1000}\n      style={{ top: 20 }}\n    >\n      <Row gutter={24}>\n        <Col span={12}>\n          <Form form={form} layout=\"vertical\">\n            <Form.Item\n              name=\"name\"\n              label=\"Panel Name\"\n              rules={[{ required: true, message: 'Please enter a panel name' }]}\n            >\n              <Input placeholder=\"Front, Back, Sleeve, etc.\" />\n            </Form.Item>\n\n            <Form.Item\n              name=\"height\"\n              label=\"Height\"\n              rules={[{ required: true, message: 'Please enter height' }]}\n            >\n              <InputNumber \n                min={1} \n                style={{ width: '100%' }}\n                onChange={(value) => handleFieldChange('height', value)}\n              />\n            </Form.Item>\n\n            <Row gutter={12}>\n              <Col span={12}>\n                <Form.Item\n                  name=\"baseA\"\n                  label=\"Bottom Width\"\n                  rules={[{ required: true, message: 'Please enter bottom width' }]}\n                >\n                  <InputNumber \n                    min={0} \n                    style={{ width: '100%' }}\n                    onChange={(value) => handleFieldChange('baseA', value)}\n                  />\n                </Form.Item>\n              </Col>\n              <Col span={12}>\n                <Form.Item\n                  name=\"baseB\"\n                  label=\"Top Width\"\n                  rules={[{ required: true, message: 'Please enter top width' }]}\n                >\n                  <InputNumber \n                    min={0} \n                    style={{ width: '100%' }}\n                    onChange={(value) => handleFieldChange('baseB', value)}\n                  />\n                </Form.Item>\n              </Col>\n            </Row>\n\n            <Form.Item\n              name=\"baseBHorizontalOffset\"\n              label=\"Top Horizontal Offset\"\n            >\n              <InputNumber \n                style={{ width: '100%' }}\n                onChange={(value) => handleFieldChange('baseBHorizontalOffset', value)}\n              />\n            </Form.Item>\n          </Form>\n        </Col>\n        \n        <Col span={12}>\n          <div style={{ textAlign: 'center' }}>\n            <Text strong>Preview</Text>\n            <div style={{ marginTop: '16px' }}>\n              <PanelDiagram \n                shape={{ ...shape, successors }} \n                label=\"\"\n                size={180}\n                padding={20}\n              />\n            </div>\n          </div>\n        </Col>\n\n        <Col span={24}>\n          <Divider />\n          \n          <div>\n            <div style={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', marginBottom: '16px' }}>\n              <Text strong>Successor Shapes</Text>\n              <Button \n                type=\"dashed\" \n                icon={<PlusOutlined />} \n                onClick={() => handleAddSuccessor()}\n              >\n                Add Successor\n              </Button>\n            </div>\n            \n            <Text type=\"secondary\" style={{ display: 'block', marginBottom: '16px' }}>\n              Successors are panels that continue from the top of this panel. Use \"Child\" buttons to create nested hierarchies.\n            </Text>\n\n            {successors.length === 0 ? (\n              <div style={{ textAlign: 'center', padding: '20px', backgroundColor: '#fafafa', borderRadius: '6px' }}>\n                <Text type=\"secondary\">No successor panels. Click \"Add Successor\" to create connected panels.</Text>\n              </div>\n            ) : (\n              <div style={{ maxHeight: '400px', overflowY: 'auto' }}>\n                <Space direction=\"vertical\" style={{ width: '100%' }} size=\"small\">\n                  {successors.map((successor, index) => (\n                    <SuccessorItem\n                      key={index}\n                      successor={successor}\n                      path={[index]}\n                      level={0}\n                    />\n                  ))}\n                </Space>\n              </div>\n            )}\n          </div>\n        </Col>\n      </Row>\n    </Modal>\n  );\n};\n\nexport default CustomShapeStep;\n","// PatternDimensionVisualization.js\n// Reusable component for displaying pattern dimensions with engineering-style dimension lines\nimport React from 'react';\nimport { Card, Typography } from 'antd';\nimport { InfoCircleOutlined } from '@ant-design/icons';\nimport { PanelDiagram } from './PanelDiagram';\n\nconst { Text } = Typography;\n\nconst PatternDimensionVisualization = ({ \n    panel,\n    title = 'Pattern Dimensions',\n    subtitle = 'Pattern dimensions with current scaling applied.',\n    scaleFactor = 1,\n    showInfoText = true,\n    infoText = 'Dimension lines show the total pattern dimensions after scaling.',\n    containerPadding = '20px 10px',\n    diagramSizeMin = 200,\n    diagramSizeMax = 500,\n    scalingMultiplier = 8,\n    ...cardProps\n}) => {\n    // Validate input\n    if (!panel) {\n        return (\n            <Card title={title} {...cardProps}>\n                <div style={{ \n                    display: 'flex', \n                    justifyContent: 'center', \n                    alignItems: 'center', \n                    height: '300px',\n                    color: '#666',\n                    fontSize: '16px'\n                }}>\n                    No pattern data available\n                </div>\n            </Card>\n        );\n    }\n\n    // Calculate actual pattern dimensions using the exact same logic as PanelDiagram\n    const calculatePatternDimensions = (shape, scale = 1) => {\n        let dimensions = { minX: 0, maxX: 0, minY: 0, maxY: 0 };\n        \n        // Use the same hierarchy rendering logic as PanelDiagram to get accurate dimensions\n        const renderHierarchyForDimensions = (trap, scaleParam, xOffset = 0, yOffset = 0) => {\n            const trapWidth = Math.max(trap.baseA, trap.baseB) * scaleParam;\n\n            // Compute bounding box of the current trapezoid\n            const xTopLeft = xOffset + (trapWidth - trap.baseB * scaleParam) / 2 + (trap.baseBHorizontalOffset || 0) * scaleParam;\n            const xTopRight = xOffset + (trapWidth + trap.baseB * scaleParam) / 2 + (trap.baseBHorizontalOffset || 0) * scaleParam;\n            const xBottomLeft = xOffset + (trapWidth - trap.baseA * scaleParam) / 2;\n            const xBottomRight = xOffset + (trapWidth + trap.baseA * scaleParam) / 2;\n            const yTop = yOffset;\n            const yBottom = yOffset + trap.height * scaleParam;\n\n            // Update dimensions\n            dimensions.minX = Math.min(dimensions.minX, xTopLeft, xTopRight, xBottomLeft, xBottomRight);\n            dimensions.maxX = Math.max(dimensions.maxX, xTopLeft, xTopRight, xBottomLeft, xBottomRight);\n            dimensions.minY = Math.min(dimensions.minY, yTop, yBottom);\n            dimensions.maxY = Math.max(dimensions.maxY, yTop, yBottom);\n\n            if (trap.successors && trap.successors.length > 0) {\n                const successorWidths = trap.successors.map(s => Math.max(s.baseA, s.baseB) * scaleParam);\n                const totalSuccessorWidth = successorWidths.reduce((sum, w) => sum + w, 0);\n                let childXOffset = xOffset + (trapWidth - totalSuccessorWidth) / 2;\n\n                for (let i = trap.successors.length - 1; i >= 0; i--) {\n                    const successor = trap.successors[i];\n                    renderHierarchyForDimensions(successor, scaleParam, childXOffset, yTop - successor.height * scaleParam);\n                    childXOffset += successorWidths[i];\n                }\n            }\n        };\n\n        renderHierarchyForDimensions(shape, scale, 0, 0);\n        \n        return {\n            width: dimensions.maxX - dimensions.minX,\n            height: dimensions.maxY - dimensions.minY,\n            minX: dimensions.minX,\n            maxX: dimensions.maxX,\n            minY: dimensions.minY,\n            maxY: dimensions.maxY\n        };\n    };\n\n    // Calculate pattern bounds and visual positioning to match PanelDiagram exactly\n    const calculatePanelDiagramBounds = (shape, size, padding = 10) => {\n        // First pass: Compute bounding box including negative coordinates (same as PanelDiagram)\n        let dimensions = { minX: 0, maxX: 0, minY: 0, maxY: 0 };\n        const renderHierarchyForDimensions = (trap, scaleParam, xOffset = 0, yOffset = 0) => {\n            const trapWidth = Math.max(trap.baseA, trap.baseB) * scaleParam;\n            const xTopLeft = xOffset + (trapWidth - trap.baseB * scaleParam) / 2 + (trap.baseBHorizontalOffset || 0) * scaleParam;\n            const xTopRight = xOffset + (trapWidth + trap.baseB * scaleParam) / 2 + (trap.baseBHorizontalOffset || 0) * scaleParam;\n            const xBottomLeft = xOffset + (trapWidth - trap.baseA * scaleParam) / 2;\n            const xBottomRight = xOffset + (trapWidth + trap.baseA * scaleParam) / 2;\n            const yTop = yOffset;\n            const yBottom = yOffset + trap.height * scaleParam;\n\n            dimensions.minX = Math.min(dimensions.minX, xTopLeft, xTopRight, xBottomLeft, xBottomRight);\n            dimensions.maxX = Math.max(dimensions.maxX, xTopLeft, xTopRight, xBottomLeft, xBottomRight);\n            dimensions.minY = Math.min(dimensions.minY, yTop, yBottom);\n            dimensions.maxY = Math.max(dimensions.maxY, yTop, yBottom);\n\n            if (trap.successors && trap.successors.length > 0) {\n                const successorWidths = trap.successors.map(s => Math.max(s.baseA, s.baseB) * scaleParam);\n                const totalSuccessorWidth = successorWidths.reduce((sum, w) => sum + w, 0);\n                let childXOffset = xOffset + (trapWidth - totalSuccessorWidth) / 2;\n\n                for (let i = trap.successors.length - 1; i >= 0; i--) {\n                    const successor = trap.successors[i];\n                    renderHierarchyForDimensions(successor, scaleParam, childXOffset, yTop - successor.height * scaleParam);\n                    childXOffset += successorWidths[i];\n                }\n            }\n        };\n\n        renderHierarchyForDimensions(shape, 1, 0, 0);\n\n        const width = dimensions.maxX - dimensions.minX;\n        const height = dimensions.maxY - dimensions.minY;\n\n        // Calculate scale factor (same as PanelDiagram)\n        const availableWidth = size - 2 * padding;\n        const availableHeight = size - 2 * padding;\n        const scaleFactor = Math.min(availableWidth / width, availableHeight / height);\n\n        // Calculate scaled dimensions and translation (same as PanelDiagram)\n        const scaledWidth = width * scaleFactor;\n        const scaledHeight = height * scaleFactor;\n\n        const translateX = (size - scaledWidth) / 2 - dimensions.minX * scaleFactor + padding;\n        const translateY = (size - scaledHeight) / 2 - dimensions.minY * scaleFactor + padding;\n\n        return {\n            scaledWidth,\n            scaledHeight,\n            translateX,\n            translateY,\n            scaleFactor,\n            originalWidth: width,\n            originalHeight: height\n        };\n    };\n\n    // Calculate unscaled pattern dimensions for visual sizing\n    const visualPatternDimensions = calculatePatternDimensions(panel, 1);\n    \n    // Calculate scaled pattern dimensions for dimension labels\n    const scaledPatternDimensions = calculatePatternDimensions(panel, scaleFactor);\n\n    // Calculate responsive diagram size based on unscaled pattern dimensions for consistent visual size\n    const basePatternSize = Math.max(\n        visualPatternDimensions.width * scalingMultiplier, \n        visualPatternDimensions.height * scalingMultiplier, \n        diagramSizeMin\n    );\n    const diagramSize = Math.min(basePatternSize + 80, diagramSizeMax);\n    const patternDisplaySize = Math.min(diagramSize - 40, basePatternSize);\n\n    // Calculate the exact positioning used by PanelDiagram\n    const panelBounds = calculatePanelDiagramBounds(panel, patternDisplaySize, 10);\n\n    // Pre-calculate dimension values for use in labels\n    const patternWidth = scaledPatternDimensions.width;\n    const patternHeight = scaledPatternDimensions.height;\n\n    return (\n        <Card \n            title={\n                <div>\n                    <div style={{ fontWeight: 'bold' }}>{title}</div>\n                    <div style={{ fontSize: '12px', color: '#666', fontWeight: 'normal' }}>\n                        {subtitle}\n                    </div>\n                </div>\n            }\n            {...cardProps}\n        >\n            <div style={{ \n                display: 'flex', \n                justifyContent: 'center', \n                alignItems: 'center', \n                minHeight: '300px', \n                padding: containerPadding \n            }}>\n                <div style={{ position: 'relative', display: 'inline-block', width: `${diagramSize + 120}px` }}>\n                    {/* Main pattern container - centered with extra space for dimensions */}\n                    <div style={{\n                        position: 'relative',\n                        width: `${diagramSize}px`,\n                        height: `${diagramSize}px`,\n                        margin: '0 auto',\n                        marginLeft: '60px',\n                        marginTop: '40px',\n                        display: 'flex',\n                        justifyContent: 'center',\n                        alignItems: 'center'\n                    }}>\n                        {/* Pattern diagram centered */}\n                        <PanelDiagram \n                            shape={panel} \n                            size={patternDisplaySize}\n                            padding={10}\n                        />\n                    </div>\n                    \n                    {/* Engineering Dimension Lines */}\n                    <svg\n                        style={{\n                            position: 'absolute',\n                            top: '0px',\n                            left: '0px',\n                            width: `${diagramSize + 120}px`,\n                            height: `${diagramSize + 80}px`,\n                            pointerEvents: 'none',\n                            zIndex: 1\n                        }}\n                    >\n                        {/* Define professional arrow markers */}\n                        <defs>\n                            <marker \n                                id=\"arrowStart\" \n                                markerWidth=\"8\" \n                                markerHeight=\"8\" \n                                refX=\"2\" \n                                refY=\"3\" \n                                orient=\"auto\" \n                                markerUnits=\"strokeWidth\"\n                            >\n                                <path d=\"M6,3 L1,1 L1,5 Z\" fill=\"#333\" stroke=\"#333\" strokeWidth=\"0.5\" />\n                            </marker>\n                            <marker \n                                id=\"arrowEnd\" \n                                markerWidth=\"8\" \n                                markerHeight=\"8\" \n                                refX=\"6\" \n                                refY=\"3\" \n                                orient=\"auto\" \n                                markerUnits=\"strokeWidth\"\n                            >\n                                <path d=\"M1,3 L6,1 L6,5 Z\" fill=\"#333\" stroke=\"#333\" strokeWidth=\"0.5\" />\n                            </marker>\n                        </defs>\n                        \n                        {(() => {\n                            // Calculate exact pattern bounds using PanelDiagram's positioning logic\n                            // The SVG is positioned at (0,0) relative to the entire container\n                            // The pattern container has margins: 60px left, 40px top\n                            const containerLeft = 60; // marginLeft of pattern container\n                            const containerTop = 40;  // marginTop of pattern container\n                            const containerWidth = diagramSize;\n                            const containerHeight = diagramSize;\n                            \n                            // PanelDiagram actual size\n                            const panelActualWidth = patternDisplaySize;\n                            const panelActualHeight = patternDisplaySize;\n                            \n                            // Flex centering offset within the container\n                            const flexCenterX = (containerWidth - panelActualWidth) / 2;\n                            const flexCenterY = (containerHeight - panelActualHeight) / 2;\n                            \n                            // PanelDiagram position within the SVG coordinate system\n                            const panelLeft = containerLeft + flexCenterX;\n                            const panelTop = containerTop + flexCenterY;\n                            \n                            // The actual pattern position - use the visual center of the PanelDiagram\n                            // instead of relying on translateY which may include extra spacing\n                            const panelCenterX = panelLeft + panelActualWidth / 2;\n                            const panelCenterY = panelTop + panelActualHeight / 2;\n                            \n                            // Position pattern around the visual center\n                            const patternLeft = panelCenterX - panelBounds.scaledWidth / 2;\n                            const patternTop = panelCenterY - panelBounds.scaledHeight / 2;\n                            const patternRight = patternLeft + panelBounds.scaledWidth;\n                            const patternBottom = patternTop + panelBounds.scaledHeight;\n                            \n                            // Debug: Add console logging to see where we think the pattern should be\n                            console.log('SVG Pattern Position (Fixed):', {\n                                patternLeft, patternTop, patternRight, patternBottom,\n                                panelCenterX, panelCenterY,\n                                panelLeft, panelTop,\n                                panelBounds\n                            });\n                            \n                            return (\n                                <>\n                                    {/* Width dimension line (top) */}\n                                    <g>\n                                        {/* Connecting lines from pattern to dimension line */}\n                                        <line \n                                            x1={patternLeft} \n                                            y1={patternTop} \n                                            x2={patternLeft} \n                                            y2={patternTop - 35} \n                                            stroke=\"#999\" \n                                            strokeWidth=\"0.6\" \n                                            strokeDasharray=\"1,2\" \n                                        />\n                                        <line \n                                            x1={patternRight} \n                                            y1={patternTop} \n                                            x2={patternRight} \n                                            y2={patternTop - 35} \n                                            stroke=\"#999\" \n                                            strokeWidth=\"0.6\" \n                                            strokeDasharray=\"1,2\" \n                                        />\n                                        \n                                        {/* Extension lines */}\n                                        <line \n                                            x1={patternLeft} \n                                            y1={patternTop - 35} \n                                            x2={patternLeft} \n                                            y2={patternTop - 40} \n                                            stroke=\"#666\" \n                                            strokeWidth=\"0.8\" \n                                            strokeDasharray=\"1,1\" \n                                        />\n                                        <line \n                                            x1={patternRight} \n                                            y1={patternTop - 35} \n                                            x2={patternRight} \n                                            y2={patternTop - 40} \n                                            stroke=\"#666\" \n                                            strokeWidth=\"0.8\" \n                                            strokeDasharray=\"1,1\" \n                                        />\n                                        \n                                        {/* Main dimension line with arrows */}\n                                        <line \n                                            x1={patternLeft} \n                                            y1={patternTop - 37} \n                                            x2={patternRight} \n                                            y2={patternTop - 37} \n                                            stroke=\"#333\" \n                                            strokeWidth=\"1\" \n                                            markerStart=\"url(#arrowStart)\" \n                                            markerEnd=\"url(#arrowEnd)\" \n                                        />\n                                        \n                                        {/* Dimension text with background */}\n                                        <rect \n                                            x={(patternLeft + patternRight) / 2 - 18} \n                                            y={patternTop - 45} \n                                            width=\"36\" \n                                            height=\"14\" \n                                            fill=\"white\" \n                                            stroke=\"#ddd\" \n                                            strokeWidth=\"0.3\" \n                                            rx=\"1\"\n                                        />\n                                        <text \n                                            x={(patternLeft + patternRight) / 2} \n                                            y={patternTop - 35} \n                                            textAnchor=\"middle\" \n                                            fontSize=\"11\" \n                                            fontWeight=\"600\" \n                                            fill=\"#333\"\n                                            fontFamily=\"Arial, sans-serif\"\n                                        >\n                                            {Math.round(patternWidth)}″\n                                        </text>\n                                    </g>\n                                    \n                                    {/* Height dimension line (left) */}\n                                    <g>\n                                        {/* Connecting lines from pattern to dimension line */}\n                                        <line \n                                            x1={patternLeft} \n                                            y1={patternTop} \n                                            x2={patternLeft - 35} \n                                            y2={patternTop} \n                                            stroke=\"#999\" \n                                            strokeWidth=\"0.6\" \n                                            strokeDasharray=\"1,2\" \n                                        />\n                                        <line \n                                            x1={patternLeft} \n                                            y1={patternBottom} \n                                            x2={patternLeft - 35} \n                                            y2={patternBottom} \n                                            stroke=\"#999\" \n                                            strokeWidth=\"0.6\" \n                                            strokeDasharray=\"1,2\" \n                                        />\n                                        \n                                        {/* Extension lines */}\n                                        <line \n                                            x1={patternLeft - 35} \n                                            y1={patternTop} \n                                            x2={patternLeft - 40} \n                                            y2={patternTop} \n                                            stroke=\"#666\" \n                                            strokeWidth=\"0.8\" \n                                            strokeDasharray=\"1,1\" \n                                        />\n                                        <line \n                                            x1={patternLeft - 35} \n                                            y1={patternBottom} \n                                            x2={patternLeft - 40} \n                                            y2={patternBottom} \n                                            stroke=\"#666\" \n                                            strokeWidth=\"0.8\" \n                                            strokeDasharray=\"1,1\" \n                                        />\n                                        \n                                        {/* Main dimension line with arrows */}\n                                        <line \n                                            x1={patternLeft - 37} \n                                            y1={patternTop} \n                                            x2={patternLeft - 37} \n                                            y2={patternBottom} \n                                            stroke=\"#333\" \n                                            strokeWidth=\"1\" \n                                            markerStart=\"url(#arrowStart)\" \n                                            markerEnd=\"url(#arrowEnd)\" \n                                        />\n                                        \n                                        {/* Dimension text with background */}\n                                        <rect \n                                            x={patternLeft - 55} \n                                            y={(patternTop + patternBottom) / 2 - 7} \n                                            width=\"36\" \n                                            height=\"14\" \n                                            fill=\"white\" \n                                            stroke=\"#ddd\" \n                                            strokeWidth=\"0.3\" \n                                            rx=\"1\"\n                                        />\n                                        <text \n                                            x={patternLeft - 35} \n                                            y={(patternTop + patternBottom) / 2 + 4} \n                                            textAnchor=\"middle\" \n                                            fontSize=\"11\" \n                                            fontWeight=\"600\" \n                                            fill=\"#333\"\n                                            fontFamily=\"Arial, sans-serif\"\n                                        >\n                                            {Math.round(patternHeight)}″\n                                        </text>\n                                    </g>\n                                    \n                                    {/* Center label showing combined dimensions */}\n                                    <g>\n                                        {/* Calculate actual pattern center */}\n                                        {(() => {\n                                            const patternCenterX = (patternLeft + patternRight) / 2;\n                                            const patternCenterY = (patternTop + patternBottom) / 2;\n                                            \n                                            return (\n                                                <>\n                                                    {/* Drop shadow for background rectangle */}\n                                                    <rect \n                                                        x={patternCenterX - 38} \n                                                        y={patternCenterY - 11} \n                                                        width=\"76\" \n                                                        height=\"22\" \n                                                        fill=\"rgba(0, 0, 0, 0.1)\" \n                                                        rx=\"2\"\n                                                        transform=\"translate(1, 1)\"\n                                                    />\n                                                    {/* Background rectangle for center label - matching dimension text style */}\n                                                    <rect \n                                                        x={patternCenterX - 38} \n                                                        y={patternCenterY - 11} \n                                                        width=\"76\" \n                                                        height=\"22\" \n                                                        fill=\"white\" \n                                                        stroke=\"#ddd\" \n                                                        strokeWidth=\"0.3\" \n                                                        rx=\"2\"\n                                                    />\n                                                    {/* Center dimension text - enhanced styling */}\n                                                    <text \n                                                        x={patternCenterX} \n                                                        y={patternCenterY + 4} \n                                                        textAnchor=\"middle\" \n                                                        fontSize=\"13\" \n                                                        fontWeight=\"600\" \n                                                        fill=\"#333\"\n                                                        fontFamily=\"Arial, sans-serif\"\n                                                        letterSpacing=\"0.5px\"\n                                                    >\n                                                        {Math.round(patternWidth)}″ × {Math.round(patternHeight)}″\n                                                    </text>\n                                                </>\n                                            );\n                                        })()}\n                                    </g>\n                                </>\n                            );\n                        })()}\n                    </svg>\n                </div>\n            </div>\n            \n            {showInfoText && (\n                <div style={{ marginTop: '16px' }}>\n                    <Text type=\"secondary\" style={{ fontSize: '12px' }}>\n                        <InfoCircleOutlined style={{ marginRight: '4px' }} />\n                        {infoText}\n                    </Text>\n                </div>\n            )}\n        </Card>\n    );\n};\n\nexport default PatternDimensionVisualization;\n","import React, { useState, useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { Card, Row, Col, Select, Button, Space, Typography, Slider, InputNumber, Divider } from 'antd';\nimport { InfoCircleOutlined } from '@ant-design/icons';\nimport PatternDimensionVisualization from '../../../components/PatternDimensionVisualization';\nimport { updatePatternData, selectPatternData } from '../../../store/knittingDesignSlice';\n\n\nconst { Title, Text, Paragraph } = Typography;\nconst { Option } = Select;\n\n// Pattern Scaling Interface using Redux state\nconst SizingStep = ({ onNext, onPrevious }) => {\n  const dispatch = useDispatch();\n  const patternData = useSelector(state => state.knittingDesign.patternData);\n  const data = patternData?.sizing || {};\n  const [calculatedDimensions, setCalculatedDimensions] = useState({});\n\n  const sizingMethods = [\n    { value: 'standard', label: 'Standard Sizes', description: 'Choose from predefined men\\'s or women\\'s sizing' },\n    { value: 'percentage', label: 'Scale by Percentage', description: 'Scale a standard size by percentage' },\n    { value: 'custom', label: 'Custom Dimensions', description: 'Adjust individual panel dimensions independently' }\n  ];\n\n  // Base sizing where Men's Medium = Women's Large\n  // Each size scales by 10% per size away from the base\n  const baseDimensions = { chest: 40, length: 27, armLength: 25 }; // Men's Medium / Women's Large\n  \n  const calculateSizeMultiplier = (sizeIndex) => {\n    // Size index: XXS=-3, XS=-2, S=-1, M=0, L=1, XL=2, XXL=3\n    return Math.pow(1.1, sizeIndex); // 10% per size away from medium\n  };\n  \n  const sizeOrder = ['XXS', 'XS', 'S', 'M', 'L', 'XL', 'XXL'];\n  const getSizeIndex = (size) => sizeOrder.indexOf(size) - 3; // M = index 0\n  \n  // Function to generate standard sizes dynamically\n  const generateStandardSizes = (gender) => {\n    const sizes = {};\n    sizeOrder.forEach(size => {\n      const sizeIndex = getSizeIndex(size);\n      let multiplier;\n      \n      if (gender === 'mens') {\n        // Men's sizes with M as base (index 0)\n        multiplier = calculateSizeMultiplier(sizeIndex);\n      } else {\n        // Women's sizes with L as base (Men's M = Women's L equivalency)\n        const womensSizeIndex = sizeIndex - 1; // Shift by one size (M->L equivalency)\n        multiplier = calculateSizeMultiplier(womensSizeIndex);\n      }\n      \n      sizes[size] = {\n        chest: Math.round(baseDimensions.chest * multiplier),\n        length: Math.round(baseDimensions.length * multiplier),\n        armLength: Math.round(baseDimensions.armLength * multiplier)\n      };\n    });\n    return sizes;\n  };\n\n  useEffect(() => {\n    // Calculate dimensions based on current settings\n    if (data?.method === 'standard') {\n      const selectedGender = data.gender || 'womens';\n      const selectedSize = data.standardSize || 'M';\n      const standardSizes = generateStandardSizes(selectedGender);\n      const baseDimensions = standardSizes[selectedSize];\n      setCalculatedDimensions(baseDimensions);\n    } else if (data?.method === 'percentage') {\n      const selectedGender = data.gender || 'womens';\n      const selectedSize = data.standardSize || 'M';\n      const standardSizes = generateStandardSizes(selectedGender);\n      const baseDimensions = standardSizes[selectedSize];\n      const scaled = {};\n      Object.keys(baseDimensions).forEach(key => {\n        scaled[key] = Math.round(baseDimensions[key] * ((data.scale || 100) / 100) * 10) / 10;\n      });\n      setCalculatedDimensions(scaled);\n    } else if (data?.method === 'custom') {\n      setCalculatedDimensions(data.customDimensions || {});\n    }\n  }, [data]);\n\n  // Helper function to update sizing data in Redux\n  const updateSizingData = (newData) => {\n    dispatch(updatePatternData({ \n      section: 'sizing', \n      data: { ...data, ...newData } \n    }));\n  };\n\n  const handleMethodChange = (method) => {\n    // Create a single atomic update with all required data\n    const baseUpdate = { method };\n    \n    if (method === 'standard') {\n      baseUpdate.gender = data?.gender || 'womens';\n      baseUpdate.standardSize = data?.standardSize || 'M';\n    } else if (method === 'percentage') {\n      baseUpdate.gender = data?.gender || 'womens';\n      baseUpdate.standardSize = data?.standardSize || 'M';\n      baseUpdate.scale = data?.scale || 100;\n    } else if (method === 'custom') {\n      baseUpdate.customDimensions = data?.customDimensions || {\n        front: { width: 38, height: 23 },\n        back: { width: 38, height: 23 },\n        leftSleeve: { width: 15, height: 24 },\n        rightSleeve: { width: 15, height: 24 }\n      };\n    }\n    \n    // Single atomic update to prevent race conditions\n    updateSizingData(baseUpdate);\n  };\n\n  const handleGenderChange = (gender) => {\n    updateSizingData({ gender });\n  };\n\n  const handleStandardSizeChange = (size) => {\n    updateSizingData({ standardSize: size });\n  };\n\n  const handleScaleChange = (scale) => {\n    updateSizingData({ scale });\n  };\n\n  const handleDimensionChange = (dimension, value) => {\n    if (!data?.customDimensions) return;\n    \n    const newDimensions = { ...data.customDimensions, [dimension]: value };\n    updateSizingData({ customDimensions: newDimensions });\n  };\n\n  const handleCustomPanelChange = (panel, dimension, value) => {\n    if (!data?.customDimensions) return;\n    \n    const newDimensions = { \n      ...data.customDimensions, \n      [panel]: {\n        ...(data.customDimensions[panel] || {}),\n        [dimension]: value\n      }\n    };\n    updateSizingData({ customDimensions: newDimensions });\n  };\n\n  const handleNext = () => {\n    onNext();\n  };\n\n  // Get all shapes from basePattern.shapes for visualization\n  const getAllPatternShapes = () => {\n    if (!patternData?.basePattern?.shapes) {\n      return [];\n    }\n    \n    const shapes = patternData.basePattern.shapes;\n    return Object.entries(shapes).map(([name, shape]) => ({ name, shape }));\n  };\n\n  const allPatternShapes = getAllPatternShapes();\n  \n  // Calculate scaling factor based on sizing method and base size selection\n  let scaleFactor = 1;\n  if (data && Object.keys(data).length > 0) {\n    if (data.method === 'standard' || data.method === 'percentage') {\n      // For both standard and percentage methods, calculate based on selected base size\n      const selectedGender = data.gender || 'womens';\n      const selectedSize = data.standardSize || 'M';\n      const standardSizes = generateStandardSizes(selectedGender);\n      const selectedBaseDimensions = standardSizes[selectedSize];\n      \n      if (selectedBaseDimensions && allPatternShapes.length > 0) {\n        const firstShape = allPatternShapes[0]?.shape;\n        if (firstShape?.baseA) {\n          // Base scale factor from size selection\n          const baseSizeFactor = selectedBaseDimensions.chest / baseDimensions.chest;\n          \n          if (data.method === 'percentage') {\n            // Apply percentage scaling on top of base size\n            scaleFactor = baseSizeFactor * ((data.scale || 100) / 100);\n          } else {\n            // Standard method uses just the base size factor\n            scaleFactor = baseSizeFactor;\n          }\n        }\n      }\n    } else if (data.method === 'custom' && data.customDimensions?.chest && allPatternShapes.length > 0) {\n      // Use the first shape's baseA for scaling calculation\n      const firstShape = allPatternShapes[0]?.shape;\n      if (firstShape?.baseA) {\n        scaleFactor = data.customDimensions.chest / firstShape.baseA;\n      }\n    }\n  }\n\n  return (\n    <div className=\"sizing-step\">\n      <Row gutter={[24, 24]}>\n        <Col span={24}>\n          <Card>\n            <Title level={2}>Pattern Sizing</Title>\n            <Paragraph type=\"secondary\">\n              Choose how you want to size your pattern. You can scale proportionally or input custom measurements.\n            </Paragraph>\n          </Card>\n        </Col>\n\n        <Col lg={12} md={24}>\n          <div style={{ display: 'flex', flexDirection: 'column', gap: '16px' }}>\n            {allPatternShapes.length > 0 ? (\n              allPatternShapes.map(({ name, shape }, index) => (\n                <PatternDimensionVisualization \n                  key={`${name}-${index}`}\n                  panel={shape}\n                  title={name}\n                  subtitle={`${patternData?.basePattern?.name || 'Pattern'} - ${name} panel`}\n                  scaleFactor={scaleFactor}\n                  diagramSizeMin={200}\n                  diagramSizeMax={333}\n                  scalingMultiplier={4}\n                  containerPadding={12}\n                  showInfoText={false}\n                />\n              ))\n            ) : (\n              <div style={{ \n                textAlign: 'center', \n                padding: '40px 20px', \n                background: '#fafafa', \n                borderRadius: '8px',\n                border: '1px dashed #d9d9d9'\n              }}>\n                <Text type=\"secondary\">\n                  No pattern shapes available. Please select a pattern in the previous step.\n                </Text>\n              </div>\n            )}\n          </div>\n        </Col>\n\n        <Col lg={12} md={24}>\n          <Card title=\"Sizing Method\">\n            <Space direction=\"vertical\" size=\"large\" style={{ width: '100%' }}>\n              <Select\n                value={data?.method || 'percentage'}\n                onChange={handleMethodChange}\n                style={{ width: '100%' }}\n                size=\"large\"\n                placeholder=\"Select sizing method\"\n              >\n                {sizingMethods.map(method => (\n                  <Option key={method.value} value={method.value}>\n                    <div style={{ padding: '4px 0' }}>\n                      <div style={{ fontWeight: 'bold', lineHeight: '1.2' }}>{method.label}</div>\n                      <div style={{ fontSize: '12px', color: '#666', lineHeight: '1.2', marginTop: '2px' }}>{method.description}</div>\n                    </div>\n                  </Option>\n                ))}\n              </Select>\n\n              <Divider />\n\n              {data?.method === 'standard' ? (\n                <Space direction=\"vertical\" size=\"middle\" style={{ width: '100%' }}>\n                  <Text strong>Gender</Text>\n                  <Select\n                    value={data.gender || 'womens'}\n                    onChange={handleGenderChange}\n                    style={{ width: '100%' }}\n                  >\n                    <Option value=\"womens\">Women's</Option>\n                    <Option value=\"mens\">Men's</Option>\n                  </Select>\n                  \n                  <Text strong>Size</Text>\n                  <Row gutter={8}>\n                    {Object.keys(generateStandardSizes(data.gender || 'womens')).map(size => (\n                      <Col key={size}>\n                        <Button \n                          size=\"small\"\n                          onClick={() => handleStandardSizeChange(size)}\n                          type={(data.standardSize || 'M') === size ? 'primary' : 'default'}\n                        >\n                          {size}\n                        </Button>\n                      </Col>\n                    ))}\n                  </Row>\n                </Space>\n              ) : data?.method === 'percentage' ? (\n                <Space direction=\"vertical\" size=\"middle\" style={{ width: '100%' }}>\n                  <Text strong>Base Size</Text>\n                  <Row gutter={16} align=\"middle\">\n                    <Col span={12}>\n                      <Select\n                        value={data.gender || 'womens'}\n                        onChange={handleGenderChange}\n                        style={{ width: '100%' }}\n                      >\n                        <Option value=\"womens\">Women's</Option>\n                        <Option value=\"mens\">Men's</Option>\n                      </Select>\n                    </Col>\n                    <Col span={12}>\n                      <Select\n                        value={data.standardSize || 'M'}\n                        onChange={handleStandardSizeChange}\n                        style={{ width: '100%' }}\n                      >\n                        {Object.keys(generateStandardSizes(data.gender || 'womens')).map(size => (\n                          <Option key={size} value={size}>{size}</Option>\n                        ))}\n                      </Select>\n                    </Col>\n                  </Row>\n                  \n                  <Text strong>Scale Percentage</Text>\n                  <Row gutter={16} align=\"middle\">\n                    <Col flex={1}>\n                      <Slider\n                        min={50}\n                        max={200}\n                        step={5}\n                        value={data?.scale || 100}\n                        onChange={handleScaleChange}\n                        marks={{\n                          50: '50%',\n                          100: '100%',\n                          150: '150%',\n                          200: '200%'\n                        }}\n                      />\n                    </Col>\n                    <Col>\n                      <InputNumber\n                        min={50}\n                        max={200}\n                        value={data?.scale || 100}\n                        onChange={handleScaleChange}\n                        formatter={value => `${value}%`}\n                        parser={value => value.replace('%', '')}\n                        style={{ width: '80px' }}\n                      />\n                    </Col>\n                  </Row>\n                  \n                  <Card size=\"small\" style={{ backgroundColor: '#f6ffed', border: '1px solid #b7eb8f' }}>\n                    <Space align=\"center\">\n                      <InfoCircleOutlined style={{ color: '#52c41a' }} />\n                      <Text>\n                        Scaling at {data?.scale || 100}% of {data?.gender === 'mens' ? \"Men's\" : \"Women's\"} {data?.standardSize || 'M'} size\n                      </Text>\n                    </Space>\n                  </Card>\n                </Space>\n              ) : (\n                <Space direction=\"vertical\" size=\"middle\" style={{ width: '100%' }}>\n                  <Text strong>Individual Panel Dimensions</Text>\n                  <Text type=\"secondary\" style={{ fontSize: '12px' }}>\n                    Adjust width and height for each panel independently\n                  </Text>\n                  \n                  {data?.customDimensions && Object.entries(data.customDimensions).map(([panelName, dimensions]) => (\n                    <Card key={panelName} size=\"small\" title={panelName.charAt(0).toUpperCase() + panelName.slice(1)}>\n                      <Row gutter={16}>\n                        <Col span={12}>\n                          <Text>Width (inches):</Text>\n                          <InputNumber\n                            min={10}\n                            max={60}\n                            step={0.5}\n                            value={dimensions.width}\n                            onChange={(value) => handleCustomPanelChange(panelName, 'width', value)}\n                            style={{ width: '100%', marginTop: '4px' }}\n                          />\n                        </Col>\n                        <Col span={12}>\n                          <Text>Height (inches):</Text>\n                          <InputNumber\n                            min={10}\n                            max={40}\n                            step={0.5}\n                            value={dimensions.height}\n                            onChange={(value) => handleCustomPanelChange(panelName, 'height', value)}\n                            style={{ width: '100%', marginTop: '4px' }}\n                          />\n                        </Col>\n                      </Row>\n                    </Card>\n                  ))}\n                </Space>\n              )}\n            </Space>\n          </Card>\n        </Col>\n\n        <Col span={24}>\n          <Card title=\"Preview Dimensions\">\n            <Space direction=\"vertical\" size=\"middle\" style={{ width: '100%' }}>\n              <Text strong>Calculated Garment Dimensions:</Text>\n              \n              <div className=\"dimension-preview\">\n                {data?.method === 'custom' && data?.customDimensions ? (\n                  // Show individual panel dimensions for custom method\n                  <Row gutter={[16, 16]}>\n                    {Object.entries(data?.customDimensions || {}).map(([panelName, dimensions]) => (\n                      <Col span={12} key={panelName}>\n                        <Card size=\"small\" className=\"dimension-card\">\n                          <div style={{ textAlign: 'center' }}>\n                            <div style={{ fontSize: '16px', fontWeight: 'bold', color: '#1890ff' }}>\n                              {dimensions?.width || '--'}\" × {dimensions?.height || '--'}\"\n                            </div>\n                            <div style={{ color: '#666' }}>{panelName.charAt(0).toUpperCase() + panelName.slice(1)}</div>\n                          </div>\n                        </Card>\n                      </Col>\n                    ))}\n                  </Row>\n                ) : (\n                  // Show standard dimensions for standard and percentage methods\n                  <Row gutter={[16, 16]}>\n                    <Col span={12}>\n                      <Card size=\"small\" className=\"dimension-card\">\n                        <div style={{ textAlign: 'center' }}>\n                          <div style={{ fontSize: '24px', fontWeight: 'bold', color: '#1890ff' }}>\n                            {calculatedDimensions.chest || '--'}\"\n                          </div>\n                          <div style={{ color: '#666' }}>Chest</div>\n                        </div>\n                      </Card>\n                    </Col>\n                    <Col span={12}>\n                      <Card size=\"small\" className=\"dimension-card\">\n                        <div style={{ textAlign: 'center' }}>\n                          <div style={{ fontSize: '24px', fontWeight: 'bold', color: '#52c41a' }}>\n                            {calculatedDimensions.length || '--'}\"\n                          </div>\n                          <div style={{ color: '#666' }}>Length</div>\n                        </div>\n                      </Card>\n                    </Col>\n                    <Col span={12}>\n                      <Card size=\"small\" className=\"dimension-card\">\n                        <div style={{ textAlign: 'center' }}>\n                          <div style={{ fontSize: '24px', fontWeight: 'bold', color: '#fa8c16' }}>\n                            {calculatedDimensions.armLength || '--'}\"\n                          </div>\n                          <div style={{ color: '#666' }}>Arm Length</div>\n                        </div>\n                      </Card>\n                    </Col>\n                  </Row>\n                )}\n              </div>\n\n              <Card size=\"small\" style={{ backgroundColor: '#fafafa' }}>\n                <Text type=\"secondary\" style={{ fontSize: '12px' }}>\n                  <InfoCircleOutlined style={{ marginRight: '4px' }} />\n                  These dimensions will be used to calculate stitch counts in the next step.\n                  Final measurements may vary slightly based on gauge and yarn choice.\n                </Text>\n              </Card>\n            </Space>\n          </Card>\n        </Col>\n\n        <Col span={24}>\n          <div style={{ textAlign: 'right', marginTop: '24px' }}>\n            <Space>\n              <Button \n                size=\"large\" \n                onClick={onPrevious}\n              >\n                Previous\n              </Button>\n              <Button \n                size=\"large\" \n                type=\"primary\"\n                onClick={handleNext}\n              >\n                Next: Gauge\n              </Button>\n            </Space>\n          </div>\n        </Col>\n      </Row>\n    </div>\n  );\n};\n\nexport default SizingStep;\n","import React, { useState, useEffect } from 'react';\nimport { Card, Row, Col, InputNumber, Select, Typography, Space, Button, Divider, Tag, message } from 'antd';\nimport { InfoCircleOutlined, CheckCircleOutlined } from '@ant-design/icons';\n\n\nconst { Title, Text, Paragraph } = Typography;\nconst { Option } = Select;\n\n// Gauge presets for different yarn weights (Craft Yarn Council standards)\nconst YARN_WEIGHT_PRESETS = {\n  '0': { name: 'Lace', stitches: 33, rows: 41, needleSize: '1.5-2.25mm' },\n  '1': { name: 'Super Fine', stitches: 27, rows: 37, needleSize: '2.25-3.25mm' },\n  '2': { name: 'Fine', stitches: 23, rows: 32, needleSize: '3.25-3.75mm' },\n  '3': { name: 'Light', stitches: 21, rows: 28, needleSize: '3.75-4.5mm' },\n  '4': { name: 'Medium', stitches: 16, rows: 20, needleSize: '4.5-5.5mm' },\n  '5': { name: 'Bulky', stitches: 12, rows: 16, needleSize: '5.5-8mm' },\n  '6': { name: 'Super Bulky', stitches: 7, rows: 9, needleSize: '8mm+' },\n  'custom': { name: 'Custom', stitches: 0, rows: 0, needleSize: 'Custom' }\n};\n\nconst GaugeStep = ({ data, onUpdate, onNext, onPrev }) => {\n  const [tempGauge, setTempGauge] = useState(data.gauge || {\n    stitches: 19,\n    rows: 30,\n    yarnWeight: '4',\n    needleSize: '6',\n    swatchSize: 4 // inches\n  });\n  \n  const [fabricDimensions, setFabricDimensions] = useState({});\n  const [hasSwatchMeasurement, setHasSwatchMeasurement] = useState(false);\n\n  // Calculate fabric dimensions based on gauge and pattern sizing\n  useEffect(() => {\n    if (tempGauge.stitches && tempGauge.rows && data.sizing) {\n      const dimensions = calculateFabricDimensions();\n      setFabricDimensions(dimensions);\n    }\n  }, [tempGauge, data.sizing]);\n\n  const calculateFabricDimensions = () => {\n    const { stitches, rows } = tempGauge;\n    const sizing = data.sizing;\n    \n    if (sizing.method === 'percentage') {\n      // Base dimensions for a medium sweater\n      const baseDimensions = { chest: 40, length: 24, armLength: 25 };\n      const scale = sizing.scale / 100;\n      \n      return {\n        chest: Math.round(baseDimensions.chest * scale * stitches),\n        length: Math.round(baseDimensions.length * scale * rows),\n        armLength: Math.round(baseDimensions.armLength * scale * rows),\n        fabricWidth: (baseDimensions.chest * scale).toFixed(1),\n        fabricLength: (baseDimensions.length * scale).toFixed(1)\n      };\n    } else {\n      const { chest, length, armLength } = sizing.customDimensions;\n      return {\n        chest: Math.round(chest * stitches),\n        length: Math.round(length * rows),\n        armLength: Math.round(armLength * rows),\n        fabricWidth: chest.toFixed(1),\n        fabricLength: length.toFixed(1)\n      };\n    }\n  };\n\n  const handleYarnWeightChange = (weight) => {\n    if (weight === 'custom') {\n      setTempGauge(prev => ({ ...prev, yarnWeight: weight }));\n      return;\n    }\n    \n    const preset = YARN_WEIGHT_PRESETS[weight];\n    setTempGauge(prev => ({\n      ...prev,\n      yarnWeight: weight,\n      stitches: preset.stitches,\n      rows: preset.rows,\n      needleSize: preset.needleSize\n    }));\n  };\n\n  const handleGaugeChange = (field, value) => {\n    setTempGauge(prev => ({ ...prev, [field]: value }));\n  };\n\n  const handleSwatchCalculation = () => {\n    if (!tempGauge.swatchStitches || !tempGauge.swatchRows || !tempGauge.swatchSize) {\n      message.error('Please fill in all swatch measurements');\n      return;\n    }\n    \n    const calculatedStitches = tempGauge.swatchStitches / tempGauge.swatchSize;\n    const calculatedRows = tempGauge.swatchRows / tempGauge.swatchSize;\n    \n    setTempGauge(prev => ({\n      ...prev,\n      stitches: Math.round(calculatedStitches * 10) / 10,\n      rows: Math.round(calculatedRows * 10) / 10\n    }));\n    \n    setHasSwatchMeasurement(true);\n    message.success('Gauge calculated from swatch measurements');\n  };\n\n  const handleSave = () => {\n    onUpdate({ gauge: tempGauge });\n    message.success('Gauge settings saved');\n  };\n\n  const handleNext = () => {\n    handleSave();\n    onNext();\n  };\n\n  return (\n    <div className=\"gauge-step\">\n      <Row gutter={[24, 24]}>\n        <Col xs={24} lg={14}>\n          <Card title=\"Gauge Settings\" className=\"settings-card\">\n            <Space direction=\"vertical\" size=\"large\" style={{ width: '100%' }}>\n              {/* Yarn Weight Presets */}\n              <div>\n                <Title level={5}>Yarn Weight</Title>\n                <Select\n                  value={tempGauge.yarnWeight}\n                  onChange={handleYarnWeightChange}\n                  style={{ width: '100%' }}\n                  placeholder=\"Select yarn weight\"\n                >\n                  {Object.entries(YARN_WEIGHT_PRESETS).map(([key, preset]) => (\n                    <Option key={key} value={key}>\n                      <Space>\n                        <Text strong>{preset.name}</Text>\n                        {key !== 'custom' && (\n                          <Text type=\"secondary\">\n                            ({preset.stitches} sts, {preset.rows} rows per inch)\n                          </Text>\n                        )}\n                      </Space>\n                    </Option>\n                  ))}\n                </Select>\n              </div>\n\n              <Divider />\n\n              {/* Manual Gauge Entry */}\n              <div>\n                <Title level={5}>\n                  <Space>\n                    Gauge (per inch)\n                    <InfoCircleOutlined style={{ color: '#1890ff' }} />\n                  </Space>\n                </Title>\n                <Row gutter={16}>\n                  <Col span={12}>\n                    <Text>Stitches per inch</Text>\n                    <InputNumber\n                      value={tempGauge.stitches}\n                      onChange={(value) => handleGaugeChange('stitches', value)}\n                      min={1}\n                      max={50}\n                      step={0.5}\n                      style={{ width: '100%' }}\n                      placeholder=\"19\"\n                    />\n                  </Col>\n                  <Col span={12}>\n                    <Text>Rows per inch</Text>\n                    <InputNumber\n                      value={tempGauge.rows}\n                      onChange={(value) => handleGaugeChange('rows', value)}\n                      min={1}\n                      max={60}\n                      step={0.5}\n                      style={{ width: '100%' }}\n                      placeholder=\"30\"\n                    />\n                  </Col>\n                </Row>\n              </div>\n\n              <Divider />\n\n              {/* Swatch Calculator */}\n              <div>\n                <Title level={5}>Calculate from Swatch</Title>\n                <Paragraph type=\"secondary\">\n                  Measure your gauge swatch and let us calculate the gauge for you.\n                </Paragraph>\n                <Row gutter={16}>\n                  <Col span={8}>\n                    <Text>Swatch size (inches)</Text>\n                    <InputNumber\n                      value={tempGauge.swatchSize}\n                      onChange={(value) => handleGaugeChange('swatchSize', value)}\n                      min={1}\n                      max={10}\n                      step={0.5}\n                      style={{ width: '100%' }}\n                      placeholder=\"4\"\n                    />\n                  </Col>\n                  <Col span={8}>\n                    <Text>Stitches in swatch</Text>\n                    <InputNumber\n                      value={tempGauge.swatchStitches}\n                      onChange={(value) => handleGaugeChange('swatchStitches', value)}\n                      min={1}\n                      style={{ width: '100%' }}\n                      placeholder=\"76\"\n                    />\n                  </Col>\n                  <Col span={8}>\n                    <Text>Rows in swatch</Text>\n                    <InputNumber\n                      value={tempGauge.swatchRows}\n                      onChange={(value) => handleGaugeChange('swatchRows', value)}\n                      min={1}\n                      style={{ width: '100%' }}\n                      placeholder=\"120\"\n                    />\n                  </Col>\n                </Row>\n                <Button \n                  type=\"primary\" \n                  ghost \n                  onClick={handleSwatchCalculation}\n                  style={{ marginTop: 16 }}\n                >\n                  Calculate Gauge from Swatch\n                </Button>\n                {hasSwatchMeasurement && (\n                  <Tag color=\"green\" style={{ marginTop: 8 }}>\n                    <CheckCircleOutlined /> Calculated from swatch\n                  </Tag>\n                )}\n              </div>\n\n              <Divider />\n\n              {/* Needle Size */}\n              <div>\n                <Title level={5}>Needle Size</Title>\n                <InputNumber\n                  value={tempGauge.needleSize}\n                  onChange={(value) => handleGaugeChange('needleSize', value)}\n                  style={{ width: '100%' }}\n                  placeholder=\"6 (US)\"\n                  addonAfter=\"US\"\n                />\n              </div>\n            </Space>\n          </Card>\n        </Col>\n\n        <Col xs={24} lg={10}>\n          <Card title=\"Calculated Fabric Dimensions\" className=\"preview-card\">\n            <Space direction=\"vertical\" size=\"medium\" style={{ width: '100%' }}>\n              <div>\n                <Title level={5}>Stitch Counts</Title>\n                <Row gutter={[16, 8]}>\n                  <Col span={12}>\n                    <Card size=\"small\" className=\"dimension-card\">\n                      <Text type=\"secondary\">Chest</Text>\n                      <br />\n                      <Text strong style={{ fontSize: '18px', color: '#1890ff' }}>\n                        {fabricDimensions.chest} stitches\n                      </Text>\n                    </Card>\n                  </Col>\n                  <Col span={12}>\n                    <Card size=\"small\" className=\"dimension-card\">\n                      <Text type=\"secondary\">Length</Text>\n                      <br />\n                      <Text strong style={{ fontSize: '18px', color: '#52c41a' }}>\n                        {fabricDimensions.length} rows\n                      </Text>\n                    </Card>\n                  </Col>\n                </Row>\n              </div>\n\n              <div>\n                <Title level={5}>Finished Measurements</Title>\n                <Row gutter={[16, 8]}>\n                  <Col span={12}>\n                    <Card size=\"small\" className=\"dimension-card\">\n                      <Text type=\"secondary\">Width</Text>\n                      <br />\n                      <Text strong style={{ fontSize: '16px' }}>\n                        {fabricDimensions.fabricWidth}\"\n                      </Text>\n                    </Card>\n                  </Col>\n                  <Col span={12}>\n                    <Card size=\"small\" className=\"dimension-card\">\n                      <Text type=\"secondary\">Length</Text>\n                      <br />\n                      <Text strong style={{ fontSize: '16px' }}>\n                        {fabricDimensions.fabricLength}\"\n                      </Text>\n                    </Card>\n                  </Col>\n                </Row>\n              </div>\n\n              <div>\n                <Title level={5}>Current Gauge</Title>\n                <Card size=\"small\" style={{ textAlign: 'center' }}>\n                  <Text strong style={{ fontSize: '20px', color: '#722ed1' }}>\n                    {tempGauge.stitches} × {tempGauge.rows}\n                  </Text>\n                  <br />\n                  <Text type=\"secondary\">stitches × rows per inch</Text>\n                </Card>\n              </div>\n\n              {tempGauge.yarnWeight !== 'custom' && (\n                <div>\n                  <Title level={5}>Yarn Information</Title>\n                  <Card size=\"small\">\n                    <Text strong>{YARN_WEIGHT_PRESETS[tempGauge.yarnWeight]?.name} Weight</Text>\n                    <br />\n                    <Text type=\"secondary\">\n                      Recommended: {YARN_WEIGHT_PRESETS[tempGauge.yarnWeight]?.needleSize}\n                    </Text>\n                  </Card>\n                </div>\n              )}\n            </Space>\n          </Card>\n        </Col>\n      </Row>\n\n      <div className=\"step-actions\">\n        <Space>\n          <Button \n            size=\"large\" \n            onClick={onPrev}\n          >\n            Previous: Sizing\n          </Button>\n          <Button \n            size=\"large\" \n            type=\"primary\"\n            onClick={handleNext}\n          >\n            Next: Colorwork\n          </Button>\n        </Space>\n      </div>\n    </div>\n  );\n};\n\nexport default GaugeStep;\n","import React from 'react';\n\nconst KnitStitch = ({ \n  color = '#ffffff', \n  size = 12, \n  strokeColor = '#cccccc',\n  strokeWidth = 0.5,\n  style = {},\n  className = '',\n  onClick = null \n}) => {\n  const id = `knit-stitch-${Math.random().toString(36).substr(2, 9)}`;\n  \n  return (\n    <svg \n      width={size} \n      height={size * 0.8} // Knit stitches are slightly taller than wide\n      viewBox=\"0 0 20 16\"\n      style={{\n        display: 'block',\n        cursor: onClick ? 'pointer' : 'default',\n        ...style\n      }}\n      className={className}\n      onClick={onClick}\n    >\n      {/* Simple clean V-shaped knit stitch */}\n      <path\n        d=\"M 0 0 L 10 12 L 20 0 L 20 16 L 15 16 L 10 8 L 5 16 L 0 16 Z\"\n        fill={color}\n        stroke={strokeColor}\n        strokeWidth={strokeWidth}\n      />\n      \n      {/* Small highlight to show the V shape */}\n      <path\n        d=\"M 2 2 L 10 10 L 18 2\"\n        fill=\"none\"\n        stroke=\"rgba(255,255,255,0.2)\"\n        strokeWidth=\"1\"\n        strokeLinecap=\"round\"\n      />\n    </svg>\n  );\n};\n\nexport default KnitStitch;\n","import React, { useMemo, useCallback } from 'react';\nimport KnitStitch from './KnitStitch';\n\nconst SwatchViewer = ({ \n  pattern = [], \n  colors = ['#ffffff'], \n  gauge = { stitches: 19, rows: 30 }, \n  size = { width: 4, height: 4 }, // in inches\n  onStitchClick = null,\n  className = '',\n  style = {},\n  showScrollbars = false,\n  maxDisplayStitches = 1000 // Performance limit\n}) => {\n  // Calculate dimensions\n  const dimensions = useMemo(() => {\n    const stitchesWide = Math.round(size.width * gauge.stitches);\n    const rowsHigh = Math.round(size.height * gauge.rows);\n    const stitchSize = Math.min(16, Math.max(4, 400 / Math.max(stitchesWide, rowsHigh)));\n    \n    return {\n      stitchesWide,\n      rowsHigh,\n      stitchSize,\n      totalStitches: stitchesWide * rowsHigh\n    };\n  }, [size, gauge]);\n\n  // Create pattern grid with flyweight approach for performance\n  const patternGrid = useMemo(() => {\n    const { stitchesWide, rowsHigh } = dimensions;\n    \n    // Limit rendering for performance\n    if (dimensions.totalStitches > maxDisplayStitches) {\n      console.warn(`SwatchViewer: ${dimensions.totalStitches} stitches exceeds limit of ${maxDisplayStitches}. Consider using scrollable view.`);\n    }\n    \n    const grid = [];\n    \n    for (let row = 0; row < rowsHigh; row++) {\n      const rowStitches = [];\n      for (let stitch = 0; stitch < stitchesWide; stitch++) {\n        // Get color index from pattern or default to 0\n        let colorIndex = 0;\n        \n        if (pattern.length > 0) {\n          if (Array.isArray(pattern[0])) {\n            // 2D pattern array\n            const patternRow = row % pattern.length;\n            const patternCol = stitch % pattern[patternRow].length;\n            colorIndex = pattern[patternRow][patternCol];\n          } else {\n            // 1D pattern array (stripes)\n            colorIndex = pattern[row % pattern.length];\n          }\n        }\n        \n        // Ensure colorIndex is valid\n        colorIndex = Math.min(colorIndex, colors.length - 1);\n        \n        rowStitches.push({\n          row,\n          stitch,\n          colorIndex,\n          color: colors[colorIndex] || colors[0] || '#ffffff',\n          key: `${row}-${stitch}`\n        });\n      }\n      grid.push(rowStitches);\n    }\n    \n    return grid;\n  }, [pattern, colors, dimensions, maxDisplayStitches]);\n\n  // Handle stitch clicks\n  const handleStitchClick = useCallback((row, stitch) => {\n    if (onStitchClick) {\n      onStitchClick(row, stitch);\n    }\n  }, [onStitchClick]);\n\n  // Performance check\n  if (dimensions.totalStitches > maxDisplayStitches && !showScrollbars) {\n    return (\n      <div style={{ \n        padding: '20px', \n        textAlign: 'center', \n        border: '2px dashed #ccc', \n        borderRadius: '8px',\n        backgroundColor: '#fafafa',\n        ...style \n      }} className={className}>\n        <p>Pattern too large to display ({dimensions.totalStitches} stitches)</p>\n        <p>Enable scrollbars or reduce pattern size</p>\n        <small>Size: {dimensions.stitchesWide} × {dimensions.rowsHigh} stitches</small>\n      </div>\n    );\n  }\n\n  const containerStyle = {\n    display: 'inline-block',\n    border: '1px solid #ddd',\n    borderRadius: '4px',\n    padding: '8px',\n    backgroundColor: '#fff',\n    ...style\n  };\n\n  const gridStyle = {\n    display: 'grid',\n    gridTemplateColumns: `repeat(${dimensions.stitchesWide}, ${dimensions.stitchSize}px)`,\n    gap: '0px',\n    lineHeight: 0,\n    maxWidth: showScrollbars ? '400px' : 'none',\n    maxHeight: showScrollbars ? '400px' : 'none',\n    overflow: showScrollbars ? 'auto' : 'visible'\n  };\n\n  return (\n    <div className={className} style={containerStyle}>\n      <div style={gridStyle}>\n        {patternGrid.map(row => \n          row.map(({ row: r, stitch: s, color, key }) => (\n            <KnitStitch\n              key={key}\n              color={color}\n              size={dimensions.stitchSize}\n              strokeWidth={dimensions.stitchSize > 8 ? 0.5 : 0.25}\n              onClick={onStitchClick ? () => handleStitchClick(r, s) : null}\n              style={{\n                width: dimensions.stitchSize,\n                height: dimensions.stitchSize * 0.75\n              }}\n            />\n          ))\n        )}\n      </div>\n      \n      {/* Info overlay */}\n      <div style={{ \n        marginTop: '8px', \n        fontSize: '11px', \n        color: '#666', \n        textAlign: 'center' \n      }}>\n        {dimensions.stitchesWide} × {dimensions.rowsHigh} stitches\n        ({size.width}\" × {size.height}\")\n      </div>\n    </div>\n  );\n};\n\nexport default SwatchViewer;\n","import React, { useState, useCallback } from 'react';\nimport { Card, ColorPicker, Space, Button, Typography, Input, Row, Col, InputNumber, Select } from 'antd';\nimport { PlusOutlined, MinusOutlined, SaveOutlined } from '@ant-design/icons';\nimport SwatchViewer from './SwatchViewer';\n\nconst { Title, Text } = Typography;\nconst { Option } = Select;\n\nconst PatternEditor = ({ \n  pattern = [],\n  colors = ['#ffffff'],\n  patternType = 'stranded', // 'stranded', 'intarsia', 'stripes'\n  patternSize = { width: 8, height: 8 }, // in stitches/rows\n  gauge = { stitches: 19, rows: 30 },\n  onPatternChange = () => {},\n  onColorsChange = () => {},\n  onSave = () => {},\n  title = \"Pattern Editor\"\n}) => {\n  const [activeColorIndex, setActiveColorIndex] = useState(0);\n  const [patternName, setPatternName] = useState('');\n\n  // Initialize pattern grid if empty\n  const initializePattern = useCallback(() => {\n    if (pattern.length === 0) {\n      if (patternType === 'stripes') {\n        // For stripes, create 1D array of rows\n        return new Array(patternSize.height).fill(0);\n      } else {\n        // For stranded/intarsia, create 2D array\n        return Array(patternSize.height).fill(null).map(() => \n          new Array(patternSize.width).fill(0)\n        );\n      }\n    }\n    return pattern;\n  }, [pattern, patternType, patternSize]);\n\n  const currentPattern = initializePattern();\n\n  // Handle stitch clicks\n  const handleStitchClick = useCallback((row, stitch) => {\n    const newPattern = [...currentPattern];\n    \n    if (patternType === 'stripes') {\n      // For stripes, clicking any stitch in a row changes the whole row\n      newPattern[row] = activeColorIndex;\n    } else {\n      // For stranded/intarsia, change individual stitch\n      if (!newPattern[row]) {\n        newPattern[row] = new Array(patternSize.width).fill(0);\n      }\n      newPattern[row] = [...newPattern[row]];\n      newPattern[row][stitch] = activeColorIndex;\n    }\n    \n    onPatternChange(newPattern);\n  }, [currentPattern, activeColorIndex, patternType, patternSize, onPatternChange]);\n\n  // Add/remove colors\n  const addColor = () => {\n    const newColors = [...colors, '#ffffff'];\n    onColorsChange(newColors);\n  };\n\n  const removeColor = (index) => {\n    if (colors.length > 1) {\n      const newColors = colors.filter((_, i) => i !== index);\n      onColorsChange(newColors);\n      if (activeColorIndex >= newColors.length) {\n        setActiveColorIndex(Math.max(0, newColors.length - 1));\n      }\n    }\n  };\n\n  const updateColor = (index, color) => {\n    const newColors = [...colors];\n    newColors[index] = color;\n    onColorsChange(newColors);\n  };\n\n  // Handle pattern size changes\n  const handleSizeChange = (dimension, value) => {\n    const newSize = { ...patternSize, [dimension]: value };\n    \n    // Resize pattern array\n    let newPattern;\n    if (patternType === 'stripes') {\n      newPattern = new Array(newSize.height).fill(0);\n      // Copy existing data\n      for (let i = 0; i < Math.min(currentPattern.length, newSize.height); i++) {\n        newPattern[i] = currentPattern[i] || 0;\n      }\n    } else {\n      newPattern = Array(newSize.height).fill(null).map((_, row) => {\n        const newRow = new Array(newSize.width).fill(0);\n        if (currentPattern[row]) {\n          for (let col = 0; col < Math.min(currentPattern[row].length, newSize.width); col++) {\n            newRow[col] = currentPattern[row][col];\n          }\n        }\n        return newRow;\n      });\n    }\n    \n    onPatternChange(newPattern);\n  };\n\n  // Save pattern\n  const handleSave = () => {\n    if (!patternName.trim()) {\n      return;\n    }\n    \n    onSave({\n      name: patternName.trim(),\n      type: patternType,\n      pattern: currentPattern,\n      colors: colors,\n      size: patternSize\n    });\n    \n    setPatternName('');\n  };\n\n  return (\n    <Card title={title} style={{ height: 'fit-content' }}>\n      <Space direction=\"vertical\" size=\"medium\" style={{ width: '100%' }}>\n        \n        {/* Pattern Type and Size */}\n        <Row gutter={16}>\n          <Col span={8}>\n            <Text strong>Pattern Type</Text>\n            <Select \n              value={patternType} \n              style={{ width: '100%' }} \n              disabled // Controlled by parent\n            >\n              <Option value=\"stranded\">Stranded</Option>\n              <Option value=\"intarsia\">Intarsia</Option>\n              <Option value=\"stripes\">Stripes</Option>\n            </Select>\n          </Col>\n          {patternType !== 'stripes' && (\n            <Col span={8}>\n              <Text strong>Width (stitches)</Text>\n              <InputNumber\n                value={patternSize.width}\n                onChange={(value) => handleSizeChange('width', value)}\n                min={1}\n                max={50}\n                style={{ width: '100%' }}\n              />\n            </Col>\n          )}\n          <Col span={8}>\n            <Text strong>{patternType === 'stripes' ? 'Rows' : 'Height (rows)'}</Text>\n            <InputNumber\n              value={patternSize.height}\n              onChange={(value) => handleSizeChange('height', value)}\n              min={1}\n              max={50}\n              style={{ width: '100%' }}\n            />\n          </Col>\n        </Row>\n\n        {/* Color Palette */}\n        <div>\n          <div style={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', marginBottom: '8px' }}>\n            <Text strong>Color Palette</Text>\n            <Button \n              size=\"small\" \n              icon={<PlusOutlined />} \n              onClick={addColor}\n              disabled={colors.length >= 8}\n            >\n              Add Color\n            </Button>\n          </div>\n          \n          <Row gutter={[8, 8]}>\n            {colors.map((color, index) => (\n              <Col key={index}>\n                <div style={{ \n                  border: activeColorIndex === index ? '3px solid #1890ff' : '2px solid #ddd',\n                  borderRadius: '8px',\n                  padding: '4px',\n                  cursor: 'pointer',\n                  backgroundColor: activeColorIndex === index ? '#f0f8ff' : 'transparent'\n                }}\n                onClick={() => setActiveColorIndex(index)}>\n                  <ColorPicker\n                    value={color}\n                    onChange={(value) => updateColor(index, value.toHexString())}\n                    size=\"small\"\n                  />\n                  <Button\n                    size=\"small\"\n                    type=\"text\"\n                    icon={<MinusOutlined />}\n                    onClick={(e) => {\n                      e.stopPropagation();\n                      removeColor(index);\n                    }}\n                    disabled={colors.length <= 1}\n                    style={{ marginLeft: '4px' }}\n                  />\n                </div>\n                <div style={{ textAlign: 'center', fontSize: '10px', marginTop: '2px' }}>\n                  Color {index + 1}\n                </div>\n              </Col>\n            ))}\n          </Row>\n          \n          <Text type=\"secondary\" style={{ fontSize: '12px', marginTop: '8px', display: 'block' }}>\n            Click a color to select it, then click stitches in the pattern to apply it.\n            {patternType === 'stripes' && ' For stripes, clicking any stitch changes the entire row.'}\n          </Text>\n        </div>\n\n        {/* Pattern Grid */}\n        <div>\n          <Text strong>Pattern Grid</Text>\n          <div style={{ \n            display: 'flex', \n            justifyContent: 'center', \n            padding: '16px',\n            backgroundColor: '#fafafa',\n            borderRadius: '8px',\n            marginTop: '8px'\n          }}>\n            <SwatchViewer\n              pattern={currentPattern}\n              colors={colors}\n              gauge={gauge}\n              size={{ \n                width: patternType === 'stripes' ? 4 : patternSize.width / gauge.stitches,\n                height: patternSize.height / gauge.rows \n              }}\n              onStitchClick={handleStitchClick}\n            />\n          </div>\n        </div>\n\n        {/* Save Pattern */}\n        <div>\n          <Text strong>Save Pattern</Text>\n          <Space.Compact style={{ width: '100%', marginTop: '8px' }}>\n            <Input\n              placeholder=\"Pattern name\"\n              value={patternName}\n              onChange={(e) => setPatternName(e.target.value)}\n            />\n            <Button \n              type=\"primary\" \n              icon={<SaveOutlined />}\n              onClick={handleSave}\n              disabled={!patternName.trim()}\n            >\n              Save\n            </Button>\n          </Space.Compact>\n        </div>\n      </Space>\n    </Card>\n  );\n};\n\nexport default PatternEditor;\n","import React, { useMemo } from 'react';\nimport KnitStitch from './KnitStitch';\n\nconst KnitSwatch = ({ \n  gauge = { stitches: 19, rows: 26 }, // Stitches and rows per 4 inches\n  colors = ['#ffffff'], \n  pattern = [], // 2D array for colorwork patterns, empty for solid\n  size = { width: 4, height: 4 }, // Size in inches\n  stitchSize = 8, // Size of each stitch in pixels\n  className = '',\n  style = {},\n  onClick = null,\n  showBorder = true,\n  borderColor = '#cccccc'\n}) => {\n  // Calculate grid dimensions based on gauge\n  const dimensions = useMemo(() => {\n    const stitchesWide = Math.round((gauge.stitches / 4) * size.width);\n    const rowsHigh = Math.round((gauge.rows / 4) * size.height);\n    \n    return {\n      stitchesWide,\n      rowsHigh,\n      totalStitches: stitchesWide * rowsHigh\n    };\n  }, [gauge, size]);\n\n  // Generate the stitch grid\n  const stitchGrid = useMemo(() => {\n    const grid = [];\n    \n    for (let row = 0; row < dimensions.rowsHigh; row++) {\n      const rowStitches = [];\n      \n      for (let stitch = 0; stitch < dimensions.stitchesWide; stitch++) {\n        let colorIndex = 0;\n        \n        // Apply pattern if provided\n        if (pattern.length > 0) {\n          if (Array.isArray(pattern[0])) {\n            // 2D pattern array (stranded/intarsia)\n            const patternRow = row % pattern.length;\n            const patternCol = stitch % pattern[patternRow].length;\n            colorIndex = pattern[patternRow][patternCol] || 0;\n          } else {\n            // 1D pattern array (stripes)\n            colorIndex = pattern[row % pattern.length] || 0;\n          }\n        }\n        \n        // Ensure colorIndex is valid\n        colorIndex = Math.min(colorIndex, colors.length - 1);\n        \n        rowStitches.push({\n          row,\n          stitch,\n          colorIndex,\n          color: colors[colorIndex] || colors[0] || '#ffffff',\n          key: `${row}-${stitch}`\n        });\n      }\n      \n      grid.push(rowStitches);\n    }\n    \n    return grid;\n  }, [pattern, colors, dimensions]);\n\n  // Handle stitch clicks\n  const handleStitchClick = (row, stitch) => {\n    if (onClick) {\n      onClick(row, stitch);\n    }\n  };\n\n  const containerStyle = {\n    display: 'inline-block',\n    padding: '16px',\n    backgroundColor: '#fafafa',\n    borderRadius: '8px',\n    border: showBorder ? `2px solid ${borderColor}` : 'none',\n    ...style\n  };\n\n  const gridStyle = {\n    display: 'grid',\n    gridTemplateColumns: `repeat(${dimensions.stitchesWide}, ${stitchSize}px)`,\n    gap: '0px', // Remove gaps for tessellation\n    backgroundColor: '#ffffff',\n    padding: '8px',\n    borderRadius: '4px',\n    boxShadow: 'inset 0 2px 4px rgba(0,0,0,0.1)',\n    overflow: 'hidden' // Ensure seamless edges\n  };\n\n  return (\n    <div className={className} style={containerStyle}>\n      {/* Swatch info header */}\n      <div style={{ \n        marginBottom: '12px', \n        textAlign: 'center',\n        fontSize: '12px',\n        color: '#666'\n      }}>\n        <div style={{ fontWeight: 'bold', marginBottom: '4px' }}>\n          Knit Swatch ({size.width}\" × {size.height}\")\n        </div>\n        <div>\n          {dimensions.stitchesWide} × {dimensions.rowsHigh} stitches\n        </div>\n        <div>\n          Gauge: {gauge.stitches} sts × {gauge.rows} rows per 4\"\n        </div>\n      </div>\n\n      {/* Stitch grid */}\n      <div style={gridStyle}>\n        {stitchGrid.map(row => \n          row.map(({ row: r, stitch: s, color, key }) => (\n            <KnitStitch\n              key={key}\n              color={color}\n              size={stitchSize}\n              strokeWidth={0} // Remove stroke for seamless tessellation\n              onClick={onClick ? () => handleStitchClick(r, s) : null}\n              style={{\n                width: stitchSize,\n                height: stitchSize * 0.75,\n                display: 'block',\n                margin: 0,\n                padding: 0\n              }}\n            />\n          ))\n        )}\n      </div>\n\n      {/* Color legend */}\n      {colors.length > 1 && (\n        <div style={{ \n          marginTop: '12px', \n          display: 'flex', \n          justifyContent: 'center',\n          gap: '8px',\n          flexWrap: 'wrap'\n        }}>\n          {colors.map((color, index) => (\n            <div key={index} style={{ \n              display: 'flex', \n              alignItems: 'center', \n              gap: '4px',\n              fontSize: '11px',\n              color: '#666'\n            }}>\n              <div style={{\n                width: '12px',\n                height: '12px',\n                backgroundColor: color,\n                border: '1px solid #ccc',\n                borderRadius: '2px'\n              }} />\n              <span>Color {index + 1}</span>\n            </div>\n          ))}\n        </div>\n      )}\n\n      {/* Pattern stats */}\n      <div style={{ \n        marginTop: '8px', \n        textAlign: 'center',\n        fontSize: '10px',\n        color: '#999'\n      }}>\n        {pattern.length > 0 ? 'Colorwork Pattern' : 'Solid Color'} • {dimensions.totalStitches} total stitches\n      </div>\n    </div>\n  );\n};\n\nexport default KnitSwatch;\n","import React, { useState, useEffect, useRef } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport {\n  Card, Row, Col, Button, Space, Typography, Tabs,\n  Select, Input, message, Popconfirm, Divider, Tooltip, Badge,\n  InputNumber, List, Avatar, Tag, Alert\n} from 'antd';\nimport {\n  PlusOutlined, DeleteOutlined, EyeOutlined, EyeInvisibleOutlined,\n  CopyOutlined, AppstoreAddOutlined\n} from '@ant-design/icons';\nimport {\n  updateColorwork, savePattern, deletePattern, setActiveWorkingPattern,\n  createComplexPattern, updateComplexPattern, deleteComplexPattern,\n  addToGarmentSequence, updateGarmentSequence, removeFromGarmentSequence\n} from '../../../store/knittingDesignSlice';\nimport PatternEditor from '../../../components/PatternEditor';\nimport SwatchViewer from '../../../components/SwatchViewer';\nimport KnitSwatch from '../../../components/KnitSwatch';\n\nconst { Title, Text, Paragraph } = Typography;\nconst { Option } = Select;\nconst { TabPane } = Tabs;\n\nconst COLORWORK_TYPES = {\n  solid: {\n    name: 'Solid Color',\n    description: 'Single color throughout the panel',\n    icon: '■',\n    complexity: 'Beginner',\n    default: true\n  },\n  stripes: {\n    name: 'Stripes',\n    description: 'Horizontal stripes with customizable row heights',\n    icon: '━━━',\n    complexity: 'Beginner'\n  },\n  stranded: {\n    name: 'Stranded Colorwork',\n    description: 'Two-color patterns carried across each row',\n    icon: '▓▓▓',\n    complexity: 'Intermediate'\n  },\n  intarsia: {\n    name: 'Intarsia',\n    description: 'Block color patterns with separate yarn sources',\n    icon: '■■■',\n    complexity: 'Advanced'\n  }\n};\n\nconst POSITIONING_OPTIONS = [\n  { value: 'left', label: 'Left' },\n  { value: 'center', label: 'Center' },\n  { value: 'right', label: 'Right' },\n  { value: 'custom', label: 'Custom Offset' }\n];\n\nconst ColorworkStep = ({ data, onUpdate, onNext, onPrev }) => {\n  const dispatch = useDispatch();\n  const colorworkState = useSelector(state => state.knittingDesign?.patternData?.colorwork) || {};\n  const gauge = useSelector(state => state.knittingDesign?.patternData?.gauge) || {};\n  const hasInitialized = useRef(false);\n  \n  const [activeTab, setActiveTab] = useState('basic');\n  const [selectedComplexPattern, setSelectedComplexPattern] = useState(null);\n  const [newComplexPatternName, setNewComplexPatternName] = useState('');\n  const [garmentPreviewMode, setGarmentPreviewMode] = useState('front');\n  const [swatchSettings, setSwatchSettings] = useState({\n    size: { width: 4, height: 4 },\n    stitchSize: 8,\n    testPattern: null\n  });\n\n  // Local state for test colors since they should be independent of Redux state\n  const [testColors, setTestColors] = useState(['#ffffff']);\n\n  // Update test colors when colorwork type changes\n  useEffect(() => {\n    if (colorworkState.type === 'solid') {\n      setTestColors([colorworkState.color || '#ffffff']);\n    } else if (colorworkState.type && testColors.length === 1 && testColors[0] === '#ffffff') {\n      // Set default colors for multi-color patterns\n      setTestColors(['#ffffff', '#000000']);\n    }\n  }, [colorworkState.type, colorworkState.color]);\n\n  // Initialize colorwork state only once when component mounts\n  useEffect(() => {\n    if (!hasInitialized.current && (!colorworkState.initialized || Object.keys(colorworkState).length === 0)) {\n      console.log('Initializing colorwork state...');\n      hasInitialized.current = true;\n      \n      const initialState = {\n        type: data?.colorwork?.type || 'solid', // Default to solid color\n        color: data?.colorwork?.color || '#ffffff', // Default color for solid\n        initialized: true,\n        savedPatterns: {},\n        workingPatterns: {\n          stripes: { pattern: [], colors: ['#ffffff'], size: { height: 4 } },\n          stranded: { pattern: [], colors: ['#ffffff', '#000000'], size: { width: 8, height: 8 } },\n          intarsia: { pattern: [], colors: ['#ffffff', '#ff0000'], size: { width: 16, height: 16 } }\n        },\n        complexPatterns: {},\n        garmentSequence: [],\n        activeWorkingPattern: null\n      };\n      \n      console.log('Dispatching initial colorwork state:', initialState);\n      dispatch(updateColorwork(initialState));\n    }\n  }, []); // Empty dependency array to run only once\n\n  const handleColorworkTypeChange = (type) => {\n    console.log('handleColorworkTypeChange called with type:', type);\n    console.log('Current colorworkState:', colorworkState);\n    \n    const newState = {\n      ...colorworkState,\n      type,\n      initialized: true,\n      // Set default color for solid type\n      color: type === 'solid' ? (colorworkState.color || '#ffffff') : colorworkState.color,\n      // Ensure base structure exists\n      savedPatterns: colorworkState?.savedPatterns || {},\n      workingPatterns: colorworkState?.workingPatterns || {\n        stripes: { pattern: [], colors: ['#ffffff'], size: { height: 4 } },\n        stranded: { pattern: [], colors: ['#ffffff', '#000000'], size: { width: 8, height: 8 } },\n        intarsia: { pattern: [], colors: ['#ffffff', '#ff0000'], size: { width: 16, height: 16 } }\n      },\n      complexPatterns: colorworkState?.complexPatterns || {},\n      garmentSequence: colorworkState?.garmentSequence || [],\n      activeWorkingPattern: colorworkState?.activeWorkingPattern || null\n    };\n    \n    console.log('Dispatching newState:', newState);\n    dispatch(updateColorwork(newState));\n    onUpdate({ colorwork: newState });\n  };\n\n  const handleColorChange = (color) => {\n    const newState = {\n      ...colorworkState,\n      color,\n      initialized: true\n    };\n    \n    dispatch(updateColorwork(newState));\n    onUpdate({ colorwork: newState });\n  };\n\n  const handleSavePattern = (patternData) => {\n    dispatch(savePattern(patternData));\n    message.success(`Pattern \"${patternData.name}\" saved to library`);\n  };\n\n  const handleDeletePattern = (patternId) => {\n    dispatch(deletePattern(patternId));\n    message.success('Pattern deleted from library');\n  };\n\n  const handleCreateComplexPattern = () => {\n    if (!newComplexPatternName.trim()) {\n      message.error('Please enter a pattern name');\n      return;\n    }\n\n    const complexPattern = {\n      id: `complex_${Date.now()}`,\n      name: newComplexPatternName,\n      components: [],\n      created: new Date().toISOString()\n    };\n\n    dispatch(createComplexPattern(complexPattern));\n    setSelectedComplexPattern(complexPattern.id);\n    setNewComplexPatternName('');\n    message.success(`Complex pattern \"${complexPattern.name}\" created`);\n  };\n\n  const handleAddToComplex = (patternId, complexPatternId) => {\n    const component = {\n      id: `component_${Date.now()}`,\n      patternId,\n      positioning: 'center',\n      customOffset: { x: 0, y: 0 },\n      zIndex: 0,\n      opacity: 100,\n      visible: true\n    };\n\n    dispatch(updateComplexPattern({\n      id: complexPatternId,\n      updates: {\n        components: [...(colorworkState.complexPatterns?.[complexPatternId]?.components || []), component]\n      }\n    }));\n    message.success('Pattern added to complex pattern');\n  };\n\n  const handleAddToGarment = (patternId, isComplex = false) => {\n    const sequenceItem = {\n      id: `sequence_${Date.now()}`,\n      patternId,\n      isComplex,\n      positioning: 'center',\n      customOffset: { x: 0, y: 0 },\n      zIndex: 0,\n      opacity: 100,\n      visible: true,\n      garmentSection: garmentPreviewMode\n    };\n\n    dispatch(addToGarmentSequence(sequenceItem));\n    message.success('Pattern added to garment sequence');\n  };\n\n  const handleNext = () => {\n    onUpdate({ colorwork: colorworkState });\n    onNext();\n  };\n\n  // Render the solid color picker interface\n  const renderSolidColorPicker = () => (\n    <Card title=\"Solid Color Selection\" style={{ marginTop: 16 }}>\n      <Space direction=\"vertical\" style={{ width: '100%' }}>\n        <Text>Choose a single color for your entire panel:</Text>\n        <input\n          type=\"color\"\n          value={colorworkState.color || '#ffffff'}\n          onChange={(e) => handleColorChange(e.target.value)}\n          style={{\n            width: '100px',\n            height: '50px',\n            border: '1px solid #d9d9d9',\n            borderRadius: '6px',\n            cursor: 'pointer'\n          }}\n        />\n        <Text type=\"secondary\">Selected color: {colorworkState.color || '#ffffff'}</Text>\n      </Space>\n    </Card>\n  );\n\n  // Render functions for complex patterns (unchanged)\n  const renderBasicPatterns = () => (\n    <Row gutter={[16, 16]}>\n      <Col xs={24} lg={12}>\n        <Card title=\"Pattern Types\" size=\"small\">\n          <Space direction=\"vertical\" style={{ width: '100%' }} size=\"large\">\n            {Object.entries(COLORWORK_TYPES).filter(([type]) => type !== 'solid').map(([type, info]) => (\n              <Card \n                key={type}\n                size=\"small\" \n                hoverable\n                style={{ \n                  border: colorworkState.activeWorkingPattern?.type === type ? '2px solid #1890ff' : '1px solid #d9d9d9'\n                }}\n                onClick={() => dispatch(setActiveWorkingPattern({ type, pattern: null }))}\n              >\n                <Row align=\"middle\">\n                  <Col flex=\"none\">\n                    <Avatar \n                      style={{ \n                        backgroundColor: '#f56a00',\n                        fontFamily: 'monospace'\n                      }}\n                    >\n                      {info.icon}\n                    </Avatar>\n                  </Col>\n                  <Col flex=\"auto\" style={{ marginLeft: 12 }}>\n                    <Text strong>{info.name}</Text>\n                    <br />\n                    <Text type=\"secondary\" style={{ fontSize: '12px' }}>\n                      {info.description}\n                    </Text>\n                    <br />\n                    <Tag color={info.complexity === 'Beginner' ? 'green' : \n                              info.complexity === 'Intermediate' ? 'orange' : 'red'}>\n                      {info.complexity}\n                    </Tag>\n                  </Col>\n                </Row>\n              </Card>\n            ))}\n          </Space>\n        </Card>\n\n        <Card title=\"Pattern Library\" size=\"small\" style={{ marginTop: 16 }}>\n          <List\n            size=\"small\"\n            dataSource={Object.values(colorworkState.savedPatterns || {})}\n            renderItem={(pattern) => (\n              <List.Item\n                actions={[\n                  <Tooltip title=\"Load for editing\">\n                    <Button \n                      type=\"link\" \n                      icon={<EyeOutlined />}\n                      onClick={() => dispatch(setActiveWorkingPattern({ \n                        type: pattern.type, \n                        pattern: pattern.id \n                      }))}\n                    />\n                  </Tooltip>,\n                  <Tooltip title=\"Duplicate\">\n                    <Button \n                      type=\"link\" \n                      icon={<CopyOutlined />}\n                      onClick={() => {\n                        const duplicate = {\n                          ...pattern,\n                          id: `${pattern.id}_copy_${Date.now()}`,\n                          name: `${pattern.name} (Copy)`\n                        };\n                        dispatch(savePattern(duplicate));\n                      }}\n                    />\n                  </Tooltip>,\n                  <Popconfirm\n                    title=\"Delete this pattern?\"\n                    onConfirm={() => handleDeletePattern(pattern.id)}\n                  >\n                    <Button type=\"link\" danger icon={<DeleteOutlined />} />\n                  </Popconfirm>\n                ]}\n              >\n                <List.Item.Meta\n                  avatar={\n                    <Avatar style={{ backgroundColor: pattern.colors?.[0] || '#ccc' }}>\n                      {COLORWORK_TYPES[pattern.type]?.icon || '?'}\n                    </Avatar>\n                  }\n                  title={pattern.name}\n                  description={\n                    <Space>\n                      <Tag>{COLORWORK_TYPES[pattern.type]?.name || pattern.type}</Tag>\n                      <Text type=\"secondary\">\n                        {pattern.colors?.length || 0} colors\n                      </Text>\n                    </Space>\n                  }\n                />\n              </List.Item>\n            )}\n          />\n        </Card>\n      </Col>\n\n      <Col xs={24} lg={12}>\n        {colorworkState.activeWorkingPattern?.type && (\n          <PatternEditor\n            type={colorworkState.activeWorkingPattern.type}\n            initialPattern={colorworkState.activeWorkingPattern.pattern ? \n              colorworkState.savedPatterns[colorworkState.activeWorkingPattern.pattern] : null}\n            onSave={handleSavePattern}\n            gauge={gauge}\n          />\n        )}\n      </Col>\n    </Row>\n  );\n\n  const renderComplexPatterns = () => (\n    <Row gutter={[16, 16]}>\n      <Col xs={24} lg={8}>\n        <Card title=\"Complex Patterns\" size=\"small\">\n          <Space direction=\"vertical\" style={{ width: '100%' }}>\n            <Input.Group compact>\n              <Input\n                placeholder=\"New complex pattern name\"\n                value={newComplexPatternName}\n                onChange={(e) => setNewComplexPatternName(e.target.value)}\n                onPressEnter={handleCreateComplexPattern}\n                style={{ width: 'calc(100% - 40px)' }}\n              />\n              <Button \n                type=\"primary\" \n                icon={<PlusOutlined />}\n                onClick={handleCreateComplexPattern}\n              />\n            </Input.Group>\n\n            <List\n              size=\"small\"\n              dataSource={Object.values(colorworkState.complexPatterns || {})}\n              renderItem={(pattern) => (\n                <List.Item\n                  className={selectedComplexPattern === pattern.id ? 'ant-list-item-selected' : ''}\n                  style={{ \n                    cursor: 'pointer',\n                    backgroundColor: selectedComplexPattern === pattern.id ? '#f0f8ff' : 'transparent'\n                  }}\n                  onClick={() => setSelectedComplexPattern(pattern.id)}\n                  actions={[\n                    <Badge count={pattern.components?.length || 0} size=\"small\">\n                      <AppstoreAddOutlined />\n                    </Badge>,\n                    <Popconfirm\n                      title=\"Delete this complex pattern?\"\n                      onConfirm={() => {\n                        dispatch(deleteComplexPattern(pattern.id));\n                        if (selectedComplexPattern === pattern.id) {\n                          setSelectedComplexPattern(null);\n                        }\n                      }}\n                    >\n                      <Button type=\"link\" danger size=\"small\" icon={<DeleteOutlined />} />\n                    </Popconfirm>\n                  ]}\n                >\n                  <List.Item.Meta\n                    title={pattern.name}\n                    description={`${pattern.components?.length || 0} components`}\n                  />\n                </List.Item>\n              )}\n            />\n          </Space>\n        </Card>\n\n        <Card title=\"Add Basic Patterns\" size=\"small\" style={{ marginTop: 16 }}>\n          <List\n            size=\"small\"\n            dataSource={Object.values(colorworkState.savedPatterns || {})}\n            renderItem={(pattern) => (\n              <List.Item\n                actions={[\n                  <Button \n                    type=\"link\" \n                    icon={<PlusOutlined />}\n                    disabled={!selectedComplexPattern}\n                    onClick={() => handleAddToComplex(pattern.id, selectedComplexPattern)}\n                  >\n                    Add\n                  </Button>\n                ]}\n              >\n                <List.Item.Meta\n                  avatar={\n                    <Avatar style={{ backgroundColor: pattern.colors?.[0] || '#ccc' }}>\n                      {COLORWORK_TYPES[pattern.type]?.icon || '?'}\n                    </Avatar>\n                  }\n                  title={pattern.name}\n                  description={COLORWORK_TYPES[pattern.type]?.name}\n                />\n              </List.Item>\n            )}\n          />\n        </Card>\n      </Col>\n\n      <Col xs={24} lg={16}>\n        {selectedComplexPattern && (\n          <Card title={`Editing: ${colorworkState.complexPatterns?.[selectedComplexPattern]?.name}`} size=\"small\">\n            <Space direction=\"vertical\" style={{ width: '100%' }}>\n              <Alert\n                message=\"Complex Pattern Composition\"\n                description=\"Arrange and position individual patterns to create complex designs. Use positioning and z-index to control layering.\"\n                type=\"info\"\n                showIcon\n              />\n              \n              <List\n                size=\"small\"\n                dataSource={colorworkState.complexPatterns?.[selectedComplexPattern]?.components || []}\n                renderItem={(component, index) => (\n                  <List.Item\n                    actions={[\n                      <InputNumber\n                        size=\"small\"\n                        placeholder=\"Z-Index\"\n                        value={component.zIndex}\n                        onChange={(value) => {\n                          const updatedComponents = [...(colorworkState.complexPatterns?.[selectedComplexPattern]?.components || [])];\n                          updatedComponents[index] = { ...component, zIndex: value };\n                          dispatch(updateComplexPattern({\n                            id: selectedComplexPattern,\n                            updates: { components: updatedComponents }\n                          }));\n                        }}\n                      />,\n                      <Select\n                        size=\"small\"\n                        value={component.positioning}\n                        onChange={(value) => {\n                          const updatedComponents = [...(colorworkState.complexPatterns?.[selectedComplexPattern]?.components || [])];\n                          updatedComponents[index] = { ...component, positioning: value };\n                          dispatch(updateComplexPattern({\n                            id: selectedComplexPattern,\n                            updates: { components: updatedComponents }\n                          }));\n                        }}\n                      >\n                        {POSITIONING_OPTIONS.map(opt => (\n                          <Option key={opt.value} value={opt.value}>{opt.label}</Option>\n                        ))}\n                      </Select>,\n                      <Button \n                        type=\"link\" \n                        danger \n                        size=\"small\" \n                        icon={<DeleteOutlined />}\n                        onClick={() => {\n                          const updatedComponents = (colorworkState.complexPatterns?.[selectedComplexPattern]?.components || []).filter((_, i) => i !== index);\n                          dispatch(updateComplexPattern({\n                            id: selectedComplexPattern,\n                            updates: { components: updatedComponents }\n                          }));\n                        }}\n                      />\n                    ]}\n                  >\n                    <List.Item.Meta\n                      title={(colorworkState.savedPatterns || {})[component.patternId]?.name || 'Unknown Pattern'}\n                      description={`Position: ${component.positioning}, Z-Index: ${component.zIndex}`}\n                    />\n                  </List.Item>\n                )}\n              />\n            </Space>\n          </Card>\n        )}\n      </Col>\n    </Row>\n  );\n\n  const renderGarmentSequence = () => (\n    <Row gutter={[16, 16]}>\n      <Col xs={24} lg={8}>\n        <Card title=\"Garment Sections\" size=\"small\">\n          <Select\n            value={garmentPreviewMode}\n            onChange={setGarmentPreviewMode}\n            style={{ width: '100%', marginBottom: 16 }}\n          >\n            <Option value=\"front\">Front</Option>\n            <Option value=\"back\">Back</Option>\n            <Option value=\"sleeves\">Sleeves</Option>\n            <Option value=\"collar\">Collar</Option>\n          </Select>\n\n          <Divider orientation=\"left\" plain>Available Patterns</Divider>\n          \n          <Space direction=\"vertical\" style={{ width: '100%' }}>\n            <Text strong>Basic Patterns</Text>\n            <List\n              size=\"small\"\n              dataSource={Object.values(colorworkState.savedPatterns || {})}\n              renderItem={(pattern) => (\n                <List.Item\n                  actions={[\n                    <Button \n                      type=\"link\" \n                      icon={<PlusOutlined />}\n                      onClick={() => handleAddToGarment(pattern.id, false)}\n                    >\n                      Add\n                    </Button>\n                  ]}\n                >\n                  <List.Item.Meta\n                    avatar={\n                      <Avatar style={{ backgroundColor: pattern.colors?.[0] || '#ccc' }}>\n                        {COLORWORK_TYPES[pattern.type]?.icon || '?'}\n                      </Avatar>\n                    }\n                    title={pattern.name}\n                    description={COLORWORK_TYPES[pattern.type]?.name}\n                  />\n                </List.Item>\n              )}\n            />\n\n            <Text strong>Complex Patterns</Text>\n            <List\n              size=\"small\"\n              dataSource={Object.values(colorworkState.complexPatterns || {})}\n              renderItem={(pattern) => (\n                <List.Item\n                  actions={[\n                    <Button \n                      type=\"link\" \n                      icon={<PlusOutlined />}\n                      onClick={() => handleAddToGarment(pattern.id, true)}\n                    >\n                      Add\n                    </Button>\n                  ]}\n                >\n                  <List.Item.Meta\n                    avatar={\n                      <Badge count={pattern.components?.length || 0} size=\"small\">\n                        <Avatar style={{ backgroundColor: '#722ed1' }}>\n                          <AppstoreAddOutlined />\n                        </Avatar>\n                      </Badge>\n                    }\n                    title={pattern.name}\n                    description=\"Complex Pattern\"\n                  />\n                </List.Item>\n              )}\n            />\n          </Space>\n        </Card>\n      </Col>\n\n      <Col xs={24} lg={16}>\n        <Card title={`${garmentPreviewMode.charAt(0).toUpperCase() + garmentPreviewMode.slice(1)} Sequence`} size=\"small\">\n          <Space direction=\"vertical\" style={{ width: '100%' }}>\n            <Alert\n              message=\"Garment Pattern Sequencing\"\n              description=\"Arrange patterns for the entire garment with positioning and z-index control. Patterns will be applied in sequence order.\"\n              type=\"info\"\n              showIcon\n            />\n\n            <List\n              size=\"small\"\n              dataSource={(colorworkState.garmentSequence || []).filter(item => item.garmentSection === garmentPreviewMode)}\n              renderItem={(item, index) => (\n                <List.Item\n                  actions={[\n                    <InputNumber\n                      size=\"small\"\n                      placeholder=\"Z-Index\"\n                      value={item.zIndex}\n                      onChange={(value) => {\n                        dispatch(updateGarmentSequence({\n                          id: item.id,\n                          updates: { zIndex: value }\n                        }));\n                      }}\n                    />,\n                    <Select\n                      size=\"small\"\n                      value={item.positioning}\n                      onChange={(value) => {\n                        dispatch(updateGarmentSequence({\n                          id: item.id,\n                          updates: { positioning: value }\n                        }));\n                      }}\n                    >\n                      {POSITIONING_OPTIONS.map(opt => (\n                        <Option key={opt.value} value={opt.value}>{opt.label}</Option>\n                      ))}\n                    </Select>,\n                    <Button\n                      type=\"link\"\n                      icon={item.visible ? <EyeOutlined /> : <EyeInvisibleOutlined />}\n                      onClick={() => {\n                        dispatch(updateGarmentSequence({\n                          id: item.id,\n                          updates: { visible: !item.visible }\n                        }));\n                      }}\n                    />,\n                    <Button \n                      type=\"link\" \n                      danger \n                      size=\"small\" \n                      icon={<DeleteOutlined />}\n                      onClick={() => dispatch(removeFromGarmentSequence(item.id))}\n                    />\n                  ]}\n                >\n                  <List.Item.Meta\n                    title={\n                      item.isComplex \n                        ? (colorworkState.complexPatterns || {})[item.patternId]?.name\n                        : (colorworkState.savedPatterns || {})[item.patternId]?.name\n                    }\n                    description={\n                      <Space>\n                        <Tag>{item.isComplex ? 'Complex' : 'Basic'}</Tag>\n                        <Text type=\"secondary\">Position: {item.positioning}</Text>\n                        <Text type=\"secondary\">Z-Index: {item.zIndex}</Text>\n                      </Space>\n                    }\n                  />\n                </List.Item>\n              )}\n            />\n          </Space>\n        </Card>\n      </Col>\n    </Row>\n  );\n\n  const renderSwatchTester = () => (\n    <Row gutter={[16, 16]}>\n      <Col xs={24} lg={12}>\n        <Card title=\"Swatch Settings\" size=\"small\">\n          <Space direction=\"vertical\" style={{ width: '100%' }}>\n            <div>\n              <Text strong>Current Gauge</Text>\n              <div style={{ \n                marginTop: 8,\n                padding: '12px',\n                border: '1px solid #d9d9d9',\n                borderRadius: '4px',\n                backgroundColor: '#f8f9fa',\n                textAlign: 'center'\n              }}>\n                <Text strong style={{ color: '#1890ff' }}>\n                  {gauge?.stitches || (gauge?.stitchesPerInch ? gauge.stitchesPerInch * 4 : 19)} sts × {gauge?.rows || (gauge?.rowsPerInch ? gauge.rowsPerInch * 4 : 30)} rows per 4\"\n                </Text>\n                <br />\n                <Text type=\"secondary\" style={{ fontSize: '12px' }}>\n                  Set in the Gauge step\n                </Text>\n              </div>\n            </div>\n\n            <div>\n              <Text strong>Swatch Size</Text>\n              <Row gutter={8} style={{ marginTop: 8 }}>\n                <Col span={12}>\n                  <Text type=\"secondary\">Width (inches)</Text>\n                  <InputNumber\n                    min={1}\n                    max={8}\n                    step={0.5}\n                    value={swatchSettings.size.width}\n                    onChange={(value) => setSwatchSettings(prev => ({\n                      ...prev,\n                      size: { ...prev.size, width: value }\n                    }))}\n                    style={{ width: '100%' }}\n                  />\n                </Col>\n                <Col span={12}>\n                  <Text type=\"secondary\">Height (inches)</Text>\n                  <InputNumber\n                    min={1}\n                    max={8}\n                    step={0.5}\n                    value={swatchSettings.size.height}\n                    onChange={(value) => setSwatchSettings(prev => ({\n                      ...prev,\n                      size: { ...prev.size, height: value }\n                    }))}\n                    style={{ width: '100%' }}\n                  />\n                </Col>\n              </Row>\n            </div>\n\n            <div>\n              <Text strong>Display Settings</Text>\n              <div style={{ marginTop: 8 }}>\n                <Text type=\"secondary\">Stitch Size (pixels)</Text>\n                <InputNumber\n                  min={4}\n                  max={16}\n                  value={swatchSettings.stitchSize}\n                  onChange={(value) => setSwatchSettings(prev => ({\n                    ...prev,\n                    stitchSize: value\n                  }))}\n                  style={{ width: '100%' }}\n                />\n              </div>\n            </div>\n\n            <Divider />\n\n            {colorworkState.type !== 'solid' && (\n              <div>\n                <Text strong>Test Colors</Text>\n                <div style={{ marginTop: 8 }}>\n                  {testColors.map((color, index) => (\n                    <Row key={index} gutter={8} style={{ marginBottom: 8 }}>\n                      <Col span={16}>\n                        <input\n                          type=\"color\"\n                          value={color}\n                          onChange={(e) => {\n                            const newColors = [...testColors];\n                            newColors[index] = e.target.value;\n                            setTestColors(newColors);\n                          }}\n                          style={{\n                            width: '100%',\n                            height: '32px',\n                            border: '1px solid #d9d9d9',\n                            borderRadius: '4px',\n                            cursor: 'pointer'\n                          }}\n                        />\n                      </Col>\n                      <Col span={8}>\n                        <Button\n                          danger\n                          disabled={testColors.length <= 1}\n                          onClick={() => {\n                            setTestColors(testColors.filter((_, i) => i !== index));\n                          }}\n                        >\n                          Remove\n                        </Button>\n                      </Col>\n                    </Row>\n                  ))}\n                  <Button\n                    type=\"dashed\"\n                    icon={<PlusOutlined />}\n                    onClick={() => {\n                      setTestColors([...testColors, '#ffffff']);\n                    }}\n                    style={{ width: '100%' }}\n                  >\n                    Add Color\n                  </Button>\n                </div>\n              </div>\n            )}\n\n            {colorworkState.type === 'solid' && (\n              <div>\n                <Text strong>Current Solid Color</Text>\n                <div style={{ \n                  marginTop: 8,\n                  padding: '12px',\n                  border: '1px solid #d9d9d9',\n                  borderRadius: '4px',\n                  backgroundColor: colorworkState.color || '#ffffff',\n                  textAlign: 'center',\n                  color: colorworkState.color === '#ffffff' ? '#000000' : '#ffffff'\n                }}>\n                  {colorworkState.color || '#ffffff'}\n                </div>\n                <Text type=\"secondary\" style={{ fontSize: '12px', marginTop: 4, display: 'block' }}>\n                  Change the color in the \"Solid Color Selection\" section above\n                </Text>\n              </div>\n            )}\n\n            <Divider />\n\n            <div>\n              <Text strong>Test Pattern</Text>\n              <Select\n                placeholder=\"Select a saved pattern to test\"\n                value={swatchSettings.testPattern}\n                onChange={(value) => setSwatchSettings(prev => ({\n                  ...prev,\n                  testPattern: value\n                }))}\n                style={{ width: '100%', marginTop: 8 }}\n                allowClear\n              >\n                {Object.values(colorworkState.savedPatterns || {}).map(pattern => (\n                  <Option key={pattern.id} value={pattern.id}>\n                    {pattern.name} ({COLORWORK_TYPES[pattern.type]?.name})\n                  </Option>\n                ))}\n              </Select>\n              <Text type=\"secondary\" style={{ fontSize: '12px', marginTop: 4, display: 'block' }}>\n                Leave empty for solid color swatch\n              </Text>\n            </div>\n          </Space>\n        </Card>\n      </Col>\n\n      <Col xs={24} lg={12}>\n        <Card title=\"Swatch Preview\" size=\"small\">\n          <div style={{ \n            display: 'flex', \n            justifyContent: 'center', \n            alignItems: 'center',\n            minHeight: '400px',\n            padding: '16px'\n          }}>\n            <KnitSwatch\n              gauge={{\n                stitches: gauge?.stitches || (gauge?.stitchesPerInch ? gauge.stitchesPerInch * 4 : 19),\n                rows: gauge?.rows || (gauge?.rowsPerInch ? gauge.rowsPerInch * 4 : 30)\n              }}\n              colors={colorworkState.type === 'solid' ? \n                [colorworkState.color || '#ffffff'] : \n                testColors\n              }\n              pattern={swatchSettings.testPattern ? \n                (colorworkState.savedPatterns || {})[swatchSettings.testPattern]?.pattern || [] : \n                []\n              }\n              size={swatchSettings.size}\n              stitchSize={swatchSettings.stitchSize}\n              onClick={(row, stitch) => {\n                console.log(`Clicked stitch at row ${row}, position ${stitch}`);\n                message.info(`Clicked stitch at row ${row + 1}, position ${stitch + 1}`);\n              }}\n            />\n          </div>\n          \n          <Alert\n            message=\"Interactive Swatch\"\n            description=\"This swatch shows how your colorwork pattern will look when knitted. The gauge is automatically taken from your gauge settings. Click on individual stitches to see their position.\"\n            type=\"info\"\n            showIcon\n            style={{ marginTop: 16 }}\n          />\n        </Card>\n      </Col>\n    </Row>\n  );\n\n  return (\n    <div className=\"colorwork-step\">\n      <div className=\"step-header\">\n        <Title level={3}>Colorwork Design</Title>\n        <Paragraph>\n          Create sophisticated colorwork patterns with our comprehensive design system. \n          Choose from solid colors, stripes, stranded colorwork, or complex intarsia patterns.\n        </Paragraph>\n        \n        {/* Colorwork Type Selection */}\n        <Card title=\"Colorwork Type\" size=\"small\" style={{ marginBottom: 24 }}>\n          <Row gutter={[16, 16]}>\n            {Object.entries(COLORWORK_TYPES).map(([type, info]) => (\n              <Col xs={12} sm={8} md={6} key={type}>\n                <Card \n                  size=\"small\" \n                  hoverable\n                  style={{ \n                    border: colorworkState.type === type ? '2px solid #1890ff' : '1px solid #d9d9d9',\n                    cursor: 'pointer'\n                  }}\n                  onClick={() => handleColorworkTypeChange(type)}\n                >\n                  <div style={{ textAlign: 'center' }}>\n                    <div style={{ \n                      fontSize: '24px', \n                      marginBottom: 8,\n                      fontFamily: 'monospace' \n                    }}>\n                      {info.icon}\n                    </div>\n                    <Text strong>{info.name}</Text>\n                    <br />\n                    <Text type=\"secondary\" style={{ fontSize: '12px' }}>\n                      {info.description}\n                    </Text>\n                    <br />\n                    <Tag \n                      color={info.complexity === 'Beginner' ? 'green' : \n                            info.complexity === 'Intermediate' ? 'orange' : 'red'}\n                      style={{ marginTop: 4 }}\n                    >\n                      {info.complexity}\n                    </Tag>\n                  </div>\n                </Card>\n              </Col>\n            ))}\n          </Row>\n        </Card>\n\n        {/* Solid Color Picker for Solid Type */}\n        {colorworkState.type === 'solid' && (\n          <Card title=\"Solid Color Selection\" size=\"small\" style={{ marginBottom: 24 }}>\n            <Row align=\"middle\" gutter={16}>\n              <Col>\n                <input\n                  type=\"color\"\n                  value={colorworkState.color || '#ffffff'}\n                  onChange={(e) => handleColorChange(e.target.value)}\n                  style={{\n                    width: 50,\n                    height: 50,\n                    border: 'none',\n                    borderRadius: 4,\n                    cursor: 'pointer'\n                  }}\n                />\n              </Col>\n              <Col>\n                <Text strong>Selected Color: {colorworkState.color || '#ffffff'}</Text>\n                <br />\n                <Text type=\"secondary\">This color will be applied to the entire panel</Text>\n              </Col>\n            </Row>\n          </Card>\n        )}\n\n        {/* Swatch Tester - Always Visible */}\n        <Card title=\"Swatch Tester\" style={{ marginBottom: 24 }}>\n          {renderSwatchTester()}\n        </Card>\n      </div>\n\n      {/* Show pattern tools only for complex colorwork types */}\n      {colorworkState.type && colorworkState.type !== 'solid' && (\n        <Tabs activeKey={activeTab} onChange={setActiveTab} size=\"large\">\n          <TabPane tab=\"Basic Patterns\" key=\"basic\">\n            {renderBasicPatterns()}\n          </TabPane>\n          <TabPane tab=\"Complex Patterns\" key=\"complex\">\n            {renderComplexPatterns()}\n          </TabPane>\n          <TabPane tab=\"Garment Sequence\" key=\"garment\">\n            {renderGarmentSequence()}\n          </TabPane>\n        </Tabs>\n      )}\n      \n      <div className=\"step-actions\" style={{ marginTop: 32 }}>\n        <Space>\n          <Button size=\"large\" onClick={onPrev}>\n            Previous: Gauge\n          </Button>\n          <Button size=\"large\" type=\"primary\" onClick={handleNext}>\n            Next: Preview\n          </Button>\n        </Space>\n      </div>\n    </div>\n  );\n};\n\nexport default ColorworkStep;","import React, { useState, useEffect } from 'react';\nimport { Card, Row, Col, Switch, Button, Space, Typography, Select, Slider, Radio, Divider, Tag, message, Dropdown, Menu } from 'antd';\nimport { \n  EyeOutlined, \n  DownloadOutlined, \n  SettingOutlined, \n  ZoomInOutlined, \n  ZoomOutOutlined,\n  RotateLeftOutlined,\n  RotateRightOutlined,\n  FullscreenOutlined,\n  FileImageOutlined,\n  FileTextOutlined\n} from '@ant-design/icons';\n\n\nconst { Title, Text } = Typography;\nconst { Option } = Select;\n\nconst PREVIEW_MODES = {\n  flat: 'Flat Pattern',\n  '3d': '3D Model', \n  technical: 'Technical Drawing',\n  schematic: 'Schematic'\n};\n\nconst VISUALIZATION_OPTIONS = {\n  realistic: 'Realistic Texture',\n  symbolic: 'Symbolic Stitches',\n  wireframe: 'Wireframe',\n  colorwork: 'Colorwork Only'\n};\n\nconst PreviewStep = ({ data, onUpdate, onNext, onPrev }) => {\n  const [previewSettings, setPreviewSettings] = useState({\n    mode: 'flat',\n    visualization: 'realistic',\n    showGrid: true,\n    showMeasurements: true,\n    showStitchCount: false,\n    zoom: 100,\n    rotation: { x: 0, y: 0, z: 0 },\n    lighting: 'natural',\n    backgroundColor: '#f0f0f0'\n  });\n\n  const [patternStats, setPatternStats] = useState({});\n\n  useEffect(() => {\n    calculatePatternStats();\n  }, [data]);\n\n  const calculatePatternStats = () => {\n    const { gauge, sizing, colorwork } = data;\n    \n    if (!gauge || !sizing) return;\n\n    const dimensions = sizing.method === 'percentage' \n      ? { \n          chest: 40 * (sizing.scale / 100), \n          length: 24 * (sizing.scale / 100),\n          armLength: 25 * (sizing.scale / 100)\n        }\n      : sizing.customDimensions;\n\n    const totalStitches = Math.round(dimensions.chest * gauge.stitches);\n    const totalRows = Math.round(dimensions.length * gauge.rows);\n    const estimatedTime = Math.round((totalStitches * totalRows) / 1000); // rough estimate\n\n    setPatternStats({\n      totalStitches: totalStitches * totalRows,\n      bodyStitches: totalStitches,\n      bodyRows: totalRows,\n      colors: colorwork.enabled ? colorwork.colors.length : 1,\n      estimatedTime,\n      difficulty: calculateDifficulty()\n    });\n  };\n\n  const calculateDifficulty = () => {\n    let difficulty = 1; // Base difficulty\n    \n    if (data.colorwork?.enabled) {\n      difficulty += data.colorwork.colors.length > 2 ? 2 : 1;\n      if (data.colorwork.type === 'intarsia') difficulty += 2;\n      if (data.colorwork.type === 'fairisle') difficulty += 1;\n    }\n    \n    if (data.gauge?.stitches > 20) difficulty += 1; // Fine gauge\n    \n    const levels = ['Beginner', 'Easy', 'Intermediate', 'Advanced', 'Expert'];\n    return levels[Math.min(difficulty - 1, levels.length - 1)];\n  };\n\n  const updatePreviewSetting = (key, value) => {\n    setPreviewSettings(prev => ({ ...prev, [key]: value }));\n  };\n\n  const handleRotation = (axis, direction) => {\n    const increment = direction === 'positive' ? 15 : -15;\n    setPreviewSettings(prev => ({\n      ...prev,\n      rotation: {\n        ...prev.rotation,\n        [axis]: (prev.rotation[axis] + increment) % 360\n      }\n    }));\n  };\n\n  const resetView = () => {\n    setPreviewSettings(prev => ({\n      ...prev,\n      zoom: 100,\n      rotation: { x: 0, y: 0, z: 0 }\n    }));\n  };\n\n  const exportOptions = (\n    <Menu>\n      <Menu.Item key=\"pdf\" icon={<FileTextOutlined />}>\n        Export as PDF Pattern\n      </Menu.Item>\n      <Menu.Item key=\"image\" icon={<FileImageOutlined />}>\n        Export as Image\n      </Menu.Item>\n      <Menu.Item key=\"schematic\" icon={<FileTextOutlined />}>\n        Export Schematic\n      </Menu.Item>\n    </Menu>\n  );\n\n  const handleExport = ({ key }) => {\n    message.info(`Exporting ${key.toUpperCase()}...`);\n    // Export functionality would be implemented here\n  };\n\n  const handleSave = () => {\n    onUpdate({ preview: previewSettings });\n    message.success('Preview settings saved');\n  };\n\n  const handleNext = () => {\n    handleSave();\n    onNext();\n  };\n\n  return (\n    <div className=\"preview-step\">\n      <Row gutter={[24, 24]}>\n        <Col xs={24} lg={14}>\n          <Card title=\"Pattern Preview\" className=\"preview-card\">\n            {/* Preview Controls */}\n            <div className=\"preview-controls\" style={{ marginBottom: 16 }}>\n              <Row gutter={[16, 16]} align=\"middle\">\n                <Col span={8}>\n                  <Text>View Mode</Text>\n                  <Select\n                    value={previewSettings.mode}\n                    onChange={(mode) => updatePreviewSetting('mode', mode)}\n                    style={{ width: '100%' }}\n                  >\n                    {Object.entries(PREVIEW_MODES).map(([key, label]) => (\n                      <Option key={key} value={key}>{label}</Option>\n                    ))}\n                  </Select>\n                </Col>\n                <Col span={8}>\n                  <Text>Visualization</Text>\n                  <Select\n                    value={previewSettings.visualization}\n                    onChange={(visualization) => updatePreviewSetting('visualization', visualization)}\n                    style={{ width: '100%' }}\n                  >\n                    {Object.entries(VISUALIZATION_OPTIONS).map(([key, label]) => (\n                      <Option key={key} value={key}>{label}</Option>\n                    ))}\n                  </Select>\n                </Col>\n                <Col span={8}>\n                  <Space>\n                    <Button\n                      icon={<ZoomOutOutlined />}\n                      onClick={() => updatePreviewSetting('zoom', Math.max(25, previewSettings.zoom - 25))}\n                    />\n                    <Text style={{ minWidth: 60, textAlign: 'center' }}>\n                      {previewSettings.zoom}%\n                    </Text>\n                    <Button\n                      icon={<ZoomInOutlined />}\n                      onClick={() => updatePreviewSetting('zoom', Math.min(200, previewSettings.zoom + 25))}\n                    />\n                  </Space>\n                </Col>\n              </Row>\n            </div>\n\n            {/* Main Preview Area */}\n            <div \n              className=\"pattern-preview-area\"\n              style={{ \n                height: '400px', \n                backgroundColor: previewSettings.backgroundColor,\n                border: '1px solid #d9d9d9',\n                borderRadius: '8px',\n                position: 'relative',\n                overflow: 'hidden',\n                display: 'flex',\n                alignItems: 'center',\n                justifyContent: 'center'\n              }}\n            >\n              {/* Mock Pattern Visualization */}\n              <div style={{ \n                transform: `scale(${previewSettings.zoom / 100}) rotateX(${previewSettings.rotation.x}deg) rotateY(${previewSettings.rotation.y}deg) rotateZ(${previewSettings.rotation.z}deg)`,\n                transition: 'transform 0.3s ease'\n              }}>\n                {previewSettings.mode === 'flat' && (\n                  <div className=\"flat-pattern\" style={{ \n                    width: '300px', \n                    height: '250px', \n                    background: 'linear-gradient(45deg, #e6f7ff 25%, transparent 25%), linear-gradient(-45deg, #e6f7ff 25%, transparent 25%), linear-gradient(45deg, transparent 75%, #e6f7ff 75%), linear-gradient(-45deg, transparent 75%, #e6f7ff 75%)',\n                    backgroundSize: '20px 20px',\n                    backgroundPosition: '0 0, 0 10px, 10px -10px, -10px 0px',\n                    border: '2px solid #1890ff',\n                    borderRadius: '8px',\n                    position: 'relative'\n                  }}>\n                    {data.colorwork?.enabled && (\n                      <div style={{ \n                        position: 'absolute', \n                        top: '20%', \n                        left: '20%', \n                        right: '20%', \n                        height: '30%',\n                        background: `linear-gradient(90deg, ${data.colorwork.colors.join(', ')})`,\n                        borderRadius: '4px'\n                      }} />\n                    )}\n                    {previewSettings.showMeasurements && (\n                      <>\n                        <div style={{ position: 'absolute', top: '-20px', left: '50%', transform: 'translateX(-50%)', fontSize: '12px', color: '#666' }}>\n                          {data.sizing?.method === 'percentage' ? `${40 * (data.sizing.scale / 100)}\"` : `${data.sizing?.customDimensions?.chest}\"`}\n                        </div>\n                        <div style={{ position: 'absolute', left: '-30px', top: '50%', transform: 'translateY(-50%)', fontSize: '12px', color: '#666' }}>\n                          {data.sizing?.method === 'percentage' ? `${24 * (data.sizing.scale / 100)}\"` : `${data.sizing?.customDimensions?.length}\"`}\n                        </div>\n                      </>\n                    )}\n                  </div>\n                )}\n\n                {previewSettings.mode === '3d' && (\n                  <div className=\"3d-model\" style={{ \n                    width: '250px', \n                    height: '300px', \n                    background: 'linear-gradient(135deg, #f0f0f0, #d9d9d9)',\n                    borderRadius: '20px 20px 10px 10px',\n                    position: 'relative',\n                    border: '1px solid #bfbfbf',\n                    boxShadow: '0 10px 20px rgba(0,0,0,0.1)'\n                  }}>\n                    <div style={{ \n                      position: 'absolute', \n                      top: '10px', \n                      left: '20px', \n                      right: '20px', \n                      height: '30px',\n                      background: '#1890ff',\n                      borderRadius: '10px 10px 0 0'\n                    }} />\n                    {data.colorwork?.enabled && (\n                      <div style={{ \n                        position: 'absolute', \n                        top: '40%', \n                        left: '10%', \n                        right: '10%', \n                        height: '20%',\n                        background: `repeating-linear-gradient(90deg, ${data.colorwork.colors[0]} 0px, ${data.colorwork.colors[0]} 10px, ${data.colorwork.colors[1]} 10px, ${data.colorwork.colors[1]} 20px)`,\n                        borderRadius: '4px'\n                      }} />\n                    )}\n                  </div>\n                )}\n\n                {previewSettings.mode === 'technical' && (\n                  <div className=\"technical-drawing\" style={{ \n                    width: '350px', \n                    height: '280px', \n                    background: 'white',\n                    border: '1px solid #000',\n                    position: 'relative'\n                  }}>\n                    {/* Technical schematic with measurements */}\n                    <svg width=\"100%\" height=\"100%\" viewBox=\"0 0 350 280\">\n\n                      {previewSettings.showMeasurements && (\n                        <>\n                          <text x=\"150\" y=\"250\" textAnchor=\"middle\" fontSize=\"12\" fill=\"#1890ff\">\n                            {data.sizing?.method === 'percentage' ? `${40 * (data.sizing.scale / 100)}\"` : `${data.sizing?.customDimensions?.chest}\"`}\n                          </text>\n                          <text x=\"10\" y=\"125\" textAnchor=\"middle\" fontSize=\"12\" fill=\"#1890ff\" transform=\"rotate(125, 10)\">\n                            {data.sizing?.method === 'percentage' ? `${24 * (data.sizing.scale / 100)}\"` : `${data.sizing?.customDimensions?.length}\"`}\n                          </text>\n                        </>\n                      )}\n                    </svg>\n                  </div>\n                )}\n\n                {previewSettings.mode === 'schematic' && (\n                  <div className=\"schematic\" style={{ \n                    width: '400px', \n                    height: '300px', \n                    background: 'white',\n                    border: '1px solid #ccc',\n                    padding: '20px',\n                    fontSize: '12px',\n                    lineHeight: '18px'\n                  }}>\n                    <Title level={5} style={{ margin: '0 0 16px 0' }}>Pattern Schematic</Title>\n                    <div style={{ display: 'grid', gridTemplateColumns: '1fr 1fr', gap: '16px' }}>\n                      <div>\n                        <Text strong>Dimensions:</Text><br />\n                        Chest: {data.sizing?.method === 'percentage' ? `${40 * (data.sizing.scale / 100)}\"` : `${data.sizing?.customDimensions?.chest}\"`}<br />\n                        Length: {data.sizing?.method === 'percentage' ? `${24 * (data.sizing.scale / 100)}\"` : `${data.sizing?.customDimensions?.length}\"`}<br />\n                        <br />\n                        <Text strong>Gauge:</Text><br />\n                        {data.gauge?.stitches} sts × {data.gauge?.rows} rows<br />\n                        per inch\n                      </div>\n                      <div>\n                        <Text strong>Construction:</Text><br />\n                        Body: {patternStats.bodyStitches} sts<br />\n                        Rows: {patternStats.bodyRows}<br />\n                        <br />\n                        <Text strong>Colors:</Text><br />\n                        {data.colorwork?.enabled ? data.colorwork.colors.length : 1} color(s)\n                      </div>\n                    </div>\n                  </div>\n                )}\n              </div>\n\n              {/* Grid Overlay */}\n              {previewSettings.showGrid && (\n                <div style={{ \n                  position: 'absolute', \n                  top: 0, \n                  left: 0, \n                  right: 0, \n                  bottom: 0,\n                  backgroundImage: 'linear-gradient(rgba(0,0,0,.1) 1px, transparent 1px), linear-gradient(90deg, rgba(0,0,0,.1) 1px, transparent 1px)',\n                  backgroundSize: '20px 20px',\n                  pointerEvents: 'none'\n                }} />\n              )}\n            </div>\n\n            {/* View Controls */}\n            <div className=\"view-controls\" style={{ marginTop: 16 }}>\n              <Row gutter={16}>\n                <Col span={12}>\n                  <Space>\n                    <Text>Options:</Text>\n                    <Switch\n                      checkedChildren=\"Grid\"\n                      unCheckedChildren=\"Grid\"\n                      checked={previewSettings.showGrid}\n                      onChange={(showGrid) => updatePreviewSetting('showGrid', showGrid)}\n                    />\n                    <Switch\n                      checkedChildren=\"Measure\"\n                      unCheckedChildren=\"Measure\"\n                      checked={previewSettings.showMeasurements}\n                      onChange={(showMeasurements) => updatePreviewSetting('showMeasurements', showMeasurements)}\n                    />\n                  </Space>\n                </Col>\n                <Col span={12}>\n                  <Space style={{ float: 'right' }}>\n                    <Button icon={<RotateLeftOutlined />} onClick={() => handleRotation('y', 'negative')} />\n                    <Button icon={<RotateRightOutlined />} onClick={() => handleRotation('y', 'positive')} />\n                    <Button onClick={resetView}>Reset</Button>\n                    <Dropdown overlay={exportOptions} trigger={['click']}>\n                      <Button type=\"primary\" icon={<DownloadOutlined />}>\n                        Export\n                      </Button>\n                    </Dropdown>\n                  </Space>\n                </Col>\n              </Row>\n            </div>\n          </Card>\n        </Col>\n\n        <Col xs={24} lg={10}>\n          <Card title=\"Pattern Statistics\" className=\"stats-card\" style={{ marginBottom: 16 }}>\n            <Space direction=\"vertical\" size=\"medium\" style={{ width: '100%' }}>\n              <Row gutter={16}>\n                <Col span={12}>\n                  <Card size=\"small\" className=\"stat-card\">\n                    <Text type=\"secondary\">Total Stitches</Text>\n                    <br />\n                    <Text strong style={{ fontSize: '18px', color: '#1890ff' }}>\n                      {patternStats.totalStitches?.toLocaleString()}\n                    </Text>\n                  </Card>\n                </Col>\n                <Col span={12}>\n                  <Card size=\"small\" className=\"stat-card\">\n                    <Text type=\"secondary\">Estimated Time</Text>\n                    <br />\n                    <Text strong style={{ fontSize: '18px', color: '#52c41a' }}>\n                      {patternStats.estimatedTime}h\n                    </Text>\n                  </Card>\n                </Col>\n              </Row>\n\n              <Row gutter={16}>\n                <Col span={12}>\n                  <Card size=\"small\" className=\"stat-card\">\n                    <Text type=\"secondary\">Body Stitches</Text>\n                    <br />\n                    <Text strong style={{ fontSize: '16px' }}>\n                      {patternStats.bodyStitches}\n                    </Text>\n                  </Card>\n                </Col>\n                <Col span={12}>\n                  <Card size=\"small\" className=\"stat-card\">\n                    <Text type=\"secondary\">Body Rows</Text>\n                    <br />\n                    <Text strong style={{ fontSize: '16px' }}>\n                      {patternStats.bodyRows}\n                    </Text>\n                  </Card>\n                </Col>\n              </Row>\n\n              <div>\n                <Text type=\"secondary\">Difficulty Level</Text>\n                <br />\n                <Tag color={\n                  patternStats.difficulty === 'Beginner' ? 'green' :\n                  patternStats.difficulty === 'Easy' ? 'blue' :\n                  patternStats.difficulty === 'Intermediate' ? 'orange' :\n                  patternStats.difficulty === 'Advanced' ? 'red' : 'purple'\n                }>\n                  {patternStats.difficulty}\n                </Tag>\n              </div>\n\n              {data.colorwork?.enabled && (\n                <div>\n                  <Text type=\"secondary\">Colorwork Colors</Text>\n                  <br />\n                  <Space wrap>\n                    {data.colorwork.colors.map((color, index) => (\n                      <div \n                        key={index}\n                        style={{ \n                          width: 20, \n                          height: 20, \n                          backgroundColor: color, \n                          borderRadius: '50%',\n                          border: '1px solid #d9d9d9'\n                        }} \n                      />\n                    ))}\n                  </Space>\n                </div>\n              )}\n            </Space>\n          </Card>\n\n          <Card title=\"Pattern Summary\" className=\"summary-card\">\n            <Space direction=\"vertical\" size=\"small\" style={{ width: '100%' }}>\n              <div>\n                <Text strong>Pattern:</Text> {data.name || 'Untitled Pattern'}\n              </div>\n              <div>\n                <Text strong>Type:</Text> {data.type || 'Custom'}\n              </div>\n              <div>\n                <Text strong>Gauge:</Text> {data.gauge?.stitches} × {data.gauge?.rows} per inch\n              </div>\n              <div>\n                <Text strong>Size:</Text> {\n                  data.sizing?.method === 'percentage' \n                    ? `${data.sizing.scale}% scale`\n                    : 'Custom dimensions'\n                }\n              </div>\n              {data.colorwork?.enabled && (\n                <div>\n                  <Text strong>Colorwork:</Text> {data.colorwork.type} with {data.colorwork.colors.length} colors\n                </div>\n              )}\n            </Space>\n          </Card>\n        </Col>\n      </Row>\n\n      <div className=\"step-actions\">\n        <Space>\n          <Button \n            size=\"large\" \n            onClick={onPrev}\n          >\n            Previous: Colorwork\n          </Button>\n          <Button \n            size=\"large\" \n            type=\"primary\"\n            onClick={handleNext}\n          >\n            Start Knitting\n          </Button>\n        </Space>\n      </div>\n    </div>\n  );\n};\n\nexport default PreviewStep;\n","import React, { useState, useEffect, useRef } from 'react';\nimport { Card, Row, Col, Button, Progress, Typography, Space, Input, Select, Switch, Tag, message, Popover, Modal, List } from 'antd';\nimport { \n  PlayCircleOutlined, \n  PauseOutlined, \n  StepForwardOutlined, \n  StepBackwardOutlined,\n  FastForwardOutlined,\n  FastBackwardOutlined,\n  CheckCircleOutlined,\n  InfoCircleOutlined,\n  BookOutlined,\n  ClockCircleOutlined,\n  AimOutlined\n} from '@ant-design/icons';\n\n\nconst { Title, Text, Paragraph } = Typography;\nconst { Option } = Select;\nconst { TextArea } = Input;\n\n// Knitting stitch symbols\nconst STITCH_SYMBOLS = {\n  k: { symbol: '□', name: 'Knit', color: '#e6f7ff' },\n  p: { symbol: '●', name: 'Purl', color: '#fff2e8' },\n  yo: { symbol: '○', name: 'Yarn Over', color: '#f6ffed' },\n  k2tog: { symbol: '/', name: 'Knit 2 Together', color: '#fff1f0' },\n  ssk: { symbol: '\\\\', name: 'Slip Slip Knit', color: '#fff1f0' },\n  sl: { symbol: '|', name: 'Slip Stitch', color: '#f9f0ff' }\n};\n\n// Row instructions generator\nconst generateRowInstructions = (rowNumber, patternData) => {\n  const { gauge, sizing, colorwork } = patternData;\n  const stitchCount = Math.round((sizing.customDimensions?.chest || 40) * gauge.stitches);\n  \n  if (colorwork?.enabled && colorwork.type === 'fairisle') {\n    return {\n      instruction: `Row ${rowNumber}: *K2 MC, K2 CC, repeat from * to end (${stitchCount} sts)`,\n      stitches: Array.from({ length: stitchCount }, (_, i) => \n        i % 4 < 2 ? { type: 'k', color: colorwork.colors[0] } : { type: 'k', color: colorwork.colors[1] }\n      ),\n      notes: 'Carry yarn loosely across back'\n    };\n  }\n  \n  // Basic stockinette pattern\n  const isKnitRow = rowNumber % 2 === 1;\n  return {\n    instruction: `Row ${rowNumber}: ${isKnitRow ? 'Knit' : 'Purl'} all stitches (${stitchCount} sts)`,\n    stitches: Array.from({ length: stitchCount }, () => ({ \n      type: isKnitRow ? 'k' : 'p', \n      color: colorwork?.colors?.[0] || '#ffffff' \n    })),\n    notes: isKnitRow ? 'Right side row' : 'Wrong side row'\n  };\n};\n\nconst InteractiveKnitting = ({ data, onUpdate, onPrev }) => {\n  const [currentRow, setCurrentRow] = useState(1);\n  const [currentStitch, setCurrentStitch] = useState(0);\n  const [isPlaying, setIsPlaying] = useState(false);\n  const [playbackSpeed, setPlaybackSpeed] = useState(1000); // ms per stitch\n  const [showChart, setShowChart] = useState(true);\n  const [showInstructions, setShowInstructions] = useState(true);\n  const [completedStitches, setCompletedStitches] = useState(new Set());\n  const [sessionNotes, setSessionNotes] = useState('');\n  const [startTime, setStartTime] = useState(null);\n  const [elapsedTime, setElapsedTime] = useState(0);\n  const [knittingLog, setKnittingLog] = useState([]);\n  \n  const intervalRef = useRef();\n  const timerRef = useRef();\n\n  const totalRows = Math.round((data.sizing?.customDimensions?.length || 24) * data.gauge?.rows);\n  const rowInstructions = generateRowInstructions(currentRow, data);\n  const totalStitches = rowInstructions.stitches.length;\n  const progressPercent = ((currentRow - 1) * 100) / totalRows;\n\n  useEffect(() => {\n    if (isPlaying) {\n      intervalRef.current = setInterval(advanceStitch, playbackSpeed);\n      if (!startTime) setStartTime(Date.now());\n    } else {\n      clearInterval(intervalRef.current);\n    }\n\n    return () => clearInterval(intervalRef.current);\n  }, [isPlaying, playbackSpeed, currentStitch]);\n\n  useEffect(() => {\n    if (startTime) {\n      timerRef.current = setInterval(() => {\n        setElapsedTime(Math.floor((Date.now() - startTime) / 1000));\n      }, 1000);\n    }\n    return () => clearInterval(timerRef.current);\n  }, [startTime]);\n\n  const advanceStitch = () => {\n    setCurrentStitch(prev => {\n      const newStitch = prev + 1;\n      setCompletedStitches(prevCompleted => new Set([...prevCompleted, prev]));\n      \n      if (newStitch >= totalStitches) {\n        completeRow();\n        return 0;\n      }\n      return newStitch;\n    });\n  };\n\n  const completeRow = () => {\n    const logEntry = {\n      row: currentRow,\n      completedAt: new Date().toLocaleTimeString(),\n      notes: sessionNotes\n    };\n    \n    setKnittingLog(prev => [...prev, logEntry]);\n    setCurrentRow(prev => prev + 1);\n    setCompletedStitches(new Set());\n    setSessionNotes('');\n    \n    message.success(`Row ${currentRow} completed!`);\n    \n    if (currentRow >= totalRows) {\n      setIsPlaying(false);\n      message.success('Congratulations! Pattern completed!');\n    }\n  };\n\n  const goToRow = (rowNumber) => {\n    setCurrentRow(Math.max(1, Math.min(rowNumber, totalRows)));\n    setCurrentStitch(0);\n    setCompletedStitches(new Set());\n    setIsPlaying(false);\n  };\n\n  const goToStitch = (stitchNumber) => {\n    setCurrentStitch(Math.max(0, Math.min(stitchNumber, totalStitches - 1)));\n    setIsPlaying(false);\n  };\n\n  const handleKeyPress = (e) => {\n    switch (e.key) {\n      case ' ':\n        e.preventDefault();\n        setIsPlaying(!isPlaying);\n        break;\n      case 'ArrowRight':\n        advanceStitch();\n        break;\n      case 'ArrowLeft':\n        setCurrentStitch(Math.max(0, currentStitch - 1));\n        break;\n      case 'ArrowUp':\n        goToRow(currentRow - 1);\n        break;\n      case 'ArrowDown':\n        goToRow(currentRow + 1);\n        break;\n    }\n  };\n\n  const formatTime = (seconds) => {\n    const hours = Math.floor(seconds / 3600);\n    const minutes = Math.floor((seconds % 3600) / 60);\n    const secs = seconds % 60;\n    \n    if (hours > 0) {\n      return `${hours}:${minutes.toString().padStart(2, '0')}:${secs.toString().padStart(2, '0')}`;\n    }\n    return `${minutes}:${secs.toString().padStart(2, '0')}`;\n  };\n\n  return (\n    <div className=\"interactive-knitting\" onKeyDown={handleKeyPress} tabIndex={0}>\n      <Row gutter={[24, 24]}>\n        {/* Left Panel - Controls and Progress */}\n        <Col xs={24} lg={8}>\n          <Card title=\"Knitting Progress\" className=\"progress-card\" style={{ marginBottom: 16 }}>\n            <Space direction=\"vertical\" size=\"medium\" style={{ width: '100%' }}>\n              <div>\n                <Text type=\"secondary\">Overall Progress</Text>\n                <Progress \n                  percent={progressPercent} \n                  status={currentRow >= totalRows ? 'success' : 'active'}\n                  strokeColor={{\n                    '0%': '#108ee9',\n                    '100%': '#87d068',\n                  }}\n                />\n                <Text strong>Row {currentRow} of {totalRows}</Text>\n              </div>\n\n              <div>\n                <Text type=\"secondary\">Current Row Progress</Text>\n                <Progress \n                  percent={(currentStitch * 100) / totalStitches} \n                  size=\"small\"\n                  showInfo={false}\n                />\n                <Text>Stitch {currentStitch + 1} of {totalStitches}</Text>\n              </div>\n\n              <div>\n                <Row gutter={16}>\n                  <Col span={12}>\n                    <Card size=\"small\" className=\"stat-card\">\n                      <ClockCircleOutlined style={{ color: '#1890ff' }} />\n                      <br />\n                      <Text type=\"secondary\">Time</Text>\n                      <br />\n                      <Text strong>{formatTime(elapsedTime)}</Text>\n                    </Card>\n                  </Col>\n                  <Col span={12}>\n                    <Card size=\"small\" className=\"stat-card\">\n                      <AimOutlined style={{ color: '#52c41a' }} />\n                      <br />\n                      <Text type=\"secondary\">Completed</Text>\n                      <br />\n                      <Text strong>{currentRow - 1} rows</Text>\n                    </Card>\n                  </Col>\n                </Row>\n              </div>\n            </Space>\n          </Card>\n\n          <Card title=\"Playback Controls\" className=\"controls-card\" style={{ marginBottom: 16 }}>\n            <Space direction=\"vertical\" size=\"medium\" style={{ width: '100%' }}>\n              <Row gutter={8}>\n                <Col span={6}>\n                  <Button\n                    icon={<FastBackwardOutlined />}\n                    onClick={() => goToRow(currentRow - 1)}\n                    disabled={currentRow <= 1}\n                    block\n                  />\n                </Col>\n                <Col span={6}>\n                  <Button\n                    icon={<StepBackwardOutlined />}\n                    onClick={() => setCurrentStitch(Math.max(0, currentStitch - 1))}\n                    disabled={currentStitch <= 0}\n                    block\n                  />\n                </Col>\n                <Col span={6}>\n                  <Button\n                    type=\"primary\"\n                    icon={isPlaying ? <PauseOutlined /> : <PlayCircleOutlined />}\n                    onClick={() => setIsPlaying(!isPlaying)}\n                    block\n                  />\n                </Col>\n                <Col span={6}>\n                  <Button\n                    icon={<StepForwardOutlined />}\n                    onClick={advanceStitch}\n                    disabled={currentStitch >= totalStitches}\n                    block\n                  />\n                </Col>\n              </Row>\n\n              <div>\n                <Text>Playback Speed</Text>\n                <Select\n                  value={playbackSpeed}\n                  onChange={setPlaybackSpeed}\n                  style={{ width: '100%' }}\n                >\n                  <Option value={2000}>Very Slow (2s)</Option>\n                  <Option value={1000}>Slow (1s)</Option>\n                  <Option value={500}>Normal (0.5s)</Option>\n                  <Option value={250}>Fast (0.25s)</Option>\n                  <Option value={100}>Very Fast (0.1s)</Option>\n                </Select>\n              </div>\n\n              <div>\n                <Text>Jump to Row</Text>\n                <Input\n                  type=\"number\"\n                  min={1}\n                  max={totalRows}\n                  value={currentRow}\n                  onChange={(e) => goToRow(parseInt(e.target.value) || 1)}\n                  style={{ width: '100%' }}\n                />\n              </div>\n            </Space>\n          </Card>\n\n          <Card title=\"Session Notes\" className=\"notes-card\">\n            <TextArea\n              value={sessionNotes}\n              onChange={(e) => setSessionNotes(e.target.value)}\n              placeholder=\"Add notes about this row...\"\n              rows={3}\n            />\n            <Text type=\"secondary\" style={{ fontSize: '12px' }}>\n              Notes will be saved when row is completed\n            </Text>\n          </Card>\n        </Col>\n\n        {/* Right Panel - Pattern View */}\n        <Col xs={24} lg={16}>\n          <Card \n            title={\n              <Space>\n                <Text>Row {currentRow} Instructions</Text>\n                <Switch \n                  checkedChildren=\"Chart\" \n                  unCheckedChildren=\"Text\"\n                  checked={showChart}\n                  onChange={setShowChart}\n                />\n              </Space>\n            }\n            className=\"pattern-view-card\"\n          >\n            {showInstructions && (\n              <div className=\"row-instructions\" style={{ marginBottom: 16, padding: 16, background: '#f5f5f5', borderRadius: 8 }}>\n                <Text strong style={{ fontSize: '16px' }}>\n                  {rowInstructions.instruction}\n                </Text>\n                {rowInstructions.notes && (\n                  <div style={{ marginTop: 8 }}>\n                    <InfoCircleOutlined style={{ color: '#1890ff', marginRight: 8 }} />\n                    <Text type=\"secondary\">{rowInstructions.notes}</Text>\n                  </div>\n                )}\n              </div>\n            )}\n\n            {showChart ? (\n              <div className=\"stitch-chart\" style={{ \n                display: 'grid', \n                gridTemplateColumns: `repeat(${Math.min(totalStitches, 40)}, 1fr)`,\n                gap: '2px',\n                padding: '16px',\n                background: 'white',\n                borderRadius: '8px',\n                border: '1px solid #e8e8e8',\n                maxHeight: '400px',\n                overflowY: 'auto'\n              }}>\n                {rowInstructions.stitches.slice(0, Math.min(totalStitches, 40)).map((stitch, index) => {\n                  const isCompleted = completedStitches.has(index);\n                  const isCurrent = index === currentStitch;\n                  const stitchInfo = STITCH_SYMBOLS[stitch.type] || STITCH_SYMBOLS.k;\n                  \n                  return (\n                    <Popover\n                      key={index}\n                      content={\n                        <div>\n                          <Text strong>{stitchInfo.name}</Text>\n                          <br />\n                          <Text type=\"secondary\">Stitch {index + 1}</Text>\n                          {stitch.color !== '#ffffff' && (\n                            <>\n                              <br />\n                              <div style={{ \n                                width: 16, \n                                height: 16, \n                                backgroundColor: stitch.color, \n                                border: '1px solid #ccc',\n                                display: 'inline-block',\n                                marginTop: 4\n                              }} />\n                            </>\n                          )}\n                        </div>\n                      }\n                      trigger=\"hover\"\n                    >\n                      <div\n                        className={`stitch-cell ${isCompleted ? 'completed' : ''} ${isCurrent ? 'current' : ''}`}\n                        onClick={() => goToStitch(index)}\n                        style={{\n                          width: '24px',\n                          height: '24px',\n                          backgroundColor: isCompleted ? '#52c41a' : isCurrent ? '#1890ff' : stitchInfo.color,\n                          border: `2px solid ${isCurrent ? '#1890ff' : isCompleted ? '#52c41a' : '#d9d9d9'}`,\n                          borderRadius: '4px',\n                          display: 'flex',\n                          alignItems: 'center',\n                          justifyContent: 'center',\n                          cursor: 'pointer',\n                          fontSize: '14px',\n                          fontWeight: 'bold',\n                          color: isCompleted || isCurrent ? 'white' : '#333',\n                          transition: 'all 0.2s ease'\n                        }}\n                      >\n                        {isCompleted ? '✓' : isCurrent ? '●' : stitchInfo.symbol}\n                      </div>\n                    </Popover>\n                  );\n                })}\n                {totalStitches > 40 && (\n                  <div style={{ \n                    gridColumn: '1 / -1', \n                    textAlign: 'center', \n                    padding: '8px',\n                    color: '#666',\n                    fontSize: '12px'\n                  }}>\n                    Showing first 40 of {totalStitches} stitches\n                  </div>\n                )}\n              </div>\n            ) : (\n              <div className=\"written-instructions\" style={{ \n                fontSize: '16px', \n                lineHeight: '28px',\n                padding: '24px',\n                background: 'white',\n                borderRadius: '8px',\n                border: '1px solid #e8e8e8'\n              }}>\n                <Paragraph>\n                  {rowInstructions.instruction}\n                </Paragraph>\n                {data.colorwork?.enabled && (\n                  <div style={{ marginTop: 16 }}>\n                    <Text strong>Color Key:</Text>\n                    <div style={{ marginTop: 8 }}>\n                      {data.colorwork.colors.map((color, index) => (\n                        <Space key={index} style={{ marginRight: 16 }}>\n                          <div style={{ \n                            width: 16, \n                            height: 16, \n                            backgroundColor: color, \n                            border: '1px solid #ccc',\n                            borderRadius: '2px'\n                          }} />\n                          <Text>Color {index + 1}</Text>\n                        </Space>\n                      ))}\n                    </div>\n                  </div>\n                )}\n              </div>\n            )}\n\n            {/* Keyboard shortcuts help */}\n            <div style={{ marginTop: 16, padding: 12, background: '#fafafa', borderRadius: 6 }}>\n              <Text type=\"secondary\" style={{ fontSize: '12px' }}>\n                <BookOutlined /> Keyboard: Space (play/pause), ← → (stitch), ↑ ↓ (row)\n              </Text>\n            </div>\n          </Card>\n\n          {knittingLog.length > 0 && (\n            <Card title=\"Knitting Log\" style={{ marginTop: 16 }}>\n              <List\n                size=\"small\"\n                dataSource={knittingLog.slice(-5)}\n                renderItem={item => (\n                  <List.Item>\n                    <Space>\n                      <CheckCircleOutlined style={{ color: '#52c41a' }} />\n                      <Text strong>Row {item.row}</Text>\n                      <Text type=\"secondary\">{item.completedAt}</Text>\n                      {item.notes && <Text type=\"secondary\">- {item.notes}</Text>}\n                    </Space>\n                  </List.Item>\n                )}\n              />\n            </Card>\n          )}\n        </Col>\n      </Row>\n\n      <div className=\"step-actions\" style={{ marginTop: 24 }}>\n        <Space>\n          <Button \n            size=\"large\" \n            onClick={onPrev}\n          >\n            Back to Preview\n          </Button>\n          {currentRow >= totalRows && (\n            <Button \n              size=\"large\"\n              style={{\n                background: 'linear-gradient(90deg, #52c41a, #73d13d)',\n                borderColor: 'transparent',\n                color: 'white',\n                fontWeight: 'bold'\n              }}\n              onMouseEnter={(e) => {\n                e.target.style.transform = 'translateY(-1px)';\n                e.target.style.boxShadow = '0 4px 8px rgba(0,0,0,0.15)';\n              }}\n              onMouseLeave={(e) => {\n                e.target.style.transform = 'translateY(0)';\n                e.target.style.boxShadow = '0 2px 4px rgba(0,0,0,0.1)';\n              }}\n            >\n              Pattern Complete! 🎉\n            </Button>\n          )}\n        </Space>\n      </div>\n    </div>\n  );\n};\n\nexport default InteractiveKnitting;\n","// stepColors.js\n// ROYGBIV color scheme for knitting design steps\n\nexport const STEP_COLORS = {\n  0: { name: 'Red', primary: '#ff4d4f', secondary: '#ff7875' },      // Pattern Setup\n  1: { name: 'Orange', primary: '#fa8c16', secondary: '#ffa940' },   // Pattern Editor\n  2: { name: 'Yellow', primary: '#fadb14', secondary: '#ffec3d' },   // Sizing\n  3: { name: 'Green', primary: '#52c41a', secondary: '#73d13d' },    // Gauge\n  4: { name: 'Blue', primary: '#1890ff', secondary: '#40a9ff' },     // Colorwork\n  5: { name: 'Indigo', primary: '#722ed1', secondary: '#9254de' },   // Preview\n  6: { name: 'Violet', primary: '#eb2f96', secondary: '#f759ab' }    // Interactive Knitting\n};\n\n// Get the color for a specific step\nexport const getStepColor = (stepIndex) => {\n  return STEP_COLORS[stepIndex] || STEP_COLORS[0];\n};\n\n// Helper function to lighten a hex color\nconst lightenColor = (hex, percent) => {\n  const num = parseInt(hex.replace('#', ''), 16);\n  const amt = Math.round(2.55 * percent);\n  const R = (num >> 16) + amt;\n  const G = (num >> 8 & 0x00FF) + amt;\n  const B = (num & 0x0000FF) + amt;\n  return '#' + (0x1000000 + (R < 255 ? R < 1 ? 0 : R : 255) * 0x10000 +\n    (G < 255 ? G < 1 ? 0 : G : 255) * 0x100 +\n    (B < 255 ? B < 1 ? 0 : B : 255)).toString(16).slice(1);\n};\n\n// Helper function to darken a hex color\nconst darkenColor = (hex, percent) => {\n  const num = parseInt(hex.replace('#', ''), 16);\n  const amt = Math.round(2.55 * percent);\n  const R = (num >> 16) - amt;\n  const G = (num >> 8 & 0x00FF) - amt;\n  const B = (num & 0x0000FF) - amt;\n  return '#' + (0x1000000 + (R > 255 ? 255 : R < 0 ? 0 : R) * 0x10000 +\n    (G > 255 ? 255 : G < 0 ? 0 : G) * 0x100 +\n    (B > 255 ? 255 : B < 0 ? 0 : B) * 0x100).toString(16).slice(1);\n};\n\n// Create a gradient using lighter and darker shades of the target step's color\nexport const createStepGradient = (fromStep, toStep) => {\n  const targetColor = getStepColor(toStep);\n  const lightShade = lightenColor(targetColor.primary, 15);\n  const darkShade = darkenColor(targetColor.primary, 15);\n  \n  return `linear-gradient(135deg, ${lightShade}, ${targetColor.primary}, ${darkShade})`;\n};\n\n// Generate CSS for gradient button\nexport const getGradientButtonStyle = (fromStep, toStep, disabled = false) => {\n  if (disabled) {\n    return {\n      background: '#f5f5f5',\n      borderColor: '#d9d9d9',\n      color: '#00000040'\n    };\n  }\n  \n  const gradient = createStepGradient(fromStep, toStep);\n  \n  return {\n    background: gradient,\n    borderColor: 'transparent',\n    color: 'white',\n    fontWeight: 'bold',\n    transition: 'all 0.3s ease',\n    boxShadow: '0 2px 4px rgba(0,0,0,0.1)'\n  };\n};\n\n// Generate hover effects for gradient buttons\nexport const getGradientButtonHoverStyle = (fromStep, toStep) => {\n  const fromColor = getStepColor(fromStep);\n  const toColor = getStepColor(toStep);\n  \n  return {\n    transform: 'translateY(-1px)',\n    boxShadow: '0 4px 8px rgba(0,0,0,0.15)',\n    filter: 'brightness(1.1)'\n  };\n};\n","import React, { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { Steps, Layout, Card, Row, Col, Button, message, Space, Upload } from 'antd';\nimport { SaveOutlined, DownloadOutlined, UploadOutlined, DeleteOutlined } from '@ant-design/icons';\nimport PatternSetup from './components/PatternSetup';\nimport CustomShapeStep from './components/CustomShapeStep';\nimport SizingStep from './components/SizingStep';\nimport GaugeStep from './components/GaugeStep';\nimport ColorworkStep from './components/ColorworkStep';\nimport PreviewStep from './components/PreviewStep';\nimport InteractiveKnitting from './components/InteractiveKnitting';\nimport { getStepColor } from './utils/stepColors';\nimport {\n  selectCurrentStepInfo,\n  selectPatternData,\n  selectIsKnittingMode,\n  selectIsDirty,\n  selectSessionId,\n  selectLastSaved,\n  nextStep,\n  previousStep,\n  jumpToStep,\n  setKnittingMode,\n  updatePatternData,\n  loadSession,\n  saveSession,\n  resetSession\n} from '../../store/knittingDesignSlice';\nimport './styles/KnittingDesignApp.css';\n\nconst { Content } = Layout;\n\nconst KnittingDesignApp = ({ view = 'designer' }) => {\n  const dispatch = useDispatch();\n  \n  // Redux selectors\n  const stepInfo = useSelector(selectCurrentStepInfo);\n  const patternData = useSelector(selectPatternData);\n  const isKnittingMode = useSelector(selectIsKnittingMode);\n  const isDirty = useSelector(selectIsDirty);\n  const sessionId = useSelector(selectSessionId);\n  const lastSaved = useSelector(selectLastSaved);\n  \n  const { currentStep, steps, canGoNext, canGoPrevious } = stepInfo;\n\n  // Load session on mount - simplified for debugging\n  useEffect(() => {\n    // Generate new session ID\n    const newSessionId = `knitting-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`;\n    dispatch(updatePatternData({ section: null, data: { sessionId: newSessionId } }));\n    \n    // Set custom pattern as default\n    const customPattern = { \n      id: 'custom', \n      name: 'Create Custom Pattern', \n      description: 'Design your own pattern from scratch',\n      shapes: null\n    };\n    dispatch(updatePatternData({ section: null, data: { basePattern: customPattern } }));\n  }, [dispatch]);\n\n  // Simplified handlers for debugging\n  const handleSave = () => {\n    message.success('Save button clicked (debug mode)');\n  };\n\n  const handleExport = () => {\n    message.success('Export button clicked (debug mode)');\n  };\n\n  const handleImport = () => {\n    message.success('Import button clicked (debug mode)');\n    return false;\n  };\n\n  const handleReset = () => {\n    dispatch(resetSession());\n    message.success('Session reset');\n  };\n\n  // Navigation handlers\n  const handleNext = () => {\n    dispatch(nextStep());\n  };\n\n  const handlePrevious = () => {\n    dispatch(previousStep());\n  };\n\n  const handleStepClick = (step) => {\n    dispatch(jumpToStep(step));\n  };\n\n  const handleJumpToStep = (step) => {\n    dispatch(jumpToStep(step));\n  };\n\n  const renderStepContent = () => {\n    const currentStepKey = steps[currentStep]?.key;\n    \n    // Add safety checks for patternData\n    if (!patternData) {\n      return (\n        <Card>\n          <h2>Loading...</h2>\n          <p>Initializing pattern data...</p>\n        </Card>\n      );\n    }\n    \n    if (currentStepKey === 'setup') {\n      return (\n        <PatternSetup\n          data={patternData}\n          onChange={(data) => dispatch(updatePatternData({ section: null, data }))}\n          onNext={handleNext}\n          onJumpToStep={handleJumpToStep}\n        />\n      );\n    }\n    \n    if (currentStepKey === 'custom') {\n      return (\n        <CustomShapeStep\n          data={patternData}\n          onChange={(data) => dispatch(updatePatternData({ section: null, data }))}\n          onNext={handleNext}\n          onBack={handlePrevious}\n        />\n      );\n    }\n    \n    if (currentStepKey === 'sizing') {\n      // Transform Redux state to match SizingStep expectations\n      // Ensure customDimensions always exists\n      const defaultCustomDimensions = {\n        chest: 40,\n        length: 60,\n        armLength: 25\n      };\n      \n      const sizingData = {\n        method: patternData.sizing?.method || 'percentage',\n        scale: patternData.sizing?.percentage || 100,\n        customDimensions: {\n          chest: patternData.sizing?.width || defaultCustomDimensions.chest,\n          length: patternData.sizing?.height || defaultCustomDimensions.length,\n          armLength: patternData.sizing?.armLength || defaultCustomDimensions.armLength\n        }\n      };\n\n      // Create a modified pattern data that includes custom shapes or base pattern shapes\n      const modifiedPatternData = {\n        ...patternData,\n        basePattern: {\n          ...patternData.basePattern,\n          shapes: patternData.customShapes && Object.keys(patternData.customShapes).length > 0 \n            ? patternData.customShapes \n            : patternData.basePattern?.shapes\n        }\n      };\n      \n      return (\n        <SizingStep\n          data={sizingData}\n          patternData={modifiedPatternData}\n          onChange={(data) => {\n            // Transform back to Redux state format\n            const reduxData = {\n              method: data.method || 'percentage',\n              percentage: data.scale || 100,\n              width: data.customDimensions?.chest || 40,\n              height: data.customDimensions?.length || 60,\n              armLength: data.customDimensions?.armLength || 25\n            };\n            dispatch(updatePatternData({ section: 'sizing', data: reduxData }));\n          }}\n          onNext={handleNext}\n          onPrevious={handlePrevious}\n        />\n      );\n    }\n    \n    if (currentStepKey === 'gauge') {\n      return (\n        <GaugeStep\n          data={patternData}\n          onUpdate={(data) => dispatch(updatePatternData({ section: 'gauge', data }))}\n          onNext={handleNext}\n          onPrev={handlePrevious}\n        />\n      );\n    }\n    \n    if (currentStepKey === 'colorwork') {\n      return (\n        <ColorworkStep\n          data={patternData.colorwork || { enabled: false, layers: [], type: 'stranded' }}\n          onUpdate={(data) => dispatch(updatePatternData({ section: 'colorwork', data }))}\n          onNext={handleNext}\n          onPrevious={handlePrevious}\n        />\n      );\n    }\n    \n    if (currentStepKey === 'preview') {\n      return (\n        <PreviewStep\n          data={patternData}\n          onUpdate={(data) => dispatch(updatePatternData({ section: 'preview', data }))}\n          onNext={handleNext}\n          onPrev={handlePrevious}\n          onStartKnitting={() => {\n            message.success('Starting interactive knitting mode (debug)');\n            handleNext();\n          }}\n        />\n      );\n    }\n    \n    if (currentStepKey === 'knitting') {\n      return (\n        <InteractiveKnitting\n          data={patternData}\n          onUpdate={(data) => dispatch(updatePatternData({ section: null, data }))}\n          onPrev={handlePrevious}\n          onExit={() => {\n            message.success('Exiting knitting mode (debug)');\n            handlePrevious();\n          }}\n        />\n      );\n    }\n    \n    return (\n      <Card>\n        <h2>Debug Mode - All Components Loaded Successfully!</h2>\n        <p>Current step: {currentStep}</p>\n        <p>Step name: {steps[currentStep]?.title}</p>\n        <p>Pattern name: {patternData.name || 'No name set'}</p>\n        <p>All step components are now imported and working:</p>\n        <ul>\n          <li>✅ PatternSetup</li>\n          <li>✅ PatternEditor (always available as step 2)</li>\n          <li>✅ SizingStep</li>\n          <li>✅ GaugeStep</li>\n          <li>✅ ColorworkStep</li>\n          <li>✅ PreviewStep</li>\n          <li>✅ InteractiveKnitting</li>\n        </ul>\n        <p><strong>New Flow:</strong> Users can now edit any pattern in the Pattern Editor step!</p>\n      </Card>\n    );\n  };\n\n  return (\n    <Layout className=\"knitting-design-app\">\n      <Content>\n        <div className=\"design-container\">\n          {/* Progress Steps */}\n          <Card className=\"progress-card\">\n            <Row gutter={[24, 24]}>\n              <Col span={24}>\n                <Steps\n                  current={currentStep}\n                  onChange={handleStepClick}\n                  items={steps.map((step, index) => {\n                    const stepColor = getStepColor(index);\n                    return {\n                      title: step.title,\n                      disabled: false,\n                      icon: currentStep === index ? (\n                        <div style={{\n                          width: '20px',\n                          height: '20px',\n                          borderRadius: '50%',\n                          background: stepColor.primary,\n                          border: '2px solid white',\n                          boxShadow: `0 0 0 2px ${stepColor.primary}`\n                        }} />\n                      ) : currentStep > index ? (\n                        <div style={{\n                          width: '20px',\n                          height: '20px',\n                          borderRadius: '50%',\n                          background: stepColor.primary,\n                          display: 'flex',\n                          alignItems: 'center',\n                          justifyContent: 'center',\n                          color: 'white',\n                          fontSize: '12px',\n                          fontWeight: 'bold'\n                        }}>✓</div>\n                      ) : (\n                        <div style={{\n                          width: '20px',\n                          height: '20px',\n                          borderRadius: '50%',\n                          background: '#f0f0f0',\n                          border: `2px solid ${stepColor.primary}`,\n                          color: stepColor.primary,\n                          display: 'flex',\n                          alignItems: 'center',\n                          justifyContent: 'center',\n                          fontSize: '12px',\n                          fontWeight: 'bold'\n                        }}>{index + 1}</div>\n                      )\n                    };\n                  })}\n                  className=\"design-steps rainbow-steps\"\n                />\n              </Col>\n            </Row>\n          </Card>\n\n          {/* Step Content */}\n          <div className=\"step-content\">\n            {renderStepContent()}\n          </div>\n        </div>\n      </Content>\n    </Layout>\n  );\n};\n\nexport default KnittingDesignApp;\n"],"names":["VisualMotif","constructor","type","primaryMotif","secondaryMotifs","arguments","length","undefined","mainColor","contrastColors","successor","truncatedBy","horizontalRepeat","verticalRepeat","height","this","getChild","row","currentMotif","accumulatedHeight","child","standardGarmentSizes","generateGarmentSizes","sizeOrder","getSizeIndex","size","indexOf","sizes","forEach","mensSize","womensSize","mensSizeIndex","multiplier","sizeIndex","Math","pow","sizeName","concat","toLowerCase","round","garments","defaultColors","renderHierarchy","trap","scale","xOffset","yOffset","dimensions","minX","maxX","minY","maxY","fillColor","elements","trapWidth","max","baseA","baseB","xTopLeft","baseBHorizontalOffset","xTopRight","xBottomLeft","xBottomRight","yTop","yBottom","min","push","shape","width","_jsx","points","fill","stroke","strokeWidth","strokeLinejoin","renderTrapezoid","successors","successorWidths","map","s","childXOffset","reduce","sum","w","i","successorWidth","childDimensions","PanelDiagram","_ref","label","padding","token","theme","useToken","colorPrimary","availableWidth","availableHeight","scaleFactor","scaledHeight","translateX","translateY","_jsxs","style","float","children","viewBox","preserveAspectRatio","transform","Title","Text","Typography","_data$basePattern","data","onChange","onNext","onJumpToStep","basePatterns","id","name","description","shapes","garment","permalink","title","finishingSteps","useEffect","basePattern","customPattern","find","p","className","Row","gutter","Col","span","Card","level","maxHeight","overflowY","Radio","value","e","patternId","pattern","handlePatternSelect","target","Space","direction","_data$basePattern2","display","alignItems","border","borderRadius","marginBottom","backgroundColor","marginRight","flexShrink","gap","Object","entries","slice","_ref2","shapeName","textAlign","fontSize","color","marginTop","flex","fontWeight","keys","join","fontStyle","Button","onClick","handleNext","disabled","Option","Select","TextArea","Input","ShapeEditorModal","_ref3","visible","shapeData","onSave","onCancel","existingShapes","form","Form","useForm","setShape","useState","setSuccessors","React","_objectSpread","setFieldsValue","handleFieldChange","field","updatedShape","handleAddSuccessor","newSuccessor","parentPath","parentHeight","parentBaseA","parentBaseB","newSuccessors","JSON","parse","stringify","current","index","parentIndex","parent","handleSuccessorChange","path","targetIndex","SuccessorItem","_ref4","pathString","indent","marginLeft","align","strong","InputNumber","icon","PlusOutlined","danger","DeleteOutlined","filter","_","indexToRemove","Array","isArray","splice","handleRemoveSuccessor","childSuccessor","childIndex","Modal","open","onOk","handleSave","validateFields","then","values","top","layout","Item","rules","required","message","placeholder","Divider","justifyContent","_data$basePattern3","onBack","setShapes","currentShape","setCurrentShape","editingShape","setEditingShape","previewShape","setPreviewShape","initialShapes","customShapes","isCustomPattern","patternTitle","patternDescription","lg","md","rows","extra","handleAddShape","sm","xs","EyeOutlined","EditOutlined","handleEditShape","newShapes","handleDeleteShape","trim","warning","footer","panel","subtitle","showInfoText","infoText","containerPadding","diagramSizeMin","diagramSizeMax","scalingMultiplier","cardProps","_objectWithoutProperties","_excluded","calculatePatternDimensions","renderHierarchyForDimensions","scaleParam","visualPatternDimensions","scaledPatternDimensions","basePatternSize","diagramSize","patternDisplaySize","panelBounds","scaledWidth","originalWidth","originalHeight","calculatePanelDiagramBounds","patternWidth","patternHeight","minHeight","position","margin","left","pointerEvents","zIndex","markerWidth","markerHeight","refX","refY","orient","markerUnits","d","panelLeft","panelTop","panelCenterX","panelCenterY","patternLeft","patternTop","patternRight","patternBottom","console","log","_Fragment","x1","y1","x2","y2","strokeDasharray","markerStart","markerEnd","x","y","rx","textAnchor","fontFamily","patternCenterX","patternCenterY","letterSpacing","InfoCircleOutlined","Paragraph","onPrevious","dispatch","useDispatch","patternData","useSelector","state","knittingDesign","sizing","calculatedDimensions","setCalculatedDimensions","baseDimensions","calculateSizeMultiplier","generateStandardSizes","gender","chest","armLength","method","selectedGender","selectedSize","standardSize","scaled","key","customDimensions","updateSizingData","newData","updatePatternData","section","handleGenderChange","handleStandardSizeChange","handleScaleChange","handleCustomPanelChange","dimension","newDimensions","allPatternShapes","getAllPatternShapes","_patternData$basePatt","_data$customDimension","selectedBaseDimensions","_allPatternShapes$","firstShape","baseSizeFactor","_allPatternShapes$2","flexDirection","_patternData$basePatt2","PatternDimensionVisualization","background","baseUpdate","front","back","leftSleeve","rightSleeve","lineHeight","Slider","step","marks","formatter","parser","replace","panelName","charAt","toUpperCase","_ref5","YARN_WEIGHT_PRESETS","stitches","needleSize","_YARN_WEIGHT_PRESETS$","_YARN_WEIGHT_PRESETS$2","onUpdate","onPrev","tempGauge","setTempGauge","gauge","yarnWeight","swatchSize","fabricDimensions","setFabricDimensions","hasSwatchMeasurement","setHasSwatchMeasurement","calculateFabricDimensions","fabricWidth","toFixed","fabricLength","handleGaugeChange","prev","weight","preset","swatchStitches","swatchRows","ghost","handleSwatchCalculation","error","calculatedStitches","calculatedRows","success","Tag","CheckCircleOutlined","addonAfter","strokeColor","random","toString","substr","cursor","strokeLinecap","colors","onStitchClick","showScrollbars","maxDisplayStitches","useMemo","stitchesWide","rowsHigh","stitchSize","totalStitches","patternGrid","warn","grid","rowStitches","stitch","colorIndex","patternRow","patternCol","handleStitchClick","useCallback","containerStyle","gridStyle","gridTemplateColumns","maxWidth","overflow","r","KnitStitch","patternType","patternSize","onPatternChange","onColorsChange","activeColorIndex","setActiveColorIndex","patternName","setPatternName","currentPattern","initializePattern","newPattern","handleSizeChange","newSize","newRow","col","addColor","newColors","ColorPicker","updateColor","toHexString","MinusOutlined","stopPropagation","removeColor","SwatchViewer","Compact","SaveOutlined","showBorder","borderColor","stitchGrid","boxShadow","flexWrap","TabPane","Tabs","COLORWORK_TYPES","solid","complexity","default","stripes","stranded","intarsia","POSITIONING_OPTIONS","colorworkState","_state$knittingDesign","_state$knittingDesign2","colorwork","_state$knittingDesign3","_state$knittingDesign4","hasInitialized","useRef","activeTab","setActiveTab","selectedComplexPattern","setSelectedComplexPattern","newComplexPatternName","setNewComplexPatternName","garmentPreviewMode","setGarmentPreviewMode","swatchSettings","setSwatchSettings","testPattern","testColors","setTestColors","initialized","_data$colorwork","_data$colorwork2","initialState","savedPatterns","workingPatterns","complexPatterns","garmentSequence","activeWorkingPattern","updateColorwork","handleColorChange","newState","handleSavePattern","savePattern","handleCreateComplexPattern","complexPattern","Date","now","components","created","toISOString","createComplexPattern","handleAddToGarment","isComplex","sequenceItem","positioning","customOffset","opacity","garmentSection","addToGarmentSequence","info","hoverable","handleColorworkTypeChange","renderSwatchTester","_swatchSettings$testP","stitchesPerInch","rowsPerInch","allowClear","_COLORWORK_TYPES$patt7","KnitSwatch","Alert","showIcon","activeKey","tab","renderBasicPatterns","_colorworkState$activ2","_colorworkState$activ","setActiveWorkingPattern","Avatar","List","dataSource","renderItem","_pattern$colors","_COLORWORK_TYPES$patt","_COLORWORK_TYPES$patt2","_pattern$colors2","actions","Tooltip","CopyOutlined","duplicate","Popconfirm","onConfirm","handleDeletePattern","deletePattern","Meta","avatar","PatternEditor","initialPattern","renderComplexPatterns","_colorworkState$compl3","_colorworkState$compl4","_colorworkState$compl5","_colorworkState$compl6","Group","compact","onPressEnter","_pattern$components","_pattern$components2","Badge","count","AppstoreAddOutlined","deleteComplexPattern","_pattern$colors3","_COLORWORK_TYPES$patt3","_COLORWORK_TYPES$patt4","handleAddToComplex","complexPatternId","_colorworkState$compl","_colorworkState$compl2","component","updateComplexPattern","updates","_component$patternId","_colorworkState$compl7","_colorworkState$compl8","updatedComponents","_colorworkState$compl9","_colorworkState$compl0","opt","_colorworkState$compl1","_colorworkState$compl10","orientation","plain","_pattern$colors4","_COLORWORK_TYPES$patt5","_COLORWORK_TYPES$patt6","_pattern$components3","item","_item$patternId","_item$patternId2","updateGarmentSequence","EyeInvisibleOutlined","removeFromGarmentSequence","PREVIEW_MODES","flat","technical","schematic","VISUALIZATION_OPTIONS","realistic","symbolic","wireframe","_data$sizing","_data$sizing2","_data$sizing2$customD","_data$sizing3","_data$sizing4","_data$sizing4$customD","_data$colorwork3","_data$sizing5","_data$sizing6","_data$sizing6$customD","_data$sizing7","_data$sizing8","_data$sizing8$customD","_data$sizing9","_data$sizing0","_data$sizing0$customD","_data$sizing1","_data$sizing10","_data$sizing10$custom","_data$gauge2","_data$gauge3","_data$colorwork4","_patternStats$totalSt","_data$colorwork5","_data$gauge4","_data$gauge5","_data$sizing11","_data$colorwork6","previewSettings","setPreviewSettings","mode","visualization","showGrid","showMeasurements","showStitchCount","zoom","rotation","z","lighting","patternStats","setPatternStats","calculatePatternStats","totalRows","estimatedTime","bodyStitches","bodyRows","enabled","difficulty","calculateDifficulty","_data$gauge","levels","updatePreviewSetting","handleRotation","axis","increment","exportOptions","Menu","FileTextOutlined","FileImageOutlined","ZoomOutOutlined","minWidth","ZoomInOutlined","transition","backgroundSize","backgroundPosition","right","bottom","backgroundImage","Switch","checkedChildren","unCheckedChildren","checked","RotateLeftOutlined","RotateRightOutlined","resetView","Dropdown","overlay","trigger","DownloadOutlined","toLocaleString","wrap","preview","STITCH_SYMBOLS","k","symbol","yo","k2tog","ssk","sl","_data$sizing$customDi","currentRow","setCurrentRow","currentStitch","setCurrentStitch","isPlaying","setIsPlaying","playbackSpeed","setPlaybackSpeed","showChart","setShowChart","showInstructions","setShowInstructions","completedStitches","setCompletedStitches","Set","sessionNotes","setSessionNotes","startTime","setStartTime","elapsedTime","setElapsedTime","knittingLog","setKnittingLog","intervalRef","timerRef","rowInstructions","generateRowInstructions","rowNumber","_sizing$customDimensi","stitchCount","instruction","from","notes","isKnitRow","_colorwork$colors","progressPercent","setInterval","advanceStitch","clearInterval","floor","newStitch","prevCompleted","completeRow","logEntry","completedAt","toLocaleTimeString","goToRow","onKeyDown","preventDefault","tabIndex","Progress","percent","status","showInfo","ClockCircleOutlined","seconds","hours","minutes","secs","padStart","formatTime","AimOutlined","FastBackwardOutlined","block","StepBackwardOutlined","PauseOutlined","PlayCircleOutlined","StepForwardOutlined","parseInt","isCompleted","has","isCurrent","stitchInfo","Popover","content","goToStitch","stitchNumber","gridColumn","BookOutlined","onMouseEnter","onMouseLeave","STEP_COLORS","primary","secondary","getStepColor","stepIndex","Content","Layout","view","stepInfo","selectCurrentStepInfo","selectPatternData","currentStep","steps","canGoNext","canGoPrevious","selectIsKnittingMode","selectIsDirty","selectSessionId","selectLastSaved","newSessionId","sessionId","nextStep","handlePrevious","previousStep","handleJumpToStep","jumpToStep","Steps","items","stepColor","renderStepContent","_steps$currentStep","_steps$currentStep2","currentStepKey","PatternSetup","CustomShapeStep","_patternData$sizing","_patternData$sizing2","_patternData$sizing3","_patternData$sizing4","_patternData$sizing5","defaultCustomDimensions","sizingData","percentage","modifiedPatternData","SizingStep","_data$customDimension2","_data$customDimension3","reduxData","GaugeStep","ColorworkStep","layers","PreviewStep","onStartKnitting","InteractiveKnitting","onExit"],"sourceRoot":""}